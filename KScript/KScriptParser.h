/** \file
 *  This C header file was generated by $ANTLR version 3.4
 *
 *     -  From the grammar source file : L:\\DXGame\\KScript\\KScript.g
 *     -                            On : 2013-05-29 17:48:48
 *     -                for the parser : KScriptParserParser
 *
 * Editing it, at least manually, is not wise.
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
 * The parser 
KScriptParser

has the callable functions (rules) shown below,
 * which will invoke the code for the associated rule in the source grammar
 * assuming that the input stream is pointing to a token/text stream that could begin
 * this rule.
 *
 * For instance if you call the first (topmost) rule in a parser grammar, you will
 * get the results of a full parse, but calling a rule half way through the grammar will
 * allow you to pass part of a full token stream to the parser, such as for syntax checking
 * in editors and so on.
 *
 * The parser entry points are called indirectly (by function pointer to function) via
 * a parser context typedef pKScriptParser, which is returned from a call to KScriptParserNew().
 *
 * The methods in pKScriptParser are  as follows:
 *
 *  - 
 KScriptParser_program_return
      pKScriptParser->program(pKScriptParser)
 *  - 
 KScriptParser_blockStatement_return
      pKScriptParser->blockStatement(pKScriptParser)
 *  - 
 KScriptParser_statement_return
      pKScriptParser->statement(pKScriptParser)
 *  - 
 KScriptParser_defineFunction_return
      pKScriptParser->defineFunction(pKScriptParser)
 *  - 
 KScriptParser_returnStatement_return
      pKScriptParser->returnStatement(pKScriptParser)
 *  - 
 KScriptParser_extendedStatement_return
      pKScriptParser->extendedStatement(pKScriptParser)
 *  - 
 KScriptParser_breakStatement_return
      pKScriptParser->breakStatement(pKScriptParser)
 *  - 
 KScriptParser_continueStatement_return
      pKScriptParser->continueStatement(pKScriptParser)
 *  - 
 KScriptParser_ifStatement_return
      pKScriptParser->ifStatement(pKScriptParser)
 *  - 
 KScriptParser_elseStatement_return
      pKScriptParser->elseStatement(pKScriptParser)
 *  - 
 KScriptParser_whileStatement_return
      pKScriptParser->whileStatement(pKScriptParser)
 *  - 
 KScriptParser_forStatement_return
      pKScriptParser->forStatement(pKScriptParser)
 *  - 
 KScriptParser_switchStatement_return
      pKScriptParser->switchStatement(pKScriptParser)
 *  - 
 KScriptParser_caseStatement_return
      pKScriptParser->caseStatement(pKScriptParser)
 *  - 
 KScriptParser_expressionStatement_return
      pKScriptParser->expressionStatement(pKScriptParser)
 *  - 
 KScriptParser_expression_return
      pKScriptParser->expression(pKScriptParser)
 *  - 
 KScriptParser_assignment_return
      pKScriptParser->assignment(pKScriptParser)
 *  - 
 KScriptParser_stringExpression_return
      pKScriptParser->stringExpression(pKScriptParser)
 *  - 
 KScriptParser_conditionalExpression_return
      pKScriptParser->conditionalExpression(pKScriptParser)
 *  - 
 KScriptParser_logicalOrExpression_return
      pKScriptParser->logicalOrExpression(pKScriptParser)
 *  - 
 KScriptParser_logicalAndExpression_return
      pKScriptParser->logicalAndExpression(pKScriptParser)
 *  - 
 KScriptParser_relationalExpression_return
      pKScriptParser->relationalExpression(pKScriptParser)
 *  - 
 KScriptParser_additiveExpression_return
      pKScriptParser->additiveExpression(pKScriptParser)
 *  - 
 KScriptParser_additiveOperator_return
      pKScriptParser->additiveOperator(pKScriptParser)
 *  - 
 KScriptParser_multiplicativeExpression_return
      pKScriptParser->multiplicativeExpression(pKScriptParser)
 *  - 
 KScriptParser_multiplicativeOperator_return
      pKScriptParser->multiplicativeOperator(pKScriptParser)
 *  - 
 KScriptParser_powerExpression_return
      pKScriptParser->powerExpression(pKScriptParser)
 *  - 
 KScriptParser_selfExpression_return
      pKScriptParser->selfExpression(pKScriptParser)
 *  - 
 KScriptParser_primaryExpression_return
      pKScriptParser->primaryExpression(pKScriptParser)
 *  - 
 KScriptParser_relationalOperator_return
      pKScriptParser->relationalOperator(pKScriptParser)
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 *
 * The return type for any particular rule is of course determined by the source
 * grammar file.
 */
// [The "BSD license"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#ifndef	_KScriptParser_H
#define _KScriptParser_H
/* =============================================================================
 * Standard antlr3 C runtime definitions
 */
#include    <antlr3.h>

/* End of standard antlr 3 runtime definitions
 * =============================================================================
 */

#ifdef __cplusplus
extern "C" {
#endif

// Forward declare the context typedef so that we can use it before it is
// properly defined. Delegators and delegates (from import statements) are
// interdependent and their context structures contain pointers to each other
// C only allows such things to be declared if you pre-declare the typedef.
//
typedef struct KScriptParser_Ctx_struct KScriptParser, * pKScriptParser;



#ifdef	ANTLR3_WINDOWS
// Disable: Unreferenced parameter,							- Rules with parameters that are not used
//          constant conditional,							- ANTLR realizes that a prediction is always true (synpred usually)
//          initialized but unused variable					- tree rewrite variables declared but not needed
//          Unreferenced local variable						- lexer rule declares but does not always use _type
//          potentially unitialized variable used			- retval always returned from a rule
//			unreferenced local function has been removed	- susually getTokenNames or freeScope, they can go without warnigns
//
// These are only really displayed at warning level /W4 but that is the code ideal I am aiming at
// and the codegen must generate some of these warnings by necessity, apart from 4100, which is
// usually generated when a parser rule is given a parameter that it does not use. Mostly though
// this is a matter of orthogonality hence I disable that one.
//
#pragma warning( disable : 4100 )
#pragma warning( disable : 4101 )
#pragma warning( disable : 4127 )
#pragma warning( disable : 4189 )
#pragma warning( disable : 4505 )
#pragma warning( disable : 4701 )
#endif

/* ========================
 * BACKTRACKING IS ENABLED
 * ========================
 */

typedef struct KScriptParser_program_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    KScriptParser_program_return;



typedef struct KScriptParser_blockStatement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    KScriptParser_blockStatement_return;



typedef struct KScriptParser_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    KScriptParser_statement_return;



typedef struct KScriptParser_defineFunction_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    KScriptParser_defineFunction_return;



typedef struct KScriptParser_returnStatement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    KScriptParser_returnStatement_return;



typedef struct KScriptParser_extendedStatement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    KScriptParser_extendedStatement_return;



typedef struct KScriptParser_breakStatement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    KScriptParser_breakStatement_return;



typedef struct KScriptParser_continueStatement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    KScriptParser_continueStatement_return;



typedef struct KScriptParser_ifStatement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    KScriptParser_ifStatement_return;



typedef struct KScriptParser_elseStatement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    KScriptParser_elseStatement_return;



typedef struct KScriptParser_whileStatement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    KScriptParser_whileStatement_return;



typedef struct KScriptParser_forStatement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    KScriptParser_forStatement_return;



typedef struct KScriptParser_switchStatement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    KScriptParser_switchStatement_return;



typedef struct KScriptParser_caseStatement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    KScriptParser_caseStatement_return;



typedef struct KScriptParser_expressionStatement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    KScriptParser_expressionStatement_return;



typedef struct KScriptParser_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    KScriptParser_expression_return;



typedef struct KScriptParser_assignment_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    KScriptParser_assignment_return;



typedef struct KScriptParser_stringExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    KScriptParser_stringExpression_return;



typedef struct KScriptParser_conditionalExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    KScriptParser_conditionalExpression_return;



typedef struct KScriptParser_logicalOrExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    KScriptParser_logicalOrExpression_return;



typedef struct KScriptParser_logicalAndExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    KScriptParser_logicalAndExpression_return;



typedef struct KScriptParser_relationalExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    KScriptParser_relationalExpression_return;



typedef struct KScriptParser_additiveExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    KScriptParser_additiveExpression_return;



typedef struct KScriptParser_additiveOperator_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    KScriptParser_additiveOperator_return;



typedef struct KScriptParser_multiplicativeExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    KScriptParser_multiplicativeExpression_return;



typedef struct KScriptParser_multiplicativeOperator_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    KScriptParser_multiplicativeOperator_return;



typedef struct KScriptParser_powerExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    KScriptParser_powerExpression_return;



typedef struct KScriptParser_selfExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    KScriptParser_selfExpression_return;



typedef struct KScriptParser_primaryExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    KScriptParser_primaryExpression_return;



typedef struct KScriptParser_relationalOperator_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    KScriptParser_relationalOperator_return;




/** Context tracking structure for 
KScriptParser

 */
struct KScriptParser_Ctx_struct
{
    /** Built in ANTLR3 context tracker contains all the generic elements
     *  required for context tracking.
     */
    pANTLR3_PARSER   pParser;

     KScriptParser_program_return
     (*program)	(struct KScriptParser_Ctx_struct * ctx);

     KScriptParser_blockStatement_return
     (*blockStatement)	(struct KScriptParser_Ctx_struct * ctx);

     KScriptParser_statement_return
     (*statement)	(struct KScriptParser_Ctx_struct * ctx);

     KScriptParser_defineFunction_return
     (*defineFunction)	(struct KScriptParser_Ctx_struct * ctx);

     KScriptParser_returnStatement_return
     (*returnStatement)	(struct KScriptParser_Ctx_struct * ctx);

     KScriptParser_extendedStatement_return
     (*extendedStatement)	(struct KScriptParser_Ctx_struct * ctx);

     KScriptParser_breakStatement_return
     (*breakStatement)	(struct KScriptParser_Ctx_struct * ctx);

     KScriptParser_continueStatement_return
     (*continueStatement)	(struct KScriptParser_Ctx_struct * ctx);

     KScriptParser_ifStatement_return
     (*ifStatement)	(struct KScriptParser_Ctx_struct * ctx);

     KScriptParser_elseStatement_return
     (*elseStatement)	(struct KScriptParser_Ctx_struct * ctx);

     KScriptParser_whileStatement_return
     (*whileStatement)	(struct KScriptParser_Ctx_struct * ctx);

     KScriptParser_forStatement_return
     (*forStatement)	(struct KScriptParser_Ctx_struct * ctx);

     KScriptParser_switchStatement_return
     (*switchStatement)	(struct KScriptParser_Ctx_struct * ctx);

     KScriptParser_caseStatement_return
     (*caseStatement)	(struct KScriptParser_Ctx_struct * ctx);

     KScriptParser_expressionStatement_return
     (*expressionStatement)	(struct KScriptParser_Ctx_struct * ctx);

     KScriptParser_expression_return
     (*expression)	(struct KScriptParser_Ctx_struct * ctx);

     KScriptParser_assignment_return
     (*assignment)	(struct KScriptParser_Ctx_struct * ctx);

     KScriptParser_stringExpression_return
     (*stringExpression)	(struct KScriptParser_Ctx_struct * ctx);

     KScriptParser_conditionalExpression_return
     (*conditionalExpression)	(struct KScriptParser_Ctx_struct * ctx);

     KScriptParser_logicalOrExpression_return
     (*logicalOrExpression)	(struct KScriptParser_Ctx_struct * ctx);

     KScriptParser_logicalAndExpression_return
     (*logicalAndExpression)	(struct KScriptParser_Ctx_struct * ctx);

     KScriptParser_relationalExpression_return
     (*relationalExpression)	(struct KScriptParser_Ctx_struct * ctx);

     KScriptParser_additiveExpression_return
     (*additiveExpression)	(struct KScriptParser_Ctx_struct * ctx);

     KScriptParser_additiveOperator_return
     (*additiveOperator)	(struct KScriptParser_Ctx_struct * ctx);

     KScriptParser_multiplicativeExpression_return
     (*multiplicativeExpression)	(struct KScriptParser_Ctx_struct * ctx);

     KScriptParser_multiplicativeOperator_return
     (*multiplicativeOperator)	(struct KScriptParser_Ctx_struct * ctx);

     KScriptParser_powerExpression_return
     (*powerExpression)	(struct KScriptParser_Ctx_struct * ctx);

     KScriptParser_selfExpression_return
     (*selfExpression)	(struct KScriptParser_Ctx_struct * ctx);

     KScriptParser_primaryExpression_return
     (*primaryExpression)	(struct KScriptParser_Ctx_struct * ctx);

     KScriptParser_relationalOperator_return
     (*relationalOperator)	(struct KScriptParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred3_KScript)	(struct KScriptParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred4_KScript)	(struct KScriptParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred14_KScript)	(struct KScriptParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred15_KScript)	(struct KScriptParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred20_KScript)	(struct KScriptParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred21_KScript)	(struct KScriptParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred22_KScript)	(struct KScriptParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred30_KScript)	(struct KScriptParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred32_KScript)	(struct KScriptParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred43_KScript)	(struct KScriptParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred49_KScript)	(struct KScriptParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred51_KScript)	(struct KScriptParser_Ctx_struct * ctx);
    // Delegated rules

    const char * (*getGrammarFileName)();
    void            (*reset)  (struct KScriptParser_Ctx_struct * ctx);
    void	    (*free)   (struct KScriptParser_Ctx_struct * ctx);
/* @headerFile.members() */
pANTLR3_BASE_TREE_ADAPTOR	adaptor;
pANTLR3_VECTOR_FACTORY		vectors;
/* End @headerFile.members() */
};

// Function protoypes for the constructor functions that external translation units
// such as delegators and delegates may wish to call.
//
ANTLR3_API pKScriptParser KScriptParserNew         (
pANTLR3_COMMON_TOKEN_STREAM
 instream);
ANTLR3_API pKScriptParser KScriptParserNewSSD      (
pANTLR3_COMMON_TOKEN_STREAM
 instream, pANTLR3_RECOGNIZER_SHARED_STATE state);

/** Symbolic definitions of all the tokens that the 
parser
 will work with.
 * \{
 *
 * Antlr will define EOF, but we can't use that as it it is too common in
 * in C header files and that would be confusing. There is no way to filter this out at the moment
 * so we just undef it here for now. That isn't the value we get back from C recognizers
 * anyway. We are looking for ANTLR3_TOKEN_EOF.
 */
#ifdef	EOF
#undef	EOF
#endif
#ifdef	Tokens
#undef	Tokens
#endif
#define EOF      -1
#define AMPERSAND      4
#define AND      5
#define ANY      6
#define ASSIGN      7
#define AT      8
#define BFALSE      9
#define BITWISEOR      10
#define BITWISEXOR      11
#define BREAK      12
#define BTRUE      13
#define CASE      14
#define CHINESECHAR      15
#define COLON      16
#define COMMA      17
#define COMMENT      18
#define CONTINUE      19
#define DEFAULT      20
#define DIGIT      21
#define DIVIDE      22
#define DIVIDEASSIGN      23
#define DO      24
#define DOLLAR      25
#define DOT      26
#define DOWNTO      27
#define ELSE      28
#define EQUALTO      29
#define ESC_SEQ      30
#define EXPONENT      31
#define FOR      32
#define GREATERTHAN      33
#define GREATERTHANOREQUALTO      34
#define HEX      35
#define HEX_DIGIT      36
#define IDENTIFIER      37
#define IF      38
#define INT      39
#define KNULL      40
#define LCURLY      41
#define LESSTHAN      42
#define LESSTHANOREQUALTO      43
#define LETTER      44
#define LINE_COMMENT      45
#define LPAREN      46
#define LSQUARE      47
#define MINUS      48
#define MINUSASSIGN      49
#define MINUSMINUS      50
#define MOD      51
#define MULTASSIGN      52
#define NOT      53
#define NOTEQUAL1      54
#define NOTEQUAL2      55
#define OCTAL_ESC      56
#define OR      57
#define PLUS      58
#define PLUSASSIGN      59
#define PLUSPLUS      60
#define POUND      61
#define POWER      62
#define QUESTION      63
#define RCURLY      64
#define REAL      65
#define RETURN      66
#define RPAREN      67
#define RSQUARE      68
#define SCOPE_COMMENT      69
#define SEMICOLON      70
#define STAR      71
#define STRING      72
#define SWITCH      73
#define TILDE      74
#define TO      75
#define UNDERLINE      76
#define UNICODE_ESC      77
#define WHILE      78
#define WS      79
#ifdef	EOF
#undef	EOF
#define	EOF	ANTLR3_TOKEN_EOF
#endif

#ifndef TOKENSOURCE
#define TOKENSOURCE(lxr) lxr->pLexer->rec->state->tokSource
#endif

/* End of token definitions for KScriptParser
 * =============================================================================
 */
/** } */

#ifdef __cplusplus
}
#endif

#endif

/* END - Note:Keep extra line feed to satisfy UNIX systems */
