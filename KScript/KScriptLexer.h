/** \file
 *  This C header file was generated by $ANTLR version 3.4
 *
 *     -  From the grammar source file : L:\\DXGame\\KScript\\KScript.g
 *     -                            On : 2013-05-29 17:48:48
 *     -                 for the lexer : KScriptLexerLexer
 *
 * Editing it, at least manually, is not wise.
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
 * The lexer 
KScriptLexer

has the callable functions (rules) shown below,
 * which will invoke the code for the associated rule in the source grammar
 * assuming that the input stream is pointing to a token/text stream that could begin
 * this rule.
 *
 * For instance if you call the first (topmost) rule in a parser grammar, you will
 * get the results of a full parse, but calling a rule half way through the grammar will
 * allow you to pass part of a full token stream to the parser, such as for syntax checking
 * in editors and so on.
 *
 * The parser entry points are called indirectly (by function pointer to function) via
 * a parser context typedef pKScriptLexer, which is returned from a call to KScriptLexerNew().
 *
 * As this is a generated lexer, it is unlikely you will call it 'manually'. However
 * the methods are provided anyway.
 *
 * The methods in pKScriptLexer are  as follows:
 *
 *  - 
 void
      pKScriptLexer->KNULL(pKScriptLexer)
 *  - 
 void
      pKScriptLexer->IF(pKScriptLexer)
 *  - 
 void
      pKScriptLexer->ELSE(pKScriptLexer)
 *  - 
 void
      pKScriptLexer->WHILE(pKScriptLexer)
 *  - 
 void
      pKScriptLexer->DO(pKScriptLexer)
 *  - 
 void
      pKScriptLexer->BREAK(pKScriptLexer)
 *  - 
 void
      pKScriptLexer->CONTINUE(pKScriptLexer)
 *  - 
 void
      pKScriptLexer->SWITCH(pKScriptLexer)
 *  - 
 void
      pKScriptLexer->CASE(pKScriptLexer)
 *  - 
 void
      pKScriptLexer->DEFAULT(pKScriptLexer)
 *  - 
 void
      pKScriptLexer->FOR(pKScriptLexer)
 *  - 
 void
      pKScriptLexer->DOWNTO(pKScriptLexer)
 *  - 
 void
      pKScriptLexer->TO(pKScriptLexer)
 *  - 
 void
      pKScriptLexer->BTRUE(pKScriptLexer)
 *  - 
 void
      pKScriptLexer->BFALSE(pKScriptLexer)
 *  - 
 void
      pKScriptLexer->RETURN(pKScriptLexer)
 *  - 
 void
      pKScriptLexer->LETTER(pKScriptLexer)
 *  - 
 void
      pKScriptLexer->CHINESECHAR(pKScriptLexer)
 *  - 
 void
      pKScriptLexer->DIGIT(pKScriptLexer)
 *  - 
 void
      pKScriptLexer->PLUSPLUS(pKScriptLexer)
 *  - 
 void
      pKScriptLexer->MINUSMINUS(pKScriptLexer)
 *  - 
 void
      pKScriptLexer->PLUSASSIGN(pKScriptLexer)
 *  - 
 void
      pKScriptLexer->MINUSASSIGN(pKScriptLexer)
 *  - 
 void
      pKScriptLexer->MULTASSIGN(pKScriptLexer)
 *  - 
 void
      pKScriptLexer->DIVIDEASSIGN(pKScriptLexer)
 *  - 
 void
      pKScriptLexer->COLON(pKScriptLexer)
 *  - 
 void
      pKScriptLexer->COMMA(pKScriptLexer)
 *  - 
 void
      pKScriptLexer->SEMICOLON(pKScriptLexer)
 *  - 
 void
      pKScriptLexer->LPAREN(pKScriptLexer)
 *  - 
 void
      pKScriptLexer->RPAREN(pKScriptLexer)
 *  - 
 void
      pKScriptLexer->LSQUARE(pKScriptLexer)
 *  - 
 void
      pKScriptLexer->RSQUARE(pKScriptLexer)
 *  - 
 void
      pKScriptLexer->LCURLY(pKScriptLexer)
 *  - 
 void
      pKScriptLexer->RCURLY(pKScriptLexer)
 *  - 
 void
      pKScriptLexer->DOT(pKScriptLexer)
 *  - 
 void
      pKScriptLexer->UNDERLINE(pKScriptLexer)
 *  - 
 void
      pKScriptLexer->EQUALTO(pKScriptLexer)
 *  - 
 void
      pKScriptLexer->ASSIGN(pKScriptLexer)
 *  - 
 void
      pKScriptLexer->NOTEQUAL1(pKScriptLexer)
 *  - 
 void
      pKScriptLexer->NOTEQUAL2(pKScriptLexer)
 *  - 
 void
      pKScriptLexer->LESSTHANOREQUALTO(pKScriptLexer)
 *  - 
 void
      pKScriptLexer->LESSTHAN(pKScriptLexer)
 *  - 
 void
      pKScriptLexer->GREATERTHANOREQUALTO(pKScriptLexer)
 *  - 
 void
      pKScriptLexer->GREATERTHAN(pKScriptLexer)
 *  - 
 void
      pKScriptLexer->DIVIDE(pKScriptLexer)
 *  - 
 void
      pKScriptLexer->PLUS(pKScriptLexer)
 *  - 
 void
      pKScriptLexer->MINUS(pKScriptLexer)
 *  - 
 void
      pKScriptLexer->STAR(pKScriptLexer)
 *  - 
 void
      pKScriptLexer->MOD(pKScriptLexer)
 *  - 
 void
      pKScriptLexer->NOT(pKScriptLexer)
 *  - 
 void
      pKScriptLexer->AND(pKScriptLexer)
 *  - 
 void
      pKScriptLexer->OR(pKScriptLexer)
 *  - 
 void
      pKScriptLexer->AMPERSAND(pKScriptLexer)
 *  - 
 void
      pKScriptLexer->TILDE(pKScriptLexer)
 *  - 
 void
      pKScriptLexer->BITWISEOR(pKScriptLexer)
 *  - 
 void
      pKScriptLexer->BITWISEXOR(pKScriptLexer)
 *  - 
 void
      pKScriptLexer->POUND(pKScriptLexer)
 *  - 
 void
      pKScriptLexer->DOLLAR(pKScriptLexer)
 *  - 
 void
      pKScriptLexer->AT(pKScriptLexer)
 *  - 
 void
      pKScriptLexer->POWER(pKScriptLexer)
 *  - 
 void
      pKScriptLexer->QUESTION(pKScriptLexer)
 *  - 
 void
      pKScriptLexer->IDENTIFIER(pKScriptLexer)
 *  - 
 void
      pKScriptLexer->INT(pKScriptLexer)
 *  - 
 void
      pKScriptLexer->REAL(pKScriptLexer)
 *  - 
 void
      pKScriptLexer->STRING(pKScriptLexer)
 *  - 
 void
      pKScriptLexer->COMMENT(pKScriptLexer)
 *  - 
 void
      pKScriptLexer->SCOPE_COMMENT(pKScriptLexer)
 *  - 
 void
      pKScriptLexer->LINE_COMMENT(pKScriptLexer)
 *  - 
 void
      pKScriptLexer->WS(pKScriptLexer)
 *  - 
 void
      pKScriptLexer->EXPONENT(pKScriptLexer)
 *  - 
 void
      pKScriptLexer->HEX_DIGIT(pKScriptLexer)
 *  - 
 void
      pKScriptLexer->HEX(pKScriptLexer)
 *  - 
 void
      pKScriptLexer->ESC_SEQ(pKScriptLexer)
 *  - 
 void
      pKScriptLexer->OCTAL_ESC(pKScriptLexer)
 *  - 
 void
      pKScriptLexer->UNICODE_ESC(pKScriptLexer)
 *  - 
 void
      pKScriptLexer->ANY(pKScriptLexer)
 *  - 
 void
      pKScriptLexer->Tokens(pKScriptLexer)
 *
 * The return type for any particular rule is of course determined by the source
 * grammar file.
 */
// [The "BSD license"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#ifndef	_KScriptLexer_H
#define _KScriptLexer_H
/* =============================================================================
 * Standard antlr3 C runtime definitions
 */
#include    <antlr3.h>

/* End of standard antlr 3 runtime definitions
 * =============================================================================
 */

#ifdef __cplusplus
extern "C" {
#endif

// Forward declare the context typedef so that we can use it before it is
// properly defined. Delegators and delegates (from import statements) are
// interdependent and their context structures contain pointers to each other
// C only allows such things to be declared if you pre-declare the typedef.
//
typedef struct KScriptLexer_Ctx_struct KScriptLexer, * pKScriptLexer;



#ifdef	ANTLR3_WINDOWS
// Disable: Unreferenced parameter,							- Rules with parameters that are not used
//          constant conditional,							- ANTLR realizes that a prediction is always true (synpred usually)
//          initialized but unused variable					- tree rewrite variables declared but not needed
//          Unreferenced local variable						- lexer rule declares but does not always use _type
//          potentially unitialized variable used			- retval always returned from a rule
//			unreferenced local function has been removed	- susually getTokenNames or freeScope, they can go without warnigns
//
// These are only really displayed at warning level /W4 but that is the code ideal I am aiming at
// and the codegen must generate some of these warnings by necessity, apart from 4100, which is
// usually generated when a parser rule is given a parameter that it does not use. Mostly though
// this is a matter of orthogonality hence I disable that one.
//
#pragma warning( disable : 4100 )
#pragma warning( disable : 4101 )
#pragma warning( disable : 4127 )
#pragma warning( disable : 4189 )
#pragma warning( disable : 4505 )
#pragma warning( disable : 4701 )
#endif

/** Context tracking structure for 
KScriptLexer

 */
struct KScriptLexer_Ctx_struct
{
    /** Built in ANTLR3 context tracker contains all the generic elements
     *  required for context tracking.
     */
    pANTLR3_LEXER    pLexer;

     void
     (*mKNULL)	(struct KScriptLexer_Ctx_struct * ctx);

     void
     (*mIF)	(struct KScriptLexer_Ctx_struct * ctx);

     void
     (*mELSE)	(struct KScriptLexer_Ctx_struct * ctx);

     void
     (*mWHILE)	(struct KScriptLexer_Ctx_struct * ctx);

     void
     (*mDO)	(struct KScriptLexer_Ctx_struct * ctx);

     void
     (*mBREAK)	(struct KScriptLexer_Ctx_struct * ctx);

     void
     (*mCONTINUE)	(struct KScriptLexer_Ctx_struct * ctx);

     void
     (*mSWITCH)	(struct KScriptLexer_Ctx_struct * ctx);

     void
     (*mCASE)	(struct KScriptLexer_Ctx_struct * ctx);

     void
     (*mDEFAULT)	(struct KScriptLexer_Ctx_struct * ctx);

     void
     (*mFOR)	(struct KScriptLexer_Ctx_struct * ctx);

     void
     (*mDOWNTO)	(struct KScriptLexer_Ctx_struct * ctx);

     void
     (*mTO)	(struct KScriptLexer_Ctx_struct * ctx);

     void
     (*mBTRUE)	(struct KScriptLexer_Ctx_struct * ctx);

     void
     (*mBFALSE)	(struct KScriptLexer_Ctx_struct * ctx);

     void
     (*mRETURN)	(struct KScriptLexer_Ctx_struct * ctx);

     void
     (*mLETTER)	(struct KScriptLexer_Ctx_struct * ctx);

     void
     (*mCHINESECHAR)	(struct KScriptLexer_Ctx_struct * ctx);

     void
     (*mDIGIT)	(struct KScriptLexer_Ctx_struct * ctx);

     void
     (*mPLUSPLUS)	(struct KScriptLexer_Ctx_struct * ctx);

     void
     (*mMINUSMINUS)	(struct KScriptLexer_Ctx_struct * ctx);

     void
     (*mPLUSASSIGN)	(struct KScriptLexer_Ctx_struct * ctx);

     void
     (*mMINUSASSIGN)	(struct KScriptLexer_Ctx_struct * ctx);

     void
     (*mMULTASSIGN)	(struct KScriptLexer_Ctx_struct * ctx);

     void
     (*mDIVIDEASSIGN)	(struct KScriptLexer_Ctx_struct * ctx);

     void
     (*mCOLON)	(struct KScriptLexer_Ctx_struct * ctx);

     void
     (*mCOMMA)	(struct KScriptLexer_Ctx_struct * ctx);

     void
     (*mSEMICOLON)	(struct KScriptLexer_Ctx_struct * ctx);

     void
     (*mLPAREN)	(struct KScriptLexer_Ctx_struct * ctx);

     void
     (*mRPAREN)	(struct KScriptLexer_Ctx_struct * ctx);

     void
     (*mLSQUARE)	(struct KScriptLexer_Ctx_struct * ctx);

     void
     (*mRSQUARE)	(struct KScriptLexer_Ctx_struct * ctx);

     void
     (*mLCURLY)	(struct KScriptLexer_Ctx_struct * ctx);

     void
     (*mRCURLY)	(struct KScriptLexer_Ctx_struct * ctx);

     void
     (*mDOT)	(struct KScriptLexer_Ctx_struct * ctx);

     void
     (*mUNDERLINE)	(struct KScriptLexer_Ctx_struct * ctx);

     void
     (*mEQUALTO)	(struct KScriptLexer_Ctx_struct * ctx);

     void
     (*mASSIGN)	(struct KScriptLexer_Ctx_struct * ctx);

     void
     (*mNOTEQUAL1)	(struct KScriptLexer_Ctx_struct * ctx);

     void
     (*mNOTEQUAL2)	(struct KScriptLexer_Ctx_struct * ctx);

     void
     (*mLESSTHANOREQUALTO)	(struct KScriptLexer_Ctx_struct * ctx);

     void
     (*mLESSTHAN)	(struct KScriptLexer_Ctx_struct * ctx);

     void
     (*mGREATERTHANOREQUALTO)	(struct KScriptLexer_Ctx_struct * ctx);

     void
     (*mGREATERTHAN)	(struct KScriptLexer_Ctx_struct * ctx);

     void
     (*mDIVIDE)	(struct KScriptLexer_Ctx_struct * ctx);

     void
     (*mPLUS)	(struct KScriptLexer_Ctx_struct * ctx);

     void
     (*mMINUS)	(struct KScriptLexer_Ctx_struct * ctx);

     void
     (*mSTAR)	(struct KScriptLexer_Ctx_struct * ctx);

     void
     (*mMOD)	(struct KScriptLexer_Ctx_struct * ctx);

     void
     (*mNOT)	(struct KScriptLexer_Ctx_struct * ctx);

     void
     (*mAND)	(struct KScriptLexer_Ctx_struct * ctx);

     void
     (*mOR)	(struct KScriptLexer_Ctx_struct * ctx);

     void
     (*mAMPERSAND)	(struct KScriptLexer_Ctx_struct * ctx);

     void
     (*mTILDE)	(struct KScriptLexer_Ctx_struct * ctx);

     void
     (*mBITWISEOR)	(struct KScriptLexer_Ctx_struct * ctx);

     void
     (*mBITWISEXOR)	(struct KScriptLexer_Ctx_struct * ctx);

     void
     (*mPOUND)	(struct KScriptLexer_Ctx_struct * ctx);

     void
     (*mDOLLAR)	(struct KScriptLexer_Ctx_struct * ctx);

     void
     (*mAT)	(struct KScriptLexer_Ctx_struct * ctx);

     void
     (*mPOWER)	(struct KScriptLexer_Ctx_struct * ctx);

     void
     (*mQUESTION)	(struct KScriptLexer_Ctx_struct * ctx);

     void
     (*mIDENTIFIER)	(struct KScriptLexer_Ctx_struct * ctx);

     void
     (*mINT)	(struct KScriptLexer_Ctx_struct * ctx);

     void
     (*mREAL)	(struct KScriptLexer_Ctx_struct * ctx);

     void
     (*mSTRING)	(struct KScriptLexer_Ctx_struct * ctx);

     void
     (*mCOMMENT)	(struct KScriptLexer_Ctx_struct * ctx);

     void
     (*mSCOPE_COMMENT)	(struct KScriptLexer_Ctx_struct * ctx);

     void
     (*mLINE_COMMENT)	(struct KScriptLexer_Ctx_struct * ctx);

     void
     (*mWS)	(struct KScriptLexer_Ctx_struct * ctx);

     void
     (*mEXPONENT)	(struct KScriptLexer_Ctx_struct * ctx);

     void
     (*mHEX_DIGIT)	(struct KScriptLexer_Ctx_struct * ctx);

     void
     (*mHEX)	(struct KScriptLexer_Ctx_struct * ctx);

     void
     (*mESC_SEQ)	(struct KScriptLexer_Ctx_struct * ctx);

     void
     (*mOCTAL_ESC)	(struct KScriptLexer_Ctx_struct * ctx);

     void
     (*mUNICODE_ESC)	(struct KScriptLexer_Ctx_struct * ctx);

     void
     (*mANY)	(struct KScriptLexer_Ctx_struct * ctx);

     void
     (*mTokens)	(struct KScriptLexer_Ctx_struct * ctx);
    const char * (*getGrammarFileName)();
    void            (*reset)  (struct KScriptLexer_Ctx_struct * ctx);
    void	    (*free)   (struct KScriptLexer_Ctx_struct * ctx);
};

// Function protoypes for the constructor functions that external translation units
// such as delegators and delegates may wish to call.
//
ANTLR3_API pKScriptLexer KScriptLexerNew         (
pANTLR3_INPUT_STREAM
 instream);
ANTLR3_API pKScriptLexer KScriptLexerNewSSD      (
pANTLR3_INPUT_STREAM
 instream, pANTLR3_RECOGNIZER_SHARED_STATE state);

/** Symbolic definitions of all the tokens that the 
lexer
 will work with.
 * \{
 *
 * Antlr will define EOF, but we can't use that as it it is too common in
 * in C header files and that would be confusing. There is no way to filter this out at the moment
 * so we just undef it here for now. That isn't the value we get back from C recognizers
 * anyway. We are looking for ANTLR3_TOKEN_EOF.
 */
#ifdef	EOF
#undef	EOF
#endif
#ifdef	Tokens
#undef	Tokens
#endif
#define EOF      -1
#define AMPERSAND      4
#define AND      5
#define ANY      6
#define ASSIGN      7
#define AT      8
#define BFALSE      9
#define BITWISEOR      10
#define BITWISEXOR      11
#define BREAK      12
#define BTRUE      13
#define CASE      14
#define CHINESECHAR      15
#define COLON      16
#define COMMA      17
#define COMMENT      18
#define CONTINUE      19
#define DEFAULT      20
#define DIGIT      21
#define DIVIDE      22
#define DIVIDEASSIGN      23
#define DO      24
#define DOLLAR      25
#define DOT      26
#define DOWNTO      27
#define ELSE      28
#define EQUALTO      29
#define ESC_SEQ      30
#define EXPONENT      31
#define FOR      32
#define GREATERTHAN      33
#define GREATERTHANOREQUALTO      34
#define HEX      35
#define HEX_DIGIT      36
#define IDENTIFIER      37
#define IF      38
#define INT      39
#define KNULL      40
#define LCURLY      41
#define LESSTHAN      42
#define LESSTHANOREQUALTO      43
#define LETTER      44
#define LINE_COMMENT      45
#define LPAREN      46
#define LSQUARE      47
#define MINUS      48
#define MINUSASSIGN      49
#define MINUSMINUS      50
#define MOD      51
#define MULTASSIGN      52
#define NOT      53
#define NOTEQUAL1      54
#define NOTEQUAL2      55
#define OCTAL_ESC      56
#define OR      57
#define PLUS      58
#define PLUSASSIGN      59
#define PLUSPLUS      60
#define POUND      61
#define POWER      62
#define QUESTION      63
#define RCURLY      64
#define REAL      65
#define RETURN      66
#define RPAREN      67
#define RSQUARE      68
#define SCOPE_COMMENT      69
#define SEMICOLON      70
#define STAR      71
#define STRING      72
#define SWITCH      73
#define TILDE      74
#define TO      75
#define UNDERLINE      76
#define UNICODE_ESC      77
#define WHILE      78
#define WS      79
#ifdef	EOF
#undef	EOF
#define	EOF	ANTLR3_TOKEN_EOF
#endif

#ifndef TOKENSOURCE
#define TOKENSOURCE(lxr) lxr->pLexer->rec->state->tokSource
#endif

/* End of token definitions for KScriptLexer
 * =============================================================================
 */
/** } */

#ifdef __cplusplus
}
#endif

#endif

/* END - Note:Keep extra line feed to satisfy UNIX systems */
