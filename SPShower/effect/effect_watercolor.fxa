
//listing of all techniques and passes with embedded asm listings 

technique T0
{
    pass P0
    {
        //No embedded vertex shader
        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
            //
            // Parameters:
            //
            //   float height;
            //   float level;
            //   sampler2D noiseTexture;
            //   sampler2D tex;
            //   float waterPower;
            //   float width;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   width        c0       1
            //   height       c1       1
            //   level        c3       1
            //   waterPower   c4       1
            //   tex          s0       1
            //   noiseTexture s1       1
            //
            
                ps_2_0
                def c2, 255, 0, 1, 0.00392156886
                dcl t0.xy
                dcl_2d s0
                dcl_2d s1
                texld r0, t0, s1
                rcp r0.z, c0.x
                mul r0.xy, r0, c4.x
                mad r1.x, r0.x, r0.z, t0.x
                rcp r0.x, c1.x
                mad r1.y, r0.y, r0.x, t0.y
                texld r0, r1, s0
                mul r1.x, r0.x, c2.x
                exp r1.y, c3.x
                rcp r1.y, r1.y
                mul r1.y, r1.y, c2.x
                rcp r1.z, r1.y
                mul r1.x, r1.z, r1.x
                frc r1.w, r1.x
                cmp r2.w, -r1.w, c2.y, c2.z
                add r1.w, r1.x, -r1.w
                cmp r1.x, r1.x, c2.y, r2.w
                add r1.x, r1.x, r1.w
                mul r1.x, r1.y, r1.x
                mul r0.x, r1.x, c2.w
                mul r1.x, r0.y, r1.z
                mul r1.z, r0.z, r1.z
                mul r1.w, r1.x, c2.x
                frc r2.x, r1.w
                add r1.w, r1.w, -r2.x
                cmp r2.x, -r2.x, c2.y, c2.z
                cmp r1.x, r1.x, c2.y, r2.x
                add r1.x, r1.x, r1.w
                mul r1.x, r1.y, r1.x
                mul r0.y, r1.x, c2.w
                mul r1.x, r1.z, c2.x
                frc r1.w, r1.x
                add r1.x, r1.x, -r1.w
                cmp r1.w, -r1.w, c2.y, c2.z
                cmp r1.z, r1.z, c2.y, r1.w
                add r1.x, r1.z, r1.x
                mul r1.x, r1.y, r1.x
                mul r0.z, r1.x, c2.w
                mov oC0, r0
            
            // approximately 39 instruction slots used (2 texture, 37 arithmetic)
            };
    }
}

