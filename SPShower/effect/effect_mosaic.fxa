
//listing of all techniques and passes with embedded asm listings 

technique T0
{
    pass P0
    {
        //No embedded vertex shader
        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
            //
            // Parameters:
            //
            //   float height;
            //   sampler2D tex;
            //   float transitionPosition;
            //   float width;
            //
            //
            // Registers:
            //
            //   Name               Reg   Size
            //   ------------------ ----- ----
            //   width              c0       1
            //   height             c1       1
            //   transitionPosition c2       1
            //   tex                s0       1
            //
            
                ps_2_0
                def c3, 0.125, 0, 1, 8
                def c4, 4, -4, 0, 0
                dcl t0.xy
                dcl_2d s0
                texld r0, t0, s0
                mul r1.x, t0.x, c0.x
                mul r1.z, r1.x, c3.x
                frc r1.w, r1.z
                add r1.z, r1.z, -r1.w
                cmp r1.w, -r1.w, c3.y, c3.z
                cmp r1.w, r1.x, c3.y, r1.w
                add r1.z, r1.w, r1.z
                mul r2.x, r1.z, c3.w
                mul r1.y, t0.y, c1.x
                mul r1.z, r1.y, c3.x
                frc r1.w, r1.z
                add r1.z, r1.z, -r1.w
                cmp r1.w, -r1.w, c3.y, c3.z
                cmp r1.w, r1.y, c3.y, r1.w
                add r1.z, r1.w, r1.z
                mul r2.y, r1.z, c3.w
                add r1.zw, r2.wzyx, c4.x
                add r1.xy, -r1, r1.wzyx
                dp2add r1.x, r1, r1, c3.y
                rsq r1.x, r1.x
                rcp r1.x, r1.x
                add r1.x, r1.x, c4.y
                rcp r1.y, c0.x
                mul r2.x, r1.y, r1.w
                rcp r1.y, c1.x
                mul r2.y, r1.y, r1.z
                texld r2, r2, s0
                cmp r1, r1.x, r0, r2
                lrp r2, c2.x, r1, r0
                mov oC0, r2
            
            // approximately 32 instruction slots used (2 texture, 30 arithmetic)
            };
    }
}

