
//listing of all techniques and passes with embedded asm listings 

technique T0
{
    pass P0
    {
        //No embedded vertex shader
        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
            //
            // Parameters:
            //
            //   float height;
            //   sampler2D tex;
            //   float transitionPosition;
            //   float width;
            //
            //
            // Registers:
            //
            //   Name               Reg   Size
            //   ------------------ ----- ----
            //   width              c0       1
            //   height             c1       1
            //   transitionPosition c2       1
            //   tex                s0       1
            //
            
                ps_2_0
                def c3, -1, -0.5, -2, 1
                def c4, 0.589999974, 0.300000012, 0.109999999, 0
                dcl t0.xy
                dcl_2d s0
                texld r0, t0, s0
                mov r1.xw, c3
                mad r1.y, t0.x, c0.x, r1.x
                rcp r1.z, c0.x
                mul r2.y, r1.z, r1.y
                mad r2.w, t0.y, c1.x, r1.x
                rcp r1.x, c1.x
                mul r2.z, r1.x, r2.w
                mov r3.xy, r2.yzxw
                mul r2.w, t0.x, c0.x
                mul r2.x, r1.z, r2.w
                mov r2.y, r2.z
                mov r4.x, r2.x
                mad r1.y, t0.x, c0.x, r1.w
                mul r5.x, r1.z, r1.y
                mul r1.y, t0.y, c1.x
                mul r5.y, r1.x, r1.y
                mov r6.x, r5.x
                mad r1.y, t0.y, c1.x, r1.w
                mul r4.y, r1.x, r1.y
                mov r6.y, r4.y
                texld r1, r3, s0
                texld r2, r2, s0
                texld r3, r5, s0
                texld r4, r4, s0
                texld r5, r6, s0
                mul r1.xyz, r1, c3.y
                mad r1.xyz, r2, c3.z, r1
                add r1.xyz, r3, r1
                add r1.xyz, r4, r1
                mad r1.xyz, r5, -c3.y, r1
                mul r1.y, r1.y, c4.x
                mad r1.x, r1.x, c4.y, r1.y
                mad r1.x, r1.z, c4.z, r1.x
                abs r1.x, r1.x
                add r1.xyz, -r1.x, c3.w
                mov r1.w, c3.w
                lrp r2, c2.x, r1, r0
                mov oC0, r2
            
            // approximately 39 instruction slots used (6 texture, 33 arithmetic)
            };
    }
}

