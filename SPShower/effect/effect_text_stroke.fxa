
//listing of all techniques and passes with embedded asm listings 

technique T0
{
    pass P0
    {
        //No embedded vertex shader
        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
            //
            // Parameters:
            //
            //   sampler2D effectTex;
            //   float height;
            //   float level;
            //   float opacity;
            //   float quality;
            //   sampler2D tex;
            //   float width;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   width        c0       1
            //   height       c1       1
            //   level        c3       1
            //   opacity      c4       1
            //   quality      c5       1
            //   tex          s0       1
            //   effectTex    s1       1
            //
            
                ps_2_0
                def c2, -1, 1, 0, -0
                dcl t0.xy
                dcl_2d s0
                dcl_2d s1
                texld r0, t0, s1
                texld r1, t0, s0
                mov r2.x, t0.x
                rcp r2.z, c1.x
                mad r2.y, c3.x, r2.z, t0.y
                mov r3.x, t0.x
                mad r3.y, -c3.x, r2.z, t0.y
                mov r4.y, c2.z
                rcp r2.w, c0.x
                mul r4.x, r2.w, c3.x
                mul r5.x, r2.w, -c3.x
                add r6.xy, r4, t0
                mov r5.y, c2.z
                add r7.xy, r5, t0
                mul r5.y, r2.z, -c3.x
                mul r8.y, r2.z, c3.x
                add r9.xy, r5, t0
                mov r8.x, r5.x
                add r10.xy, r8, t0
                mov r4.y, r8.y
                add r8.xy, r4, t0
                mov r5.x, r4.x
                add r4.xy, r5, t0
                texld r2, r2, s0
                texld r3, r3, s0
                texld r5, r6, s0
                texld r6, r7, s0
                texld r7, r8, s0
                texld r8, r10, s0
                texld r4, r4, s0
                texld r9, r9, s0
                mov r2.x, c2.x
                max r3.x, -c5.x, r2.x
                add r2.x, r2.w, r3.x
                add r2.y, r3.x, r3.w
                cmp r2.xy, r2, c2.y, c2.z
                add r2.x, r2.y, r2.x
                cmp r2.x, -r2.x, c2.z, c2.y
                add r2.y, r3.x, r5.w
                cmp r2.y, r2.y, c2.y, c2.z
                add r2.x, r2.y, r2.x
                cmp r2.x, -r2.x, c2.z, c2.y
                add r2.y, r3.x, r6.w
                cmp r2.y, r2.y, c2.y, c2.z
                add r2.x, r2.y, r2.x
                cmp r2.x, -r2.x, c2.z, c2.y
                add r2.y, r3.x, r7.w
                cmp r2.y, r2.y, c2.y, c2.z
                add r2.z, r3.x, r8.w
                cmp r2.z, r2.z, c2.y, c2.z
                add r2.w, r3.x, r4.w
                cmp r2.w, r2.w, c2.y, c2.z
                add r3.y, r3.x, r9.w
                cmp r3.y, r3.y, c2.y, c2.z
                add r2.x, r2.x, r3.y
                cmp r2.x, -r2.x, c2.z, c2.y
                add r2.x, r2.z, r2.x
                cmp r2.x, -r2.x, c2.z, c2.y
                add r2.x, r2.y, r2.x
                cmp r2.x, -r2.x, c2.z, c2.y
                add r2.x, r2.w, r2.x
                mov r0.w, c4.x
                cmp r4, -r2.x, r1, r0
                cmp r2.x, -r2.x, c2.w, c2.x
                mov r5.xyz, r0
                mov r5.w, r1.w
                lrp r6, r5.w, r1, r5
                add r1.x, r3.x, r5.w
                cmp r3, r1.x, r6, r4
                cmp r1.x, r1.x, c2.w, r2.x
                cmp r0, r1.x, r3, r0
                mov oC0, r0
            
            // approximately 72 instruction slots used (10 texture, 62 arithmetic)
            };
    }
}

technique T1
{
    pass P0
    {
        vertexshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
            //
            // Parameters:
            //
            //   float4x4 MatrixTransform;
            //
            //
            // Registers:
            //
            //   Name            Reg   Size
            //   --------------- ----- ----
            //   MatrixTransform c6       4
            //
            
                vs_3_0
                dcl_color v0
                dcl_texcoord v1
                dcl_position v2
                dcl_color o0
                dcl_texcoord o1.xy
                dcl_position o2
                dp4 o2.x, v2, c6
                dp4 o2.y, v2, c7
                dp4 o2.z, v2, c8
                dp4 o2.w, v2, c9
                mov o0, v0
                mov o1.xy, v1
            
            // approximately 6 instruction slots used
            };

        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
            //
            // Parameters:
            //
            //   sampler2D effectTex;
            //   float height;
            //   float level;
            //   float opacity;
            //   float quality;
            //   sampler2D tex;
            //   float width;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   width        c0       1
            //   height       c1       1
            //   level        c3       1
            //   opacity      c4       1
            //   quality      c5       1
            //   tex          s0       1
            //   effectTex    s1       1
            //
            
                ps_3_0
                def c2, 10, 0, -1, 1
                defi i0, 20, 0, 0, 0
                dcl_texcoord v0.xy
                dcl_2d s0
                dcl_2d s1
                texld r0, v0, s0
                mov r1.xz, c2
                min r2.x, c3.x, r1.x
                if_ge -r2.x, c2.y
                  mov oC0, r0
                else
                  texld r3, v0, s1
                  max r2.y, -c5.x, r1.z
                  if_lt r0.w, -r2.y
                    rcp r1.x, c0.x
                    rcp r1.y, c1.x
                    frc r1.z, -r2.x
                    add r1.w, -r2.x, -r1.z
                    cmp r1.z, -r1.z, c2.y, c2.w
                    cmp r1.z, -r2.x, c2.y, r1.z
                    add r1.z, r1.z, r1.w
                    mov r4.zw, c2.y
                    mov r5, r0
                    mov r6, r0
                    mov r1.w, r1.z
                    mov r2.z, c2.y
                    rep i0
                      add r2.w, -r2.x, r1.w
                      mov r2.z, c2.y
                      mov r7.x, r2.x
                      break_ge r1.w, r7.x
                      add r7.x, r2.x, r1.w
                      cmp r7.x, -r7_abs.x, c2.w, c2.y
                      cmp r2.w, -r2_abs.w, c2.w, c2.y
                      add r2.w, r2.w, r7.x
                      mul r7.x, r1.x, r1.w
                      mov r8, r5
                      mov r9, r6
                      mov r7.z, r1.z
                      mov r7.w, c2.y
                      rep i0
                        add r10.x, -r2.x, r7.z
                        mov r7.w, c2.y
                        mov r10.y, r2.x
                        break_ge r7.z, r10.y
                        add r10.y, r2.x, r7.z
                        cmp r10.xy, -r10_abs, c2.w, c2.y
                        add r10.x, r10.x, r10.y
                        cmp r10.x, -r10.x, c2.y, c2.w
                        cmp r10.x, -r2.w, c2.y, r10.x
                        add r10.y, r7.z, c2.w
                        cmp r7.z, -r10.x, r7.z, r10.y
                        if_ne r10.x, -r10.x
                          mov r7.w, c2.y
                        else
                          mul r7.y, r1.y, r7.z
                          add r4.xy, r7, v0
                          texldl r10, r4, s0
                          add r4.x, r2.y, r10.w
                          cmp r4.x, r4.x, c2.w, c2.y
                          if_ge r10.w, -r2.y
                            mov r8.xyz, r3
                            mov r8.w, c4.x
                            mov r9.xyz, r3
                            mov r9.w, c4.x
                            mov r7.w, c2.w
                            break_ne c2.w, -c2.w
                          endif
                          add r7.z, r7.z, c2.w
                          mov r7.w, r4.x
                        endif
                      endrep
                      mov r5, r8
                      mov r6, r9
                      mov r2.zw, r7.w
                      break_ne r2.w, -r2.w
                      add r1.w, r1.w, c2.w
                      mov r5, r8
                      mov r6, r9
                      mov r2.z, r7.w
                    endrep
                    mov r0, r5
                  else
                    lrp r6, r0.w, r0, r3
                    mov r2.z, c2.y
                  endif
                  cmp oC0, -r2.z, r6, r0
                endif
            
            // approximately 106 instruction slots used (4 texture, 102 arithmetic)
            };
    }
}

