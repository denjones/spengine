
//listing of all techniques and passes with embedded asm listings 

technique T0
{
    pass P0
    {
        //No embedded vertex shader
        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
            //
            // Parameters:
            //
            //   float level;
            //   sampler2D tex;
            //   float width;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   width        c1       1
            //   level        c4       1
            //   tex          s0       1
            //
            
                ps_2_0
                def c0, 1.19683003, 3, 1, -6.49212313
                def c2, 2, -25.9684925, -58.4291115, 4
                def c3, -103.87397, 0, 0, 0
                dcl t0.xy
                dcl_2d s0
                texld r0, t0, s0
                mov r1.yz, c0
                add r1.x, r1.z, -c4.x
                rcp r1.z, c4.x
                mul r1.w, r1.z, c0.x
                mul r1.z, r1.z, r1.z
                mul r0, r0, r1.w
                mul r2, r0, c0.y
                cmp r0, -c4.x, r0, r2
                mul r2.x, r1.z, c0.w
                exp r2.x, r2.x
                mul r2.x, r1.w, r2.x
                mov r3.y, t0.y
                rcp r2.y, c1.x
                add r3.x, -r2.y, t0.x
                mov r4.y, t0.y
                add r4.x, r2.y, t0.x
                mov r5.y, t0.y
                mad r5.x, r2.y, -c2.x, t0.x
                mov r6.y, t0.y
                mad r6.x, r2.y, c2.x, t0.x
                mov r7.y, t0.y
                mad r7.x, r2.y, -c0.y, t0.x
                mov r8.y, t0.y
                mad r8.x, r2.y, c0.y, t0.x
                mad r9.x, r2.y, -c2.w, t0.x
                mad r10.x, r2.y, c2.w, t0.x
                mov r9.y, t0.y
                mov r10.y, t0.y
                texld r3, r3, s0
                texld r4, r4, s0
                texld r5, r5, s0
                texld r6, r6, s0
                texld r7, r7, s0
                texld r8, r8, s0
                texld r9, r9, s0
                texld r10, r10, s0
                mad r3, r3, r2.x, r0
                mad r2, r4, r2.x, r3
                cmp r0, r1.x, r0, r2
                mul r1.x, r1.z, c2.y
                exp r1.x, r1.x
                mul r1.x, r1.x, r1.w
                mad r2, r5, r1.x, r0
                mad r2, r6, r1.x, r2
                mov r1.x, c4.x
                add r3.x, -r1.x, c2.x
                cmp r0, r3.x, r0, r2
                mul r2.x, r1.z, c2.z
                mul r1.z, r1.z, c3.x
                exp r1.z, r1.z
                mul r1.z, r1.z, r1.w
                exp r2.x, r2.x
                mul r1.w, r1.w, r2.x
                mad r2, r7, r1.w, r0
                mad r2, r8, r1.w, r2
                add r1.y, r1.y, -c4.x
                cmp r0, r1.y, r0, r2
                mad r2, r9, r1.z, r0
                mad r2, r10, r1.z, r2
                add r1.x, -r1.x, c2.w
                cmp r0, r1.x, r0, r2
                mov oC0, r0
            
            // approximately 63 instruction slots used (9 texture, 54 arithmetic)
            };
    }
    pass P1
    {
        //No embedded vertex shader
        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
            //
            // Parameters:
            //
            //   sampler2D effectTex;
            //   float height;
            //   float level;
            //   float opacity;
            //   sampler2D tex;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   height       c2       1
            //   level        c4       1
            //   opacity      c5       1
            //   tex          s0       1
            //   effectTex    s1       1
            //
            
                ps_2_0
                def c0, 2, -25.9684925, -58.4291115, 4
                def c1, 1.19683003, 3, 1, -6.49212313
                def c3, -103.87397, 0, 0, 0
                dcl t0.xy
                dcl_2d s0
                dcl_2d s1
                texld r0, t0, s0
                texld r1, t0, s1
                mov r0.yz, c1
                add r0.x, r0.z, -c4.x
                rcp r0.z, c4.x
                mul r2.w, r0.z, c1.x
                mul r0.z, r0.z, r0.z
                mul r0.w, r0.w, r2.w
                mul r2.x, r0.w, c1.y
                cmp r0.w, -c4.x, r0.w, r2.x
                mul r2.x, r0.z, c1.w
                exp r2.x, r2.x
                mul r2.x, r2.x, r2.w
                mov r3.x, t0.x
                rcp r2.y, c2.x
                add r3.y, -r2.y, t0.y
                mov r4.x, t0.x
                add r4.y, r2.y, t0.y
                mov r5.x, t0.x
                mad r5.y, r2.y, -c0.x, t0.y
                mov r6.x, t0.x
                mad r6.y, r2.y, c0.x, t0.y
                mov r7.x, t0.x
                mad r7.y, r2.y, -c1.y, t0.y
                mov r8.x, t0.x
                mad r8.y, r2.y, c1.y, t0.y
                mad r9.y, r2.y, -c0.w, t0.y
                mad r10.y, r2.y, c0.w, t0.y
                mov r9.x, t0.x
                mov r10.x, t0.x
                texld r3, r3, s0
                texld r4, r4, s0
                texld r5, r5, s0
                texld r6, r6, s0
                texld r7, r7, s0
                texld r8, r8, s0
                texld r9, r9, s0
                texld r10, r10, s0
                mad r2.y, r3.w, r2.x, r0.w
                mad r2.x, r4.w, r2.x, r2.y
                cmp r0.x, r0.x, r0.w, r2.x
                mul r0.w, r0.z, c0.y
                exp r0.w, r0.w
                mul r0.w, r0.w, r2.w
                mad r2.x, r5.w, r0.w, r0.x
                mad r0.w, r6.w, r0.w, r2.x
                mov r3.xw, c0
                add r2.x, r3.x, -c4.x
                cmp r0.x, r2.x, r0.x, r0.w
                mul r0.w, r0.z, c0.z
                mul r0.z, r0.z, c3.x
                exp r0.z, r0.z
                mul r0.z, r0.z, r2.w
                exp r0.w, r0.w
                mul r0.w, r0.w, r2.w
                mad r2.x, r7.w, r0.w, r0.x
                mad r0.w, r8.w, r0.w, r2.x
                add r0.y, r0.y, -c4.x
                cmp r0.x, r0.y, r0.x, r0.w
                mad r0.y, r9.w, r0.z, r0.x
                mad r0.y, r10.w, r0.z, r0.y
                add r0.z, r3.w, -c4.x
                cmp r0.x, r0.z, r0.x, r0.y
                mul r0.y, r0.x, c5.x
                mul r0.z, c5.x, c5.x
                cmp r0.x, -r0.z, r0.x, r0.y
                min r1.w, r0.x, c1.z
                mov oC0, r1
            
            // approximately 68 instruction slots used (10 texture, 58 arithmetic)
            };
    }
}

technique T1
{
    pass P0
    {
        vertexshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
            //
            // Parameters:
            //
            //   float4x4 MatrixTransform;
            //
            //
            // Registers:
            //
            //   Name            Reg   Size
            //   --------------- ----- ----
            //   MatrixTransform c6       4
            //
            
                vs_3_0
                dcl_color v0
                dcl_texcoord v1
                dcl_position v2
                dcl_color o0
                dcl_texcoord o1.xy
                dcl_position o2
                dp4 o2.x, v2, c6
                dp4 o2.y, v2, c7
                dp4 o2.z, v2, c8
                dp4 o2.w, v2, c9
                mov o0, v0
                mov o1.xy, v1
            
            // approximately 6 instruction slots used
            };

        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
            //
            // Parameters:
            //
            //   sampler2D effectTex;
            //   float height;
            //   float level;
            //   sampler2D tex;
            //   float width;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   width        c1       1
            //   height       c2       1
            //   level        c4       1
            //   tex          s0       1
            //   effectTex    s1       1
            //
            
                ps_3_0
                def c0, 0.300000012, 33.3333321, 10, 0
                def c3, 0.100000001, 0, 1, 0
                defi i0, 20, 0, 0, 0
                dcl_texcoord v0.xy
                dcl_2d s0
                dcl_2d s1
                texld r0, v0, s0
                mov r1.xy, c0
                mul r1.x, r1.x, c4.x
                add r1.y, r1.y, -c4.x
                cmp r1.x, r1.y, r1.x, c0.z
                if_ge -r1.x, c0.w
                  mov oC0, r0
                else
                  texld r2, v0, s1
                  if_lt r0.w, c3.x
                    rcp r1.y, c1.x
                    rcp r1.z, c2.x
                    frc r1.w, -r1.x
                    add r3.x, -r1.x, -r1.w
                    cmp r1.w, -r1.w, c3.y, c3.z
                    cmp r1.w, -r1.x, c0.w, r1.w
                    add r1.w, r1.w, r3.x
                    mov r3.zw, c0.w
                    mov r4.xyz, r2
                    mov r5, r0
                    mov r6, r0
                    mov r7.x, r1.w
                    mov r7.y, c0.w
                    rep i0
                      add r7.z, -r1.x, r7.x
                      mov r7.y, c0.w
                      mov r7.w, r1.x
                      break_ge r7.x, r7.w
                      add r7.w, r1.x, r7.x
                      cmp r7.zw, -r7_abs, c3.z, c3.y
                      add r7.z, r7.z, r7.w
                      mul r8.x, r1.y, r7.x
                      mov r9, r5
                      mov r10, r6
                      mov r7.w, r1.w
                      mov r8.z, c0.w
                      rep i0
                        add r8.w, -r1.x, r7.w
                        mov r8.z, c0.w
                        mov r11.x, r1.x
                        break_ge r7.w, r11.x
                        add r11.x, r1.x, r7.w
                        cmp r11.x, -r11_abs.x, c3.z, c3.y
                        cmp r8.w, -r8_abs.w, c3.z, c3.y
                        add r8.w, r8.w, r11.x
                        cmp r8.w, -r8.w, c3.y, c3.z
                        cmp r8.w, -r7.z, c0.w, r8.w
                        add r11.x, r7.w, c3.z
                        cmp r7.w, -r8.w, r7.w, r11.x
                        if_ne r8.w, -r8.w
                          mov r8.z, c0.w
                        else
                          mul r8.y, r1.z, r7.w
                          add r3.xy, r8, v0
                          texldl r11, r3, s0
                          add r3.x, r11.w, -c3.x
                          cmp r3.x, r3.x, c3.z, c3.y
                          if_ge r11.w, c3.x
                            add r4.w, -r10.w, c3.z
                            mov r9, r4
                            mov r10.xyz, r2
                            mov r10.w, r4.w
                            mov r8.z, c3.z
                            break_ne c3.z, -c3.z
                          endif
                          add r7.w, r7.w, c3.z
                          mov r8.z, r3.x
                        endif
                      endrep
                      mov r5, r9
                      mov r6, r10
                      mov r7.y, r8.z
                      mov r3.x, r8.z
                      break_ne r3.x, -r3.x
                      add r7.x, r7.x, c3.z
                      mov r5, r9
                      mov r6, r10
                      mov r7.y, r8.z
                    endrep
                    mov r0, r5
                    mov r2, r6
                  else
                    mov r7.y, c0.w
                  endif
                  cmp oC0, -r7.y, r2, r0
                endif
            
            // approximately 109 instruction slots used (4 texture, 105 arithmetic)
            };
    }
    pass P1
    {
        vertexshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
            //
            // Parameters:
            //
            //   float4x4 MatrixTransform;
            //
            //
            // Registers:
            //
            //   Name            Reg   Size
            //   --------------- ----- ----
            //   MatrixTransform c6       4
            //
            
                vs_3_0
                dcl_color v0
                dcl_texcoord v1
                dcl_position v2
                dcl_color o0
                dcl_texcoord o1.xy
                dcl_position o2
                dp4 o2.x, v2, c6
                dp4 o2.y, v2, c7
                dp4 o2.z, v2, c8
                dp4 o2.w, v2, c9
                mov o0, v0
                mov o1.xy, v1
            
            // approximately 6 instruction slots used
            };

        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
            //
            // Parameters:
            //
            //   float level;
            //   sampler2D tex;
            //   float width;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   width        c1       1
            //   level        c4       1
            //   tex          s0       1
            //
            
                ps_3_0
                def c0, 1.19683003, 0, 1, 2
                def c2, 4, -103.87397, 5, -162.303085
                def c3, 8, -415.49588, 9, -525.862
                def c5, 12, -934.865784, 13, -1097.16882
                def c6, 14, -1272.45618, 15, -1460.72778
                def c7, 16, -1661.98352, 17, -1876.22363
                def c8, -6.49212313, -25.9684925, 3, -58.4291115
                def c9, 6, -233.716446, 7, -318.114044
                def c10, 10, -649.212341, 11, -785.546936
                def c11, 18, -2103.448, 19, -2343.65649
                dcl_texcoord v0.xy
                dcl_2d s0
                rcp r0.x, c1.x
                rcp r0.y, c4.x
                mul r0.z, r0.y, c0.x
                texld r1, v0, s0
                mul r1, r0.z, r1
                mov r2.yzw, c0
                if_lt -c4.x, r2.y
                  mul r3, c0.zzyy, v0.xyxx
                  texldl r3, r3, s0
                  mul r3, r0.z, r3
                  mad r1, r3, c0.w, r1
                endif
                if_lt r2.z, c4.x
                  mul r0.w, r0.y, r0.y
                  mul r0.w, r0.w, c8.x
                  exp r0.w, r0.w
                  mul r0.w, r0.w, r0.z
                  add r3.x, -r0.x, v0.x
                  mul r3.yzw, c0.xzyy, v0.y
                  texldl r3, r3, s0
                  mad r3, r3, r0.w, r1
                  add r4.x, r0.x, v0.x
                  mul r4.yzw, c0.xzyy, v0.y
                  texldl r4, r4, s0
                  mad r1, r4, r0.w, r3
                endif
                if_lt r2.w, c4.x
                  mul r0.w, r0.y, r0.y
                  mul r0.w, r0.w, c8.y
                  exp r0.w, r0.w
                  mul r0.w, r0.w, r0.z
                  mad r2.x, r0.x, -c0.w, v0.x
                  mul r2.yzw, c0.xzyy, v0.y
                  texldl r2, r2, s0
                  mad r2, r2, r0.w, r1
                  mad r3.x, r0.x, c0.w, v0.x
                  mul r3.yzw, c0.xzyy, v0.y
                  texldl r3, r3, s0
                  mad r1, r3, r0.w, r2
                endif
                mov r2.x, c4.x
                if_lt c8.z, r2.x
                  mul r0.w, r0.y, r0.y
                  mul r0.w, r0.w, c8.w
                  exp r0.w, r0.w
                  mul r0.w, r0.w, r0.z
                  mad r3.x, r0.x, -c8.z, v0.x
                  mul r3.yzw, c0.xzyy, v0.y
                  texldl r3, r3, s0
                  mad r3, r3, r0.w, r1
                  mad r4.x, r0.x, c8.z, v0.x
                  mul r4.yzw, c0.xzyy, v0.y
                  texldl r4, r4, s0
                  mad r1, r4, r0.w, r3
                endif
                if_lt c2.x, r2.x
                  mul r0.w, r0.y, r0.y
                  mul r0.w, r0.w, c2.y
                  exp r0.w, r0.w
                  mul r0.w, r0.w, r0.z
                  mad r3.x, r0.x, -c2.x, v0.x
                  mul r3.yzw, c0.xzyy, v0.y
                  texldl r3, r3, s0
                  mad r3, r3, r0.w, r1
                  mad r4.x, r0.x, c2.x, v0.x
                  mul r4.yzw, c0.xzyy, v0.y
                  texldl r4, r4, s0
                  mad r1, r4, r0.w, r3
                endif
                if_lt c2.z, r2.x
                  mul r0.w, r0.y, r0.y
                  mul r0.w, r0.w, c2.w
                  exp r0.w, r0.w
                  mul r0.w, r0.w, r0.z
                  mad r3.x, r0.x, -c2.z, v0.x
                  mul r3.yzw, c0.xzyy, v0.y
                  texldl r3, r3, s0
                  mad r3, r3, r0.w, r1
                  mad r4.x, r0.x, c2.z, v0.x
                  mul r4.yzw, c0.xzyy, v0.y
                  texldl r4, r4, s0
                  mad r1, r4, r0.w, r3
                endif
                if_lt c9.x, r2.x
                  mul r0.w, r0.y, r0.y
                  mul r0.w, r0.w, c9.y
                  exp r0.w, r0.w
                  mul r0.w, r0.w, r0.z
                  mad r3.x, r0.x, -c9.x, v0.x
                  mul r3.yzw, c0.xzyy, v0.y
                  texldl r3, r3, s0
                  mad r3, r3, r0.w, r1
                  mad r4.x, r0.x, c9.x, v0.x
                  mul r4.yzw, c0.xzyy, v0.y
                  texldl r4, r4, s0
                  mad r1, r4, r0.w, r3
                endif
                if_lt c9.z, r2.x
                  mul r0.w, r0.y, r0.y
                  mul r0.w, r0.w, c9.w
                  exp r0.w, r0.w
                  mul r0.w, r0.w, r0.z
                  mad r3.x, r0.x, -c9.z, v0.x
                  mul r3.yzw, c0.xzyy, v0.y
                  texldl r3, r3, s0
                  mad r3, r3, r0.w, r1
                  mad r4.x, r0.x, c9.z, v0.x
                  mul r4.yzw, c0.xzyy, v0.y
                  texldl r4, r4, s0
                  mad r1, r4, r0.w, r3
                endif
                if_lt c3.x, r2.x
                  mul r0.w, r0.y, r0.y
                  mul r0.w, r0.w, c3.y
                  exp r0.w, r0.w
                  mul r0.w, r0.w, r0.z
                  mad r3.x, r0.x, -c3.x, v0.x
                  mul r3.yzw, c0.xzyy, v0.y
                  texldl r3, r3, s0
                  mad r3, r3, r0.w, r1
                  mad r4.x, r0.x, c3.x, v0.x
                  mul r4.yzw, c0.xzyy, v0.y
                  texldl r4, r4, s0
                  mad r1, r4, r0.w, r3
                endif
                if_lt c3.z, r2.x
                  mul r0.w, r0.y, r0.y
                  mul r0.w, r0.w, c3.w
                  exp r0.w, r0.w
                  mul r0.w, r0.w, r0.z
                  mad r3.x, r0.x, -c3.z, v0.x
                  mul r3.yzw, c0.xzyy, v0.y
                  texldl r3, r3, s0
                  mad r3, r3, r0.w, r1
                  mad r4.x, r0.x, c3.z, v0.x
                  mul r4.yzw, c0.xzyy, v0.y
                  texldl r4, r4, s0
                  mad r1, r4, r0.w, r3
                endif
                if_lt c10.x, r2.x
                  mul r0.w, r0.y, r0.y
                  mul r0.w, r0.w, c10.y
                  exp r0.w, r0.w
                  mul r0.w, r0.w, r0.z
                  mad r3.x, r0.x, -c10.x, v0.x
                  mul r3.yzw, c0.xzyy, v0.y
                  texldl r3, r3, s0
                  mad r3, r3, r0.w, r1
                  mad r4.x, r0.x, c10.x, v0.x
                  mul r4.yzw, c0.xzyy, v0.y
                  texldl r4, r4, s0
                  mad r1, r4, r0.w, r3
                endif
                if_lt c10.z, r2.x
                  mul r0.w, r0.y, r0.y
                  mul r0.w, r0.w, c10.w
                  exp r0.w, r0.w
                  mul r0.w, r0.w, r0.z
                  mad r3.x, r0.x, -c10.z, v0.x
                  mul r3.yzw, c0.xzyy, v0.y
                  texldl r3, r3, s0
                  mad r3, r3, r0.w, r1
                  mad r4.x, r0.x, c10.z, v0.x
                  mul r4.yzw, c0.xzyy, v0.y
                  texldl r4, r4, s0
                  mad r1, r4, r0.w, r3
                endif
                if_lt c5.x, r2.x
                  mul r0.w, r0.y, r0.y
                  mul r0.w, r0.w, c5.y
                  exp r0.w, r0.w
                  mul r0.w, r0.w, r0.z
                  mad r3.x, r0.x, -c5.x, v0.x
                  mul r3.yzw, c0.xzyy, v0.y
                  texldl r3, r3, s0
                  mad r3, r3, r0.w, r1
                  mad r4.x, r0.x, c5.x, v0.x
                  mul r4.yzw, c0.xzyy, v0.y
                  texldl r4, r4, s0
                  mad r1, r4, r0.w, r3
                endif
                if_lt c5.z, r2.x
                  mul r0.w, r0.y, r0.y
                  mul r0.w, r0.w, c5.w
                  exp r0.w, r0.w
                  mul r0.w, r0.w, r0.z
                  mad r3.x, r0.x, -c5.z, v0.x
                  mul r3.yzw, c0.xzyy, v0.y
                  texldl r3, r3, s0
                  mad r3, r3, r0.w, r1
                  mad r4.x, r0.x, c5.z, v0.x
                  mul r4.yzw, c0.xzyy, v0.y
                  texldl r4, r4, s0
                  mad r1, r4, r0.w, r3
                endif
                if_lt c6.x, r2.x
                  mul r0.w, r0.y, r0.y
                  mul r0.w, r0.w, c6.y
                  exp r0.w, r0.w
                  mul r0.w, r0.w, r0.z
                  mad r3.x, r0.x, -c6.x, v0.x
                  mul r3.yzw, c0.xzyy, v0.y
                  texldl r3, r3, s0
                  mad r3, r3, r0.w, r1
                  mad r4.x, r0.x, c6.x, v0.x
                  mul r4.yzw, c0.xzyy, v0.y
                  texldl r4, r4, s0
                  mad r1, r4, r0.w, r3
                endif
                if_lt c6.z, r2.x
                  mul r0.w, r0.y, r0.y
                  mul r0.w, r0.w, c6.w
                  exp r0.w, r0.w
                  mul r0.w, r0.w, r0.z
                  mad r3.x, r0.x, -c6.z, v0.x
                  mul r3.yzw, c0.xzyy, v0.y
                  texldl r3, r3, s0
                  mad r3, r3, r0.w, r1
                  mad r4.x, r0.x, c6.z, v0.x
                  mul r4.yzw, c0.xzyy, v0.y
                  texldl r4, r4, s0
                  mad r1, r4, r0.w, r3
                endif
                if_lt c7.x, r2.x
                  mul r0.w, r0.y, r0.y
                  mul r0.w, r0.w, c7.y
                  exp r0.w, r0.w
                  mul r0.w, r0.w, r0.z
                  mad r3.x, r0.x, -c7.x, v0.x
                  mul r3.yzw, c0.xzyy, v0.y
                  texldl r3, r3, s0
                  mad r3, r3, r0.w, r1
                  mad r4.x, r0.x, c7.x, v0.x
                  mul r4.yzw, c0.xzyy, v0.y
                  texldl r4, r4, s0
                  mad r1, r4, r0.w, r3
                endif
                if_lt c7.z, r2.x
                  mul r0.w, r0.y, r0.y
                  mul r0.w, r0.w, c7.w
                  exp r0.w, r0.w
                  mul r0.w, r0.w, r0.z
                  mad r3.x, r0.x, -c7.z, v0.x
                  mul r3.yzw, c0.xzyy, v0.y
                  texldl r3, r3, s0
                  mad r3, r3, r0.w, r1
                  mad r4.x, r0.x, c7.z, v0.x
                  mul r4.yzw, c0.xzyy, v0.y
                  texldl r4, r4, s0
                  mad r1, r4, r0.w, r3
                endif
                if_lt c11.x, r2.x
                  mul r0.w, r0.y, r0.y
                  mul r0.w, r0.w, c11.y
                  exp r0.w, r0.w
                  mul r0.w, r0.w, r0.z
                  mad r3.x, r0.x, -c11.x, v0.x
                  mul r3.yzw, c0.xzyy, v0.y
                  texldl r3, r3, s0
                  mad r3, r3, r0.w, r1
                  mad r4.x, r0.x, c11.x, v0.x
                  mul r4.yzw, c0.xzyy, v0.y
                  texldl r4, r4, s0
                  mad r1, r4, r0.w, r3
                endif
                if_lt c11.z, r2.x
                  mul r0.y, r0.y, r0.y
                  mul r0.y, r0.y, c11.w
                  exp r0.y, r0.y
                  mul r0.y, r0.y, r0.z
                  mad r2.x, r0.x, -c11.z, v0.x
                  mul r2.yzw, c0.xzyy, v0.y
                  texldl r2, r2, s0
                  mad r2, r2, r0.y, r1
                  mad r3.x, r0.x, c11.z, v0.x
                  mul r3.yzw, c0.xzyy, v0.y
                  texldl r3, r3, s0
                  mad oC0, r3, r0.y, r2
                else
                  mov oC0, r1
                endif
            
            // approximately 360 instruction slots used (79 texture, 281 arithmetic)
            };
    }
    pass P2
    {
        vertexshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
            //
            // Parameters:
            //
            //   float4x4 MatrixTransform;
            //
            //
            // Registers:
            //
            //   Name            Reg   Size
            //   --------------- ----- ----
            //   MatrixTransform c6       4
            //
            
                vs_3_0
                dcl_color v0
                dcl_texcoord v1
                dcl_position v2
                dcl_color o0
                dcl_texcoord o1.xy
                dcl_position o2
                dp4 o2.x, v2, c6
                dp4 o2.y, v2, c7
                dp4 o2.z, v2, c8
                dp4 o2.w, v2, c9
                mov o0, v0
                mov o1.xy, v1
            
            // approximately 6 instruction slots used
            };

        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
            //
            // Parameters:
            //
            //   float height;
            //   float level;
            //   float opacity;
            //   sampler2D tex;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   height       c2       1
            //   level        c4       1
            //   opacity      c5       1
            //   tex          s0       1
            //
            
                ps_3_0
                def c0, 1.19683003, 0, 1, 2
                def c1, 4, -103.87397, 5, -162.303085
                def c3, 8, -415.49588, 9, -525.862
                def c6, 12, -934.865784, 13, -1097.16882
                def c7, 14, -1272.45618, 15, -1460.72778
                def c8, 16, -1661.98352, 17, -1876.22363
                def c9, -6.49212313, -25.9684925, 3, -58.4291115
                def c10, 6, -233.716446, 7, -318.114044
                def c11, 10, -649.212341, 11, -785.546936
                def c12, 18, -2103.448, 19, -2343.65649
                dcl_texcoord v0.xy
                dcl_2d s0
                rcp r0.x, c2.x
                rcp r0.y, c4.x
                mul r0.z, r0.y, c0.x
                texld r1, v0, s0
                mul r1, r0.z, r1
                mov r2.yzw, c0
                if_lt -c4.x, r2.y
                  mul r3, c0.zzyy, v0.xyxx
                  texldl r3, r3, s0
                  mul r3, r0.z, r3
                  mad r1, r3, c0.w, r1
                endif
                if_lt r2.z, c4.x
                  mul r0.w, r0.y, r0.y
                  mul r0.w, r0.w, c9.x
                  exp r0.w, r0.w
                  mul r0.w, r0.w, r0.z
                  add r3.y, -r0.x, v0.y
                  mul r3.xzw, c0.zyyy, v0.x
                  texldl r3, r3, s0
                  mad r3, r3, r0.w, r1
                  add r4.y, r0.x, v0.y
                  mul r4.xzw, c0.zyyy, v0.x
                  texldl r4, r4, s0
                  mad r1, r4, r0.w, r3
                endif
                if_lt r2.w, c4.x
                  mul r0.w, r0.y, r0.y
                  mul r0.w, r0.w, c9.y
                  exp r0.w, r0.w
                  mul r0.w, r0.w, r0.z
                  mad r2.y, r0.x, -c0.w, v0.y
                  mul r2.xzw, c0.zyyy, v0.x
                  texldl r2, r2, s0
                  mad r2, r2, r0.w, r1
                  mad r3.y, r0.x, c0.w, v0.y
                  mul r3.xzw, c0.zyyy, v0.x
                  texldl r3, r3, s0
                  mad r1, r3, r0.w, r2
                endif
                mov r2.x, c4.x
                if_lt c9.z, r2.x
                  mul r0.w, r0.y, r0.y
                  mul r0.w, r0.w, c9.w
                  exp r0.w, r0.w
                  mul r0.w, r0.w, r0.z
                  mad r3.y, r0.x, -c9.z, v0.y
                  mul r3.xzw, c0.zyyy, v0.x
                  texldl r3, r3, s0
                  mad r3, r3, r0.w, r1
                  mad r4.y, r0.x, c9.z, v0.y
                  mul r4.xzw, c0.zyyy, v0.x
                  texldl r4, r4, s0
                  mad r1, r4, r0.w, r3
                endif
                if_lt c1.x, r2.x
                  mul r0.w, r0.y, r0.y
                  mul r0.w, r0.w, c1.y
                  exp r0.w, r0.w
                  mul r0.w, r0.w, r0.z
                  mad r3.y, r0.x, -c1.x, v0.y
                  mul r3.xzw, c0.zyyy, v0.x
                  texldl r3, r3, s0
                  mad r3, r3, r0.w, r1
                  mad r4.y, r0.x, c1.x, v0.y
                  mul r4.xzw, c0.zyyy, v0.x
                  texldl r4, r4, s0
                  mad r1, r4, r0.w, r3
                endif
                if_lt c1.z, r2.x
                  mul r0.w, r0.y, r0.y
                  mul r0.w, r0.w, c1.w
                  exp r0.w, r0.w
                  mul r0.w, r0.w, r0.z
                  mad r3.y, r0.x, -c1.z, v0.y
                  mul r3.xzw, c0.zyyy, v0.x
                  texldl r3, r3, s0
                  mad r3, r3, r0.w, r1
                  mad r4.y, r0.x, c1.z, v0.y
                  mul r4.xzw, c0.zyyy, v0.x
                  texldl r4, r4, s0
                  mad r1, r4, r0.w, r3
                endif
                if_lt c10.x, r2.x
                  mul r0.w, r0.y, r0.y
                  mul r0.w, r0.w, c10.y
                  exp r0.w, r0.w
                  mul r0.w, r0.w, r0.z
                  mad r3.y, r0.x, -c10.x, v0.y
                  mul r3.xzw, c0.zyyy, v0.x
                  texldl r3, r3, s0
                  mad r3, r3, r0.w, r1
                  mad r4.y, r0.x, c10.x, v0.y
                  mul r4.xzw, c0.zyyy, v0.x
                  texldl r4, r4, s0
                  mad r1, r4, r0.w, r3
                endif
                if_lt c10.z, r2.x
                  mul r0.w, r0.y, r0.y
                  mul r0.w, r0.w, c10.w
                  exp r0.w, r0.w
                  mul r0.w, r0.w, r0.z
                  mad r3.y, r0.x, -c10.z, v0.y
                  mul r3.xzw, c0.zyyy, v0.x
                  texldl r3, r3, s0
                  mad r3, r3, r0.w, r1
                  mad r4.y, r0.x, c10.z, v0.y
                  mul r4.xzw, c0.zyyy, v0.x
                  texldl r4, r4, s0
                  mad r1, r4, r0.w, r3
                endif
                if_lt c3.x, r2.x
                  mul r0.w, r0.y, r0.y
                  mul r0.w, r0.w, c3.y
                  exp r0.w, r0.w
                  mul r0.w, r0.w, r0.z
                  mad r3.y, r0.x, -c3.x, v0.y
                  mul r3.xzw, c0.zyyy, v0.x
                  texldl r3, r3, s0
                  mad r3, r3, r0.w, r1
                  mad r4.y, r0.x, c3.x, v0.y
                  mul r4.xzw, c0.zyyy, v0.x
                  texldl r4, r4, s0
                  mad r1, r4, r0.w, r3
                endif
                if_lt c3.z, r2.x
                  mul r0.w, r0.y, r0.y
                  mul r0.w, r0.w, c3.w
                  exp r0.w, r0.w
                  mul r0.w, r0.w, r0.z
                  mad r3.y, r0.x, -c3.z, v0.y
                  mul r3.xzw, c0.zyyy, v0.x
                  texldl r3, r3, s0
                  mad r3, r3, r0.w, r1
                  mad r4.y, r0.x, c3.z, v0.y
                  mul r4.xzw, c0.zyyy, v0.x
                  texldl r4, r4, s0
                  mad r1, r4, r0.w, r3
                endif
                if_lt c11.x, r2.x
                  mul r0.w, r0.y, r0.y
                  mul r0.w, r0.w, c11.y
                  exp r0.w, r0.w
                  mul r0.w, r0.w, r0.z
                  mad r3.y, r0.x, -c11.x, v0.y
                  mul r3.xzw, c0.zyyy, v0.x
                  texldl r3, r3, s0
                  mad r3, r3, r0.w, r1
                  mad r4.y, r0.x, c11.x, v0.y
                  mul r4.xzw, c0.zyyy, v0.x
                  texldl r4, r4, s0
                  mad r1, r4, r0.w, r3
                endif
                if_lt c11.z, r2.x
                  mul r0.w, r0.y, r0.y
                  mul r0.w, r0.w, c11.w
                  exp r0.w, r0.w
                  mul r0.w, r0.w, r0.z
                  mad r3.y, r0.x, -c11.z, v0.y
                  mul r3.xzw, c0.zyyy, v0.x
                  texldl r3, r3, s0
                  mad r3, r3, r0.w, r1
                  mad r4.y, r0.x, c11.z, v0.y
                  mul r4.xzw, c0.zyyy, v0.x
                  texldl r4, r4, s0
                  mad r1, r4, r0.w, r3
                endif
                if_lt c6.x, r2.x
                  mul r0.w, r0.y, r0.y
                  mul r0.w, r0.w, c6.y
                  exp r0.w, r0.w
                  mul r0.w, r0.w, r0.z
                  mad r3.y, r0.x, -c6.x, v0.y
                  mul r3.xzw, c0.zyyy, v0.x
                  texldl r3, r3, s0
                  mad r3, r3, r0.w, r1
                  mad r4.y, r0.x, c6.x, v0.y
                  mul r4.xzw, c0.zyyy, v0.x
                  texldl r4, r4, s0
                  mad r1, r4, r0.w, r3
                endif
                if_lt c6.z, r2.x
                  mul r0.w, r0.y, r0.y
                  mul r0.w, r0.w, c6.w
                  exp r0.w, r0.w
                  mul r0.w, r0.w, r0.z
                  mad r3.y, r0.x, -c6.z, v0.y
                  mul r3.xzw, c0.zyyy, v0.x
                  texldl r3, r3, s0
                  mad r3, r3, r0.w, r1
                  mad r4.y, r0.x, c6.z, v0.y
                  mul r4.xzw, c0.zyyy, v0.x
                  texldl r4, r4, s0
                  mad r1, r4, r0.w, r3
                endif
                if_lt c7.x, r2.x
                  mul r0.w, r0.y, r0.y
                  mul r0.w, r0.w, c7.y
                  exp r0.w, r0.w
                  mul r0.w, r0.w, r0.z
                  mad r3.y, r0.x, -c7.x, v0.y
                  mul r3.xzw, c0.zyyy, v0.x
                  texldl r3, r3, s0
                  mad r3, r3, r0.w, r1
                  mad r4.y, r0.x, c7.x, v0.y
                  mul r4.xzw, c0.zyyy, v0.x
                  texldl r4, r4, s0
                  mad r1, r4, r0.w, r3
                endif
                if_lt c7.z, r2.x
                  mul r0.w, r0.y, r0.y
                  mul r0.w, r0.w, c7.w
                  exp r0.w, r0.w
                  mul r0.w, r0.w, r0.z
                  mad r3.y, r0.x, -c7.z, v0.y
                  mul r3.xzw, c0.zyyy, v0.x
                  texldl r3, r3, s0
                  mad r3, r3, r0.w, r1
                  mad r4.y, r0.x, c7.z, v0.y
                  mul r4.xzw, c0.zyyy, v0.x
                  texldl r4, r4, s0
                  mad r1, r4, r0.w, r3
                endif
                if_lt c8.x, r2.x
                  mul r0.w, r0.y, r0.y
                  mul r0.w, r0.w, c8.y
                  exp r0.w, r0.w
                  mul r0.w, r0.w, r0.z
                  mad r3.y, r0.x, -c8.x, v0.y
                  mul r3.xzw, c0.zyyy, v0.x
                  texldl r3, r3, s0
                  mad r3, r3, r0.w, r1
                  mad r4.y, r0.x, c8.x, v0.y
                  mul r4.xzw, c0.zyyy, v0.x
                  texldl r4, r4, s0
                  mad r1, r4, r0.w, r3
                endif
                if_lt c8.z, r2.x
                  mul r0.w, r0.y, r0.y
                  mul r0.w, r0.w, c8.w
                  exp r0.w, r0.w
                  mul r0.w, r0.w, r0.z
                  mad r3.y, r0.x, -c8.z, v0.y
                  mul r3.xzw, c0.zyyy, v0.x
                  texldl r3, r3, s0
                  mad r3, r3, r0.w, r1
                  mad r4.y, r0.x, c8.z, v0.y
                  mul r4.xzw, c0.zyyy, v0.x
                  texldl r4, r4, s0
                  mad r1, r4, r0.w, r3
                endif
                if_lt c12.x, r2.x
                  mul r0.w, r0.y, r0.y
                  mul r0.w, r0.w, c12.y
                  exp r0.w, r0.w
                  mul r0.w, r0.w, r0.z
                  mad r3.y, r0.x, -c12.x, v0.y
                  mul r3.xzw, c0.zyyy, v0.x
                  texldl r3, r3, s0
                  mad r3, r3, r0.w, r1
                  mad r4.y, r0.x, c12.x, v0.y
                  mul r4.xzw, c0.zyyy, v0.x
                  texldl r4, r4, s0
                  mad r1, r4, r0.w, r3
                endif
                if_lt c12.z, r2.x
                  mul r0.y, r0.y, r0.y
                  mul r0.y, r0.y, c12.w
                  exp r0.y, r0.y
                  mul r0.y, r0.y, r0.z
                  mad r2.y, r0.x, -c12.z, v0.y
                  mul r2.xzw, c0.zyyy, v0.x
                  texldl r2, r2, s0
                  mad r2, r2, r0.y, r1
                  mad r3.y, r0.x, c12.z, v0.y
                  mul r3.xzw, c0.zyyy, v0.x
                  texldl r3, r3, s0
                  mad r1, r3, r0.y, r2
                endif
                mul r0.x, r1.w, c5.x
                min r1.w, r0.x, c0.z
                mov oC0, r1
            
            // approximately 361 instruction slots used (79 texture, 282 arithmetic)
            };
    }
}

