; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\Users\Ken\Documents\GitHub\spengine\Antlr\antlr3collections.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

_DATA	SEGMENT
_bitIndex DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	04H
	DB	04H
	DB	04H
	DB	04H
	DB	04H
	DB	04H
	DB	04H
	DB	04H
	DB	04H
	DB	04H
	DB	04H
	DB	04H
	DB	04H
	DB	04H
	DB	04H
	DB	04H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
_bitMask DQ	0000000000000001H
	DQ	0000000000000002H
	DQ	0000000000000004H
	DQ	0000000000000008H
	DQ	0000000000000010H
	DQ	0000000000000020H
	DQ	0000000000000040H
	DQ	0000000000000080H
	DQ	0000000000000100H
	DQ	0000000000000200H
	DQ	0000000000000400H
	DQ	0000000000000800H
	DQ	0000000000001000H
	DQ	0000000000002000H
	DQ	0000000000004000H
	DQ	0000000000008000H
	DQ	0000000000010000H
	DQ	0000000000020000H
	DQ	0000000000040000H
	DQ	0000000000080000H
	DQ	0000000000100000H
	DQ	0000000000200000H
	DQ	0000000000400000H
	DQ	0000000000800000H
	DQ	0000000001000000H
	DQ	0000000002000000H
	DQ	0000000004000000H
	DQ	0000000008000000H
	DQ	0000000010000000H
	DQ	0000000020000000H
	DQ	0000000040000000H
	DQ	0000000080000000H
	DQ	0000000100000000H
	DQ	0000000200000000H
	DQ	0000000400000000H
	DQ	0000000800000000H
	DQ	0000001000000000H
	DQ	0000002000000000H
	DQ	0000004000000000H
	DQ	0000008000000000H
	DQ	0000010000000000H
	DQ	0000020000000000H
	DQ	0000040000000000H
	DQ	0000080000000000H
	DQ	0000100000000000H
	DQ	0000200000000000H
	DQ	0000400000000000H
	DQ	0000800000000000H
	DQ	0001000000000000H
	DQ	0002000000000000H
	DQ	0004000000000000H
	DQ	0008000000000000H
	DQ	0010000000000000H
	DQ	0020000000000000H
	DQ	0040000000000000H
	DQ	0080000000000000H
	DQ	0100000000000000H
	DQ	0200000000000000H
	DQ	0400000000000000H
	DQ	0800000000000000H
	DQ	1000000000000000H
	DQ	2000000000000000H
	DQ	4000000000000000H
	DQ	8000000000000000H
_DATA	ENDS
PUBLIC	_antlr3HashTableNew
EXTRN	__imp__free:PROC
EXTRN	__imp__malloc:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\users\ken\documents\github\spengine\antlr\antlr3collections.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT _antlr3HashTableNew
_TEXT	SEGMENT
_bucket$ = -20						; size = 4
_table$ = -8						; size = 4
_sizeHint$ = 8						; size = 4
_antlr3HashTableNew PROC				; COMDAT
; Line 127
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 135
	mov	esi, esp
	push	60					; 0000003cH
	call	DWORD PTR __imp__malloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _table$[ebp], eax
; Line 138
	cmp	DWORD PTR _table$[ebp], 0
	jne	SHORT $LN5@antlr3Hash
; Line 140
	xor	eax, eax
	jmp	$LN6@antlr3Hash
$LN5@antlr3Hash:
; Line 145
	mov	eax, DWORD PTR _sizeHint$[ebp]
	shl	eax, 2
	mov	esi, esp
	push	eax
	call	DWORD PTR __imp__malloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _table$[ebp]
	mov	DWORD PTR [ecx+8], eax
; Line 147
	mov	eax, DWORD PTR _table$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN4@antlr3Hash
; Line 149
	mov	esi, esp
	mov	eax, DWORD PTR _table$[ebp]
	push	eax
	call	DWORD PTR __imp__free
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 150
	xor	eax, eax
	jmp	$LN6@antlr3Hash
$LN4@antlr3Hash:
; Line 155
	mov	eax, DWORD PTR _table$[ebp]
	mov	ecx, DWORD PTR _sizeHint$[ebp]
	mov	DWORD PTR [eax+4], ecx
; Line 157
	mov	eax, DWORD PTR _table$[ebp]
	mov	DWORD PTR [eax+12], 0
; Line 161
	mov	DWORD PTR _bucket$[ebp], 0
	jmp	SHORT $LN3@antlr3Hash
$LN2@antlr3Hash:
	mov	eax, DWORD PTR _bucket$[ebp]
	add	eax, 1
	mov	DWORD PTR _bucket$[ebp], eax
$LN3@antlr3Hash:
	mov	eax, DWORD PTR _bucket$[ebp]
	cmp	eax, DWORD PTR _sizeHint$[ebp]
	jae	SHORT $LN1@antlr3Hash
; Line 163
	mov	eax, DWORD PTR _table$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _bucket$[ebp]
	mov	DWORD PTR [ecx+edx*4], 0
; Line 164
	jmp	SHORT $LN2@antlr3Hash
$LN1@antlr3Hash:
; Line 168
	mov	eax, DWORD PTR _table$[ebp]
	mov	DWORD PTR [eax], 0
; Line 173
	mov	eax, DWORD PTR _table$[ebp]
	mov	BYTE PTR [eax+16], 1
; Line 178
	mov	eax, DWORD PTR _table$[ebp]
	mov	DWORD PTR [eax+32], OFFSET _antlr3HashGet
; Line 179
	mov	eax, DWORD PTR _table$[ebp]
	mov	DWORD PTR [eax+36], OFFSET _antlr3HashPut
; Line 180
	mov	eax, DWORD PTR _table$[ebp]
	mov	DWORD PTR [eax+24], OFFSET _antlr3HashDelete
; Line 181
	mov	eax, DWORD PTR _table$[ebp]
	mov	DWORD PTR [eax+28], OFFSET _antlr3HashRemove
; Line 183
	mov	eax, DWORD PTR _table$[ebp]
	mov	DWORD PTR [eax+48], OFFSET _antlr3HashGetI
; Line 184
	mov	eax, DWORD PTR _table$[ebp]
	mov	DWORD PTR [eax+52], OFFSET _antlr3HashPutI
; Line 185
	mov	eax, DWORD PTR _table$[ebp]
	mov	DWORD PTR [eax+40], OFFSET _antlr3HashDeleteI
; Line 186
	mov	eax, DWORD PTR _table$[ebp]
	mov	DWORD PTR [eax+44], OFFSET _antlr3HashRemoveI
; Line 188
	mov	eax, DWORD PTR _table$[ebp]
	mov	DWORD PTR [eax+56], OFFSET _antlr3HashSize
; Line 189
	mov	eax, DWORD PTR _table$[ebp]
	mov	DWORD PTR [eax+20], OFFSET _antlr3HashFree
; Line 191
	mov	eax, DWORD PTR _table$[ebp]
$LN6@antlr3Hash:
; Line 192
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_antlr3HashTableNew ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _antlr3HashFree
_TEXT	SEGMENT
_nextEntry$ = -44					; size = 4
_entry$ = -32						; size = 4
_thisBucket$ = -20					; size = 4
_bucket$ = -8						; size = 4
_table$ = 8						; size = 4
_antlr3HashFree PROC					; COMDAT
; Line 196
	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 206
	cmp	DWORD PTR _table$[ebp], 0
	je	$LN9@antlr3Hash@2
; Line 208
	mov	DWORD PTR _bucket$[ebp], 0
	jmp	SHORT $LN8@antlr3Hash@2
$LN7@antlr3Hash@2:
	mov	eax, DWORD PTR _bucket$[ebp]
	add	eax, 1
	mov	DWORD PTR _bucket$[ebp], eax
$LN8@antlr3Hash@2:
	mov	eax, DWORD PTR _table$[ebp]
	mov	ecx, DWORD PTR _bucket$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jae	$LN6@antlr3Hash@2
; Line 210
	mov	eax, DWORD PTR _table$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _bucket$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR _thisBucket$[ebp], eax
; Line 214
	cmp	DWORD PTR _thisBucket$[ebp], 0
	je	$LN5@antlr3Hash@2
; Line 216
	mov	eax, DWORD PTR _thisBucket$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _entry$[ebp], ecx
$LN4@antlr3Hash@2:
; Line 220
	cmp	DWORD PTR _entry$[ebp], 0
	je	SHORT $LN3@antlr3Hash@2
; Line 225
	mov	eax, DWORD PTR _entry$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _nextEntry$[ebp], ecx
; Line 231
	mov	eax, DWORD PTR _entry$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN2@antlr3Hash@2
; Line 233
	mov	esi, esp
	mov	eax, DWORD PTR _entry$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _entry$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@antlr3Hash@2:
; Line 238
	mov	eax, DWORD PTR _entry$[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 1
	jne	SHORT $LN1@antlr3Hash@2
	mov	eax, DWORD PTR _entry$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN1@antlr3Hash@2
; Line 240
	mov	esi, esp
	mov	eax, DWORD PTR _entry$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	DWORD PTR __imp__free
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@antlr3Hash@2:
; Line 245
	mov	esi, esp
	mov	eax, DWORD PTR _entry$[ebp]
	push	eax
	call	DWORD PTR __imp__free
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 246
	mov	eax, DWORD PTR _nextEntry$[ebp]
	mov	DWORD PTR _entry$[ebp], eax
; Line 247
	jmp	SHORT $LN4@antlr3Hash@2
$LN3@antlr3Hash@2:
; Line 250
	mov	eax, DWORD PTR _thisBucket$[ebp]
	mov	DWORD PTR [eax], 0
$LN5@antlr3Hash@2:
; Line 252
	jmp	$LN7@antlr3Hash@2
$LN6@antlr3Hash@2:
; Line 256
	mov	esi, esp
	mov	eax, DWORD PTR _table$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	DWORD PTR __imp__free
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN9@antlr3Hash@2:
; Line 261
	mov	esi, esp
	mov	eax, DWORD PTR _table$[ebp]
	push	eax
	call	DWORD PTR __imp__free
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 262
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_antlr3HashFree ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _antlr3HashSize
_TEXT	SEGMENT
_table$ = 8						; size = 4
_antlr3HashSize PROC					; COMDAT
; Line 267
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 268
	mov	eax, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [eax+12]
; Line 269
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_antlr3HashSize ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _antlr3HashRemoveI
_TEXT	SEGMENT
_nextPointer$ = -44					; size = 4
_entry$ = -32						; size = 4
_bucket$ = -20						; size = 4
_hash$ = -8						; size = 4
_table$ = 8						; size = 4
_key$ = 12						; size = 4
_antlr3HashRemoveI PROC					; COMDAT
; Line 275
	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 283
	mov	ecx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR _key$[ebp]
	xor	edx, edx
	div	DWORD PTR [ecx+4]
	mov	DWORD PTR _hash$[ebp], edx
; Line 287
	mov	eax, DWORD PTR _table$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _hash$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR _bucket$[ebp], eax
; Line 295
	mov	eax, DWORD PTR _bucket$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _entry$[ebp], ecx
; Line 296
	mov	eax, DWORD PTR _bucket$[ebp]
	mov	DWORD PTR _nextPointer$[ebp], eax
$LN4@antlr3Hash@3:
; Line 298
	cmp	DWORD PTR _entry$[ebp], 0
	je	SHORT $LN3@antlr3Hash@3
; Line 302
	mov	eax, DWORD PTR _entry$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cmp	ecx, DWORD PTR _key$[ebp]
	jne	SHORT $LN2@antlr3Hash@3
; Line 308
	mov	eax, DWORD PTR _nextPointer$[ebp]
	mov	ecx, DWORD PTR _entry$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax], edx
; Line 310
	mov	eax, DWORD PTR _table$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	sub	ecx, 1
	mov	edx, DWORD PTR _table$[ebp]
	mov	DWORD PTR [edx+12], ecx
; Line 312
	mov	eax, DWORD PTR _entry$[ebp]
	jmp	SHORT $LN5@antlr3Hash@3
; Line 314
	jmp	SHORT $LN1@antlr3Hash@3
$LN2@antlr3Hash@3:
; Line 319
	mov	eax, DWORD PTR _entry$[ebp]
	add	eax, 16					; 00000010H
	mov	DWORD PTR _nextPointer$[ebp], eax
; Line 320
	mov	eax, DWORD PTR _entry$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _entry$[ebp], ecx
$LN1@antlr3Hash@3:
; Line 322
	jmp	SHORT $LN4@antlr3Hash@3
$LN3@antlr3Hash@3:
; Line 324
	xor	eax, eax
$LN5@antlr3Hash@3:
; Line 325
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_antlr3HashRemoveI ENDP
_TEXT	ENDS
PUBLIC	_antlr3Hash
EXTRN	_strcmp:PROC
EXTRN	_strlen:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _antlr3HashRemove
_TEXT	SEGMENT
_nextPointer$ = -44					; size = 4
_entry$ = -32						; size = 4
_bucket$ = -20						; size = 4
_hash$ = -8						; size = 4
_table$ = 8						; size = 4
_key$ = 12						; size = 4
_antlr3HashRemove PROC					; COMDAT
; Line 332
	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 340
	mov	eax, DWORD PTR _key$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _key$[ebp]
	push	ecx
	call	_antlr3Hash
	add	esp, 8
	mov	DWORD PTR _hash$[ebp], eax
; Line 344
	mov	ecx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR _hash$[ebp]
	xor	edx, edx
	div	DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _table$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	lea	edx, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR _bucket$[ebp], edx
; Line 352
	mov	eax, DWORD PTR _bucket$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _entry$[ebp], ecx
; Line 353
	mov	eax, DWORD PTR _bucket$[ebp]
	mov	DWORD PTR _nextPointer$[ebp], eax
$LN5@antlr3Hash@4:
; Line 355
	cmp	DWORD PTR _entry$[ebp], 0
	je	SHORT $LN4@antlr3Hash@4
; Line 359
	mov	eax, DWORD PTR _entry$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _key$[ebp]
	push	edx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN3@antlr3Hash@4
; Line 365
	mov	eax, DWORD PTR _nextPointer$[ebp]
	mov	ecx, DWORD PTR _entry$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax], edx
; Line 369
	mov	eax, DWORD PTR _table$[ebp]
	movzx	ecx, BYTE PTR [eax+16]
	cmp	ecx, 1
	jne	SHORT $LN2@antlr3Hash@4
; Line 371
	mov	esi, esp
	mov	eax, DWORD PTR _entry$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	DWORD PTR __imp__free
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@antlr3Hash@4:
; Line 373
	mov	eax, DWORD PTR _entry$[ebp]
	mov	DWORD PTR [eax+4], 0
; Line 375
	mov	eax, DWORD PTR _table$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	sub	ecx, 1
	mov	edx, DWORD PTR _table$[ebp]
	mov	DWORD PTR [edx+12], ecx
; Line 377
	mov	eax, DWORD PTR _entry$[ebp]
	jmp	SHORT $LN6@antlr3Hash@4
; Line 379
	jmp	SHORT $LN1@antlr3Hash@4
$LN3@antlr3Hash@4:
; Line 384
	mov	eax, DWORD PTR _entry$[ebp]
	add	eax, 16					; 00000010H
	mov	DWORD PTR _nextPointer$[ebp], eax
; Line 385
	mov	eax, DWORD PTR _entry$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _entry$[ebp], ecx
$LN1@antlr3Hash@4:
; Line 387
	jmp	$LN5@antlr3Hash@4
$LN4@antlr3Hash@4:
; Line 389
	xor	eax, eax
$LN6@antlr3Hash@4:
; Line 390
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_antlr3HashRemove ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _antlr3HashDeleteI
_TEXT	SEGMENT
_entry$ = -8						; size = 4
_table$ = 8						; size = 4
_key$ = 12						; size = 4
_antlr3HashDeleteI PROC					; COMDAT
; Line 397
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 400
	mov	eax, DWORD PTR _key$[ebp]
	push	eax
	mov	ecx, DWORD PTR _table$[ebp]
	push	ecx
	call	_antlr3HashRemoveI
	add	esp, 8
	mov	DWORD PTR _entry$[ebp], eax
; Line 404
	cmp	DWORD PTR _entry$[ebp], 0
	je	SHORT $LN1@antlr3Hash@5
	mov	eax, DWORD PTR _entry$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN1@antlr3Hash@5
; Line 408
	mov	esi, esp
	mov	eax, DWORD PTR _entry$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _entry$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 409
	mov	eax, DWORD PTR _entry$[ebp]
	mov	DWORD PTR [eax+8], 0
$LN1@antlr3Hash@5:
; Line 413
	mov	esi, esp
	mov	eax, DWORD PTR _entry$[ebp]
	push	eax
	call	DWORD PTR __imp__free
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 414
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_antlr3HashDeleteI ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _antlr3HashDelete
_TEXT	SEGMENT
_entry$ = -8						; size = 4
_table$ = 8						; size = 4
_key$ = 12						; size = 4
_antlr3HashDelete PROC					; COMDAT
; Line 421
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 424
	mov	eax, DWORD PTR _key$[ebp]
	push	eax
	mov	ecx, DWORD PTR _table$[ebp]
	push	ecx
	call	_antlr3HashRemove
	add	esp, 8
	mov	DWORD PTR _entry$[ebp], eax
; Line 428
	cmp	DWORD PTR _entry$[ebp], 0
	je	SHORT $LN1@antlr3Hash@6
	mov	eax, DWORD PTR _entry$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN1@antlr3Hash@6
; Line 432
	mov	esi, esp
	mov	eax, DWORD PTR _entry$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _entry$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 433
	mov	eax, DWORD PTR _entry$[ebp]
	mov	DWORD PTR [eax+8], 0
$LN1@antlr3Hash@6:
; Line 437
	mov	esi, esp
	mov	eax, DWORD PTR _entry$[ebp]
	push	eax
	call	DWORD PTR __imp__free
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 438
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_antlr3HashDelete ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _antlr3HashGetI
_TEXT	SEGMENT
_entry$ = -32						; size = 4
_bucket$ = -20						; size = 4
_hash$ = -8						; size = 4
_table$ = 8						; size = 4
_key$ = 12						; size = 4
_antlr3HashGetI PROC					; COMDAT
; Line 445
	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 452
	mov	ecx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR _key$[ebp]
	xor	edx, edx
	div	DWORD PTR [ecx+4]
	mov	DWORD PTR _hash$[ebp], edx
; Line 456
	mov	eax, DWORD PTR _table$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _hash$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR _bucket$[ebp], eax
; Line 461
	mov	eax, DWORD PTR _bucket$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _entry$[ebp], ecx
$LN3@antlr3Hash@7:
; Line 463
	cmp	DWORD PTR _entry$[ebp], 0
	je	SHORT $LN2@antlr3Hash@7
; Line 465
	mov	eax, DWORD PTR _entry$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cmp	ecx, DWORD PTR _key$[ebp]
	jne	SHORT $LN1@antlr3Hash@7
; Line 469
	mov	eax, DWORD PTR _entry$[ebp]
	mov	eax, DWORD PTR [eax+8]
	jmp	SHORT $LN4@antlr3Hash@7
$LN1@antlr3Hash@7:
; Line 471
	mov	eax, DWORD PTR _entry$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _entry$[ebp], ecx
; Line 472
	jmp	SHORT $LN3@antlr3Hash@7
$LN2@antlr3Hash@7:
; Line 476
	xor	eax, eax
$LN4@antlr3Hash@7:
; Line 477
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_antlr3HashGetI ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _antlr3HashGet
_TEXT	SEGMENT
_entry$ = -32						; size = 4
_bucket$ = -20						; size = 4
_hash$ = -8						; size = 4
_table$ = 8						; size = 4
_key$ = 12						; size = 4
_antlr3HashGet PROC					; COMDAT
; Line 484
	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 492
	mov	eax, DWORD PTR _key$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _key$[ebp]
	push	ecx
	call	_antlr3Hash
	add	esp, 8
	mov	DWORD PTR _hash$[ebp], eax
; Line 496
	mov	ecx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR _hash$[ebp]
	xor	edx, edx
	div	DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _table$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	lea	edx, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR _bucket$[ebp], edx
; Line 501
	mov	eax, DWORD PTR _bucket$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _entry$[ebp], ecx
$LN3@antlr3Hash@8:
; Line 503
	cmp	DWORD PTR _entry$[ebp], 0
	je	SHORT $LN2@antlr3Hash@8
; Line 505
	mov	eax, DWORD PTR _entry$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _key$[ebp]
	push	edx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN1@antlr3Hash@8
; Line 509
	mov	eax, DWORD PTR _entry$[ebp]
	mov	eax, DWORD PTR [eax+8]
	jmp	SHORT $LN4@antlr3Hash@8
$LN1@antlr3Hash@8:
; Line 511
	mov	eax, DWORD PTR _entry$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _entry$[ebp], ecx
; Line 512
	jmp	SHORT $LN3@antlr3Hash@8
$LN2@antlr3Hash@8:
; Line 516
	xor	eax, eax
$LN4@antlr3Hash@8:
; Line 517
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_antlr3HashGet ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _antlr3HashPutI
_TEXT	SEGMENT
_newPointer$ = -44					; size = 4
_entry$ = -32						; size = 4
_bucket$ = -20						; size = 4
_hash$ = -8						; size = 4
_table$ = 8						; size = 4
_key$ = 12						; size = 4
_element$ = 16						; size = 4
_freeptr$ = 20						; size = 4
_antlr3HashPutI PROC					; COMDAT
; Line 524
	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 532
	mov	ecx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR _key$[ebp]
	xor	edx, edx
	div	DWORD PTR [ecx+4]
	mov	DWORD PTR _hash$[ebp], edx
; Line 536
	mov	eax, DWORD PTR _table$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _hash$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR _bucket$[ebp], eax
; Line 542
	mov	eax, DWORD PTR _bucket$[ebp]
	mov	DWORD PTR _newPointer$[ebp], eax
$LN5@antlr3Hash@9:
; Line 544
	mov	eax, DWORD PTR _newPointer$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN4@antlr3Hash@9
; Line 551
	mov	eax, DWORD PTR _table$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN3@antlr3Hash@9
; Line 553
	mov	eax, DWORD PTR _newPointer$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+4]
	cmp	edx, DWORD PTR _key$[ebp]
	jne	SHORT $LN3@antlr3Hash@9
; Line 555
	mov	eax, 3
	jmp	SHORT $LN6@antlr3Hash@9
$LN3@antlr3Hash@9:
; Line 563
	mov	eax, DWORD PTR _newPointer$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 16					; 00000010H
	mov	DWORD PTR _newPointer$[ebp], ecx
; Line 564
	jmp	SHORT $LN5@antlr3Hash@9
$LN4@antlr3Hash@9:
; Line 569
	mov	esi, esp
	push	20					; 00000014H
	call	DWORD PTR __imp__malloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _entry$[ebp], eax
; Line 571
	cmp	DWORD PTR _entry$[ebp], 0
	jne	SHORT $LN1@antlr3Hash@9
; Line 573
	mov	eax, 1
	jmp	SHORT $LN6@antlr3Hash@9
$LN1@antlr3Hash@9:
; Line 576
	mov	eax, DWORD PTR _entry$[ebp]
	mov	ecx, DWORD PTR _element$[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 577
	mov	eax, DWORD PTR _entry$[ebp]
	mov	ecx, DWORD PTR _freeptr$[ebp]
	mov	DWORD PTR [eax+12], ecx
; Line 578
	mov	eax, DWORD PTR _entry$[ebp]
	mov	BYTE PTR [eax], 0
; Line 579
	mov	eax, DWORD PTR _entry$[ebp]
	mov	ecx, DWORD PTR _key$[ebp]
	mov	DWORD PTR [eax+4], ecx
; Line 580
	mov	eax, DWORD PTR _entry$[ebp]
	mov	DWORD PTR [eax+16], 0
; Line 582
	mov	eax, DWORD PTR _newPointer$[ebp]
	mov	ecx, DWORD PTR _entry$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 584
	mov	eax, DWORD PTR _table$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	add	ecx, 1
	mov	edx, DWORD PTR _table$[ebp]
	mov	DWORD PTR [edx+12], ecx
; Line 586
	xor	eax, eax
$LN6@antlr3Hash@9:
; Line 587
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_antlr3HashPutI ENDP
_TEXT	ENDS
EXTRN	__imp__strdup:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _antlr3HashPut
_TEXT	SEGMENT
_newPointer$ = -44					; size = 4
_entry$ = -32						; size = 4
_bucket$ = -20						; size = 4
_hash$ = -8						; size = 4
_table$ = 8						; size = 4
_key$ = 12						; size = 4
_element$ = 16						; size = 4
_freeptr$ = 20						; size = 4
_antlr3HashPut PROC					; COMDAT
; Line 595
	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 603
	mov	eax, DWORD PTR _key$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _key$[ebp]
	push	ecx
	call	_antlr3Hash
	add	esp, 8
	mov	DWORD PTR _hash$[ebp], eax
; Line 607
	mov	ecx, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR _hash$[ebp]
	xor	edx, edx
	div	DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _table$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	lea	edx, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR _bucket$[ebp], edx
; Line 613
	mov	eax, DWORD PTR _bucket$[ebp]
	mov	DWORD PTR _newPointer$[ebp], eax
$LN7@antlr3Hash@10:
; Line 615
	mov	eax, DWORD PTR _newPointer$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN6@antlr3Hash@10
; Line 622
	mov	eax, DWORD PTR _table$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN5@antlr3Hash@10
; Line 624
	mov	eax, DWORD PTR _newPointer$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _key$[ebp]
	push	eax
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN5@antlr3Hash@10
; Line 626
	mov	eax, 3
	jmp	$LN8@antlr3Hash@10
$LN5@antlr3Hash@10:
; Line 634
	mov	eax, DWORD PTR _newPointer$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 16					; 00000010H
	mov	DWORD PTR _newPointer$[ebp], ecx
; Line 635
	jmp	SHORT $LN7@antlr3Hash@10
$LN6@antlr3Hash@10:
; Line 640
	mov	esi, esp
	push	20					; 00000014H
	call	DWORD PTR __imp__malloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _entry$[ebp], eax
; Line 642
	cmp	DWORD PTR _entry$[ebp], 0
	jne	SHORT $LN3@antlr3Hash@10
; Line 644
	mov	eax, 1
	jmp	SHORT $LN8@antlr3Hash@10
$LN3@antlr3Hash@10:
; Line 647
	mov	eax, DWORD PTR _entry$[ebp]
	mov	ecx, DWORD PTR _element$[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 648
	mov	eax, DWORD PTR _entry$[ebp]
	mov	ecx, DWORD PTR _freeptr$[ebp]
	mov	DWORD PTR [eax+12], ecx
; Line 649
	mov	eax, DWORD PTR _entry$[ebp]
	mov	BYTE PTR [eax], 1
; Line 650
	mov	eax, DWORD PTR _table$[ebp]
	movzx	ecx, BYTE PTR [eax+16]
	cmp	ecx, 1
	jne	SHORT $LN2@antlr3Hash@10
; Line 652
	mov	esi, esp
	mov	eax, DWORD PTR _key$[ebp]
	push	eax
	call	DWORD PTR __imp__strdup
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _entry$[ebp]
	mov	DWORD PTR [ecx+4], eax
; Line 654
	jmp	SHORT $LN1@antlr3Hash@10
$LN2@antlr3Hash@10:
; Line 656
	mov	eax, DWORD PTR _entry$[ebp]
	mov	ecx, DWORD PTR _key$[ebp]
	mov	DWORD PTR [eax+4], ecx
$LN1@antlr3Hash@10:
; Line 658
	mov	eax, DWORD PTR _entry$[ebp]
	mov	DWORD PTR [eax+16], 0
; Line 660
	mov	eax, DWORD PTR _newPointer$[ebp]
	mov	ecx, DWORD PTR _entry$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 662
	mov	eax, DWORD PTR _table$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	add	ecx, 1
	mov	edx, DWORD PTR _table$[ebp]
	mov	DWORD PTR [edx+12], ecx
; Line 664
	xor	eax, eax
$LN8@antlr3Hash@10:
; Line 665
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_antlr3HashPut ENDP
_TEXT	ENDS
PUBLIC	_antlr3EnumNew
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _antlr3EnumNew
_TEXT	SEGMENT
_en$ = -8						; size = 4
_table$ = 8						; size = 4
_antlr3EnumNew PROC					; COMDAT
; Line 674
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 679
	mov	esi, esp
	push	20					; 00000014H
	call	DWORD PTR __imp__malloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _en$[ebp], eax
; Line 683
	cmp	DWORD PTR _en$[ebp], 0
	jne	SHORT $LN2@antlr3Enum
; Line 685
	mov	eax, 1
	jmp	SHORT $LN3@antlr3Enum
$LN2@antlr3Enum:
; Line 690
	mov	eax, DWORD PTR _en$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 691
	mov	eax, DWORD PTR _en$[ebp]
	mov	DWORD PTR [eax+4], 0
; Line 692
	mov	eax, DWORD PTR _en$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _en$[ebp]
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax+8], ecx
; Line 700
	mov	eax, DWORD PTR _en$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN1@antlr3Enum
; Line 702
	mov	eax, DWORD PTR _en$[ebp]
	push	eax
	call	_antlr3EnumNextEntry
	add	esp, 4
$LN1@antlr3Enum:
; Line 707
	mov	eax, DWORD PTR _en$[ebp]
	mov	DWORD PTR [eax+16], OFFSET _antlr3EnumFree
; Line 708
	mov	eax, DWORD PTR _en$[ebp]
	mov	DWORD PTR [eax+12], OFFSET _antlr3EnumNext
; Line 712
	mov	eax, DWORD PTR _en$[ebp]
$LN3@antlr3Enum:
; Line 713
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_antlr3EnumNew ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _antlr3EnumNext
_TEXT	SEGMENT
_en$ = 8						; size = 4
_key$ = 12						; size = 4
_data$ = 16						; size = 4
_antlr3EnumNext PROC					; COMDAT
; Line 730
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 733
	mov	eax, DWORD PTR _en$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _en$[ebp]
	mov	eax, DWORD PTR [edx+4]
	cmp	eax, DWORD PTR [ecx+4]
	jb	SHORT $LN1@antlr3Enum@2
; Line 737
	mov	eax, 1
	jmp	SHORT $LN2@antlr3Enum@2
$LN1@antlr3Enum@2:
; Line 743
	mov	eax, DWORD PTR _key$[ebp]
	mov	ecx, DWORD PTR _en$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax], edx
; Line 744
	mov	eax, DWORD PTR _en$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _data$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx], eax
; Line 749
	mov	eax, DWORD PTR _en$[ebp]
	push	eax
	call	_antlr3EnumNextEntry
	add	esp, 4
; Line 751
	xor	eax, eax
$LN2@antlr3Enum@2:
; Line 752
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_antlr3EnumNext ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _antlr3EnumNextEntry
_TEXT	SEGMENT
_bucket$ = -8						; size = 4
_en$ = 8						; size = 4
_antlr3EnumNextEntry PROC				; COMDAT
; Line 766
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 771
	mov	eax, DWORD PTR _en$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN5@antlr3Enum@3
; Line 776
	mov	eax, DWORD PTR _en$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	cmp	DWORD PTR [ecx+16], 0
	je	SHORT $LN5@antlr3Enum@3
; Line 781
	mov	eax, DWORD PTR _en$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _en$[ebp]
	mov	eax, DWORD PTR [ecx+16]
	mov	DWORD PTR [edx+8], eax
; Line 782
	jmp	SHORT $LN6@antlr3Enum@3
$LN5@antlr3Enum@3:
; Line 789
	mov	eax, DWORD PTR _en$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _en$[ebp]
	mov	DWORD PTR [edx+4], ecx
$LN3@antlr3Enum@3:
; Line 791
	mov	eax, DWORD PTR _en$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _en$[ebp]
	mov	eax, DWORD PTR [edx+4]
	cmp	eax, DWORD PTR [ecx+4]
	jae	SHORT $LN6@antlr3Enum@3
; Line 795
	mov	eax, DWORD PTR _en$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _en$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [ecx+8]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _bucket$[ebp], edx
; Line 797
	mov	eax, DWORD PTR _bucket$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN1@antlr3Enum@3
; Line 802
	mov	eax, DWORD PTR _en$[ebp]
	mov	ecx, DWORD PTR _bucket$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+8], edx
; Line 803
	jmp	SHORT $LN6@antlr3Enum@3
$LN1@antlr3Enum@3:
; Line 809
	mov	eax, DWORD PTR _en$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _en$[ebp]
	mov	DWORD PTR [edx+4], ecx
; Line 810
	jmp	SHORT $LN3@antlr3Enum@3
$LN6@antlr3Enum@3:
; Line 815
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_antlr3EnumNextEntry ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _antlr3EnumFree
_TEXT	SEGMENT
_en$ = 8						; size = 4
_antlr3EnumFree PROC					; COMDAT
; Line 823
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 826
	mov	esi, esp
	mov	eax, DWORD PTR _en$[ebp]
	push	eax
	call	DWORD PTR __imp__free
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 827
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_antlr3EnumFree ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _antlr3Hash
_TEXT	SEGMENT
_i1$ = -32						; size = 4
_keyPtr$ = -20						; size = 4
_hash$ = -8						; size = 4
_key$ = 8						; size = 4
_keylen$ = 12						; size = 4
_antlr3Hash PROC					; COMDAT
; Line 835
	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 842
	mov	DWORD PTR _hash$[ebp], 0
; Line 843
	mov	eax, DWORD PTR _key$[ebp]
	mov	DWORD PTR _keyPtr$[ebp], eax
$LN3@antlr3Hash@11:
; Line 847
	cmp	DWORD PTR _keylen$[ebp], 0
	jbe	SHORT $LN2@antlr3Hash@11
; Line 849
	mov	eax, DWORD PTR _hash$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _keyPtr$[ebp]
	movzx	edx, BYTE PTR [ecx]
	add	eax, edx
	mov	DWORD PTR _hash$[ebp], eax
	mov	eax, DWORD PTR _keyPtr$[ebp]
	add	eax, 1
	mov	DWORD PTR _keyPtr$[ebp], eax
; Line 851
	mov	eax, DWORD PTR _hash$[ebp]
	and	eax, -268435456				; f0000000H
	mov	DWORD PTR _i1$[ebp], eax
	je	SHORT $LN1@antlr3Hash@11
; Line 853
	mov	eax, DWORD PTR _i1$[ebp]
	shr	eax, 24					; 00000018H
	xor	eax, DWORD PTR _hash$[ebp]
	mov	DWORD PTR _hash$[ebp], eax
; Line 854
	mov	eax, DWORD PTR _hash$[ebp]
	xor	eax, DWORD PTR _i1$[ebp]
	mov	DWORD PTR _hash$[ebp], eax
$LN1@antlr3Hash@11:
; Line 856
	mov	eax, DWORD PTR _keylen$[ebp]
	sub	eax, 1
	mov	DWORD PTR _keylen$[ebp], eax
; Line 857
	jmp	SHORT $LN3@antlr3Hash@11
$LN2@antlr3Hash@11:
; Line 859
	mov	eax, DWORD PTR _hash$[ebp]
; Line 860
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_antlr3Hash ENDP
_TEXT	ENDS
PUBLIC	_antlr3ListNew
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _antlr3ListNew
_TEXT	SEGMENT
_list$ = -8						; size = 4
_sizeHint$ = 8						; size = 4
_antlr3ListNew PROC					; COMDAT
; Line 864
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 869
	mov	esi, esp
	push	32					; 00000020H
	call	DWORD PTR __imp__malloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _list$[ebp], eax
; Line 871
	cmp	DWORD PTR _list$[ebp], 0
	jne	SHORT $LN2@antlr3List
; Line 873
	mov	eax, 1
	jmp	SHORT $LN3@antlr3List
$LN2@antlr3List:
; Line 878
	mov	eax, DWORD PTR _sizeHint$[ebp]
	push	eax
	call	_antlr3HashTableNew
	add	esp, 4
	mov	ecx, DWORD PTR _list$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 880
	mov	eax, DWORD PTR _list$[ebp]
	cmp	DWORD PTR [eax], 1
	jne	SHORT $LN1@antlr3List
; Line 882
	mov	eax, 1
	jmp	SHORT $LN3@antlr3List
$LN1@antlr3List:
; Line 887
	mov	eax, DWORD PTR _list$[ebp]
	mov	DWORD PTR [eax+4], OFFSET _antlr3ListFree
; Line 888
	mov	eax, DWORD PTR _list$[ebp]
	mov	DWORD PTR [eax+8], OFFSET _antlr3ListDelete
; Line 889
	mov	eax, DWORD PTR _list$[ebp]
	mov	DWORD PTR [eax+12], OFFSET _antlr3ListGet
; Line 890
	mov	eax, DWORD PTR _list$[ebp]
	mov	DWORD PTR [eax+20], OFFSET _antlr3ListAdd
; Line 891
	mov	eax, DWORD PTR _list$[ebp]
	mov	DWORD PTR [eax+16], OFFSET _antlr3ListRemove
; Line 892
	mov	eax, DWORD PTR _list$[ebp]
	mov	DWORD PTR [eax+24], OFFSET _antlr3ListPut
; Line 893
	mov	eax, DWORD PTR _list$[ebp]
	mov	DWORD PTR [eax+28], OFFSET _antlr3ListSize
; Line 895
	mov	eax, DWORD PTR _list$[ebp]
$LN3@antlr3List:
; Line 896
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_antlr3ListNew ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _antlr3ListSize
_TEXT	SEGMENT
_list$ = 8						; size = 4
_antlr3ListSize PROC					; COMDAT
; Line 899
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 900
	mov	esi, esp
	mov	eax, DWORD PTR _list$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _list$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+56]
	call	ecx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 901
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_antlr3ListSize ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _antlr3ListFree
_TEXT	SEGMENT
_list$ = 8						; size = 4
_antlr3ListFree PROC					; COMDAT
; Line 905
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 908
	mov	esi, esp
	mov	eax, DWORD PTR _list$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _list$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	call	ecx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 912
	mov	esi, esp
	mov	eax, DWORD PTR _list$[ebp]
	push	eax
	call	DWORD PTR __imp__free
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 913
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_antlr3ListFree ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _antlr3ListDelete
_TEXT	SEGMENT
_list$ = 8						; size = 4
_key$ = 12						; size = 4
_antlr3ListDelete PROC					; COMDAT
; Line 917
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 918
	mov	esi, esp
	mov	eax, DWORD PTR _key$[ebp]
	push	eax
	mov	ecx, DWORD PTR _list$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _list$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+40]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 919
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_antlr3ListDelete ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _antlr3ListGet
_TEXT	SEGMENT
_list$ = 8						; size = 4
_key$ = 12						; size = 4
_antlr3ListGet PROC					; COMDAT
; Line 923
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 924
	mov	esi, esp
	mov	eax, DWORD PTR _key$[ebp]
	push	eax
	mov	ecx, DWORD PTR _list$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _list$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+48]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 925
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_antlr3ListGet ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _antlr3ListAdd
_TEXT	SEGMENT
_key$ = -8						; size = 4
_list$ = 8						; size = 4
_element$ = 12						; size = 4
_freeptr$ = 16						; size = 4
_antlr3ListAdd PROC					; COMDAT
; Line 930
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 933
	mov	esi, esp
	mov	eax, DWORD PTR _list$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _list$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+56]
	call	ecx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	add	eax, 1
	mov	DWORD PTR _key$[ebp], eax
; Line 934
	mov	esi, esp
	mov	eax, DWORD PTR _freeptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _element$[ebp]
	push	ecx
	mov	edx, DWORD PTR _key$[ebp]
	push	edx
	mov	eax, DWORD PTR _list$[ebp]
	push	eax
	mov	ecx, DWORD PTR _list$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	call	edx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 935
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_antlr3ListAdd ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _antlr3ListRemove
_TEXT	SEGMENT
_entry$ = -8						; size = 4
_list$ = 8						; size = 4
_key$ = 12						; size = 4
_antlr3ListRemove PROC					; COMDAT
; Line 942
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 945
	mov	esi, esp
	mov	eax, DWORD PTR _key$[ebp]
	push	eax
	mov	ecx, DWORD PTR _list$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _list$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+44]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _entry$[ebp], eax
; Line 947
	cmp	DWORD PTR _entry$[ebp], 0
	je	SHORT $LN2@antlr3List@2
; Line 949
	mov	eax, DWORD PTR _entry$[ebp]
	mov	eax, DWORD PTR [eax+8]
	jmp	SHORT $LN3@antlr3List@2
; Line 951
	jmp	SHORT $LN3@antlr3List@2
$LN2@antlr3List@2:
; Line 953
	xor	eax, eax
$LN3@antlr3List@2:
; Line 955
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_antlr3ListRemove ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _antlr3ListPut
_TEXT	SEGMENT
_list$ = 8						; size = 4
_key$ = 12						; size = 4
_element$ = 16						; size = 4
_freeptr$ = 20						; size = 4
_antlr3ListPut PROC					; COMDAT
; Line 959
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 960
	mov	esi, esp
	mov	eax, DWORD PTR _freeptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _element$[ebp]
	push	ecx
	mov	edx, DWORD PTR _key$[ebp]
	push	edx
	mov	eax, DWORD PTR _list$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _list$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+52]
	call	ecx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 961
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_antlr3ListPut ENDP
_TEXT	ENDS
PUBLIC	_antlr3VectorNew
PUBLIC	_antlr3StackNew
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _antlr3StackNew
_TEXT	SEGMENT
_stack$ = -8						; size = 4
_sizeHint$ = 8						; size = 4
_antlr3StackNew PROC					; COMDAT
; Line 965
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 970
	mov	esi, esp
	push	32					; 00000020H
	call	DWORD PTR __imp__malloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _stack$[ebp], eax
; Line 972
	cmp	DWORD PTR _stack$[ebp], 0
	jne	SHORT $LN2@antlr3Stac
; Line 974
	mov	eax, 1
	jmp	SHORT $LN3@antlr3Stac
$LN2@antlr3Stac:
; Line 979
	mov	eax, DWORD PTR _sizeHint$[ebp]
	push	eax
	call	_antlr3VectorNew
	add	esp, 4
	mov	ecx, DWORD PTR _stack$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 980
	mov	eax, DWORD PTR _stack$[ebp]
	mov	DWORD PTR [eax+4], 0
; Line 982
	mov	eax, DWORD PTR _stack$[ebp]
	cmp	DWORD PTR [eax], 1
	jne	SHORT $LN1@antlr3Stac
; Line 984
	mov	eax, 1
	jmp	SHORT $LN3@antlr3Stac
$LN1@antlr3Stac:
; Line 989
	mov	eax, DWORD PTR _stack$[ebp]
	mov	DWORD PTR [eax+16], OFFSET _antlr3StackGet
; Line 990
	mov	eax, DWORD PTR _stack$[ebp]
	mov	DWORD PTR [eax+8], OFFSET _antlr3StackFree
; Line 991
	mov	eax, DWORD PTR _stack$[ebp]
	mov	DWORD PTR [eax+12], OFFSET _antlr3StackPop
; Line 992
	mov	eax, DWORD PTR _stack$[ebp]
	mov	DWORD PTR [eax+20], OFFSET _antlr3StackPush
; Line 993
	mov	eax, DWORD PTR _stack$[ebp]
	mov	DWORD PTR [eax+24], OFFSET _antlr3StackSize
; Line 994
	mov	eax, DWORD PTR _stack$[ebp]
	mov	DWORD PTR [eax+28], OFFSET _antlr3StackPeek
; Line 996
	mov	eax, DWORD PTR _stack$[ebp]
$LN3@antlr3Stac:
; Line 997
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_antlr3StackNew ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _antlr3StackSize
_TEXT	SEGMENT
_stack$ = 8						; size = 4
_antlr3StackSize PROC					; COMDAT
; Line 1000
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1001
	mov	eax, DWORD PTR _stack$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR [ecx+4]
; Line 1002
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_antlr3StackSize ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _antlr3StackFree
_TEXT	SEGMENT
_stack$ = 8						; size = 4
_antlr3StackFree PROC					; COMDAT
; Line 1007
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1010
	mov	esi, esp
	mov	eax, DWORD PTR _stack$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _stack$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+144]
	call	ecx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1011
	mov	eax, DWORD PTR _stack$[ebp]
	mov	DWORD PTR [eax], 0
; Line 1012
	mov	eax, DWORD PTR _stack$[ebp]
	mov	DWORD PTR [eax+4], 0
; Line 1014
	mov	esi, esp
	mov	eax, DWORD PTR _stack$[ebp]
	push	eax
	call	DWORD PTR __imp__free
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1015
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_antlr3StackFree ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _antlr3StackPop
_TEXT	SEGMENT
_stack$ = 8						; size = 4
_antlr3StackPop PROC					; COMDAT
; Line 1019
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1022
	mov	eax, DWORD PTR _stack$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+4]
	sub	edx, 1
	mov	esi, esp
	push	edx
	mov	eax, DWORD PTR _stack$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _stack$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+148]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1030
	mov	eax, DWORD PTR _stack$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+4]
	sub	edx, 1
	mov	esi, esp
	push	edx
	mov	eax, DWORD PTR _stack$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _stack$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+152]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	edx, DWORD PTR _stack$[ebp]
	mov	DWORD PTR [edx+4], eax
; Line 1031
	mov	eax, DWORD PTR _stack$[ebp]
	mov	eax, DWORD PTR [eax+4]
; Line 1032
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_antlr3StackPop ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _antlr3StackGet
_TEXT	SEGMENT
_stack$ = 8						; size = 4
_key$ = 12						; size = 4
_antlr3StackGet PROC					; COMDAT
; Line 1036
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1037
	mov	esi, esp
	mov	eax, DWORD PTR _key$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stack$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _stack$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+152]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1038
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_antlr3StackGet ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _antlr3StackPeek
_TEXT	SEGMENT
_stack$ = 8						; size = 4
_antlr3StackPeek PROC					; COMDAT
; Line 1042
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1043
	mov	eax, DWORD PTR _stack$[ebp]
	mov	eax, DWORD PTR [eax+4]
; Line 1044
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_antlr3StackPeek ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _antlr3StackPush
_TEXT	SEGMENT
_stack$ = 8						; size = 4
_element$ = 12						; size = 4
_freeptr$ = 16						; size = 4
_antlr3StackPush PROC					; COMDAT
; Line 1048
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1049
	mov	eax, DWORD PTR _stack$[ebp]
	mov	ecx, DWORD PTR _element$[ebp]
	mov	DWORD PTR [eax+4], ecx
; Line 1050
	mov	esi, esp
	mov	eax, DWORD PTR _freeptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _element$[ebp]
	push	ecx
	mov	edx, DWORD PTR _stack$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _stack$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+168]
	call	eax
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1051
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_antlr3StackPush ENDP
_TEXT	ENDS
PUBLIC	_antlr3SetVectorApi
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _antlr3VectorNew
_TEXT	SEGMENT
_vector$ = -8						; size = 4
_sizeHint$ = 8						; size = 4
_antlr3VectorNew PROC					; COMDAT
; Line 1055
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1061
	mov	esi, esp
	push	180					; 000000b4H
	call	DWORD PTR __imp__malloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _vector$[ebp], eax
; Line 1063
	cmp	DWORD PTR _vector$[ebp], 0
	jne	SHORT $LN1@antlr3Vect
; Line 1065
	mov	eax, 1
	jmp	SHORT $LN2@antlr3Vect
$LN1@antlr3Vect:
; Line 1070
	mov	eax, DWORD PTR _sizeHint$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vector$[ebp]
	push	ecx
	call	_antlr3SetVectorApi
	add	esp, 8
; Line 1074
	mov	eax, DWORD PTR _vector$[ebp]
$LN2@antlr3Vect:
; Line 1075
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_antlr3VectorNew ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _antlr3SetVectorApi
_TEXT	SEGMENT
_initialSize$ = -8					; size = 4
_vector$ = 8						; size = 4
_sizeHint$ = 12						; size = 4
_antlr3SetVectorApi PROC				; COMDAT
; Line 1079
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1084
	cmp	DWORD PTR _sizeHint$[ebp], 16		; 00000010H
	jbe	SHORT $LN5@antlr3SetV
; Line 1086
	mov	eax, DWORD PTR _sizeHint$[ebp]
	mov	DWORD PTR _initialSize$[ebp], eax
; Line 1088
	jmp	SHORT $LN4@antlr3SetV
$LN5@antlr3SetV:
; Line 1090
	mov	DWORD PTR _initialSize$[ebp], 16	; 00000010H
$LN4@antlr3SetV:
; Line 1093
	cmp	DWORD PTR _sizeHint$[ebp], 16		; 00000010H
	jbe	SHORT $LN3@antlr3SetV
; Line 1095
	mov	eax, DWORD PTR _initialSize$[ebp]
	shl	eax, 3
	mov	esi, esp
	push	eax
	call	DWORD PTR __imp__malloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _vector$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 1097
	jmp	SHORT $LN2@antlr3SetV
$LN3@antlr3SetV:
; Line 1099
	mov	eax, DWORD PTR _vector$[ebp]
	add	eax, 8
	mov	ecx, DWORD PTR _vector$[ebp]
	mov	DWORD PTR [ecx], eax
$LN2@antlr3SetV:
; Line 1102
	mov	eax, DWORD PTR _vector$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN1@antlr3SetV
; Line 1104
	mov	esi, esp
	mov	eax, DWORD PTR _vector$[ebp]
	push	eax
	call	DWORD PTR __imp__free
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1105
	jmp	$LN6@antlr3SetV
$LN1@antlr3SetV:
; Line 1110
	mov	eax, DWORD PTR _vector$[ebp]
	mov	DWORD PTR [eax+4], 0
; Line 1111
	mov	eax, DWORD PTR _vector$[ebp]
	mov	ecx, DWORD PTR _initialSize$[ebp]
	mov	DWORD PTR [eax+140], ecx
; Line 1115
	mov	eax, DWORD PTR _vector$[ebp]
	mov	DWORD PTR [eax+168], OFFSET _antlr3VectorAdd
; Line 1116
	mov	eax, DWORD PTR _vector$[ebp]
	mov	DWORD PTR [eax+148], OFFSET _antlr3VectorDel
; Line 1117
	mov	eax, DWORD PTR _vector$[ebp]
	mov	DWORD PTR [eax+152], OFFSET _antlr3VectorGet
; Line 1118
	mov	eax, DWORD PTR _vector$[ebp]
	mov	DWORD PTR [eax+144], OFFSET _antlr3VectorFree
; Line 1119
	mov	eax, DWORD PTR _vector$[ebp]
	mov	DWORD PTR [eax+172], OFFSET _antlr3VectorSet
; Line 1120
	mov	eax, DWORD PTR _vector$[ebp]
	mov	DWORD PTR [eax+156], OFFSET _antrl3VectorRemove
; Line 1121
	mov	eax, DWORD PTR _vector$[ebp]
	mov	DWORD PTR [eax+160], OFFSET _antlr3VectorClear
; Line 1122
	mov	eax, DWORD PTR _vector$[ebp]
	mov	DWORD PTR [eax+176], OFFSET _antlr3VectorSize
; Line 1123
	mov	eax, DWORD PTR _vector$[ebp]
	mov	DWORD PTR [eax+164], OFFSET _antlr3VectorSwap
; Line 1127
	mov	eax, DWORD PTR _vector$[ebp]
	mov	BYTE PTR [eax+136], 0
$LN6@antlr3SetV:
; Line 1128
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_antlr3SetVectorApi ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _antlr3VectorClear
_TEXT	SEGMENT
_entry$ = -8						; size = 4
_vector$ = 8						; size = 4
_antlr3VectorClear PROC					; COMDAT
; Line 1137
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1144
	mov	DWORD PTR _entry$[ebp], 0
	jmp	SHORT $LN4@antlr3Vect@2
$LN3@antlr3Vect@2:
	mov	eax, DWORD PTR _entry$[ebp]
	add	eax, 1
	mov	DWORD PTR _entry$[ebp], eax
$LN4@antlr3Vect@2:
	mov	eax, DWORD PTR _vector$[ebp]
	mov	ecx, DWORD PTR _entry$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jae	SHORT $LN2@antlr3Vect@2
; Line 1146
	mov	eax, DWORD PTR _vector$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _entry$[ebp]
	cmp	DWORD PTR [ecx+edx*8+4], 0
	je	SHORT $LN1@antlr3Vect@2
; Line 1148
	mov	eax, DWORD PTR _vector$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR _entry$[ebp]
	mov	eax, DWORD PTR [ecx+edx*8]
	push	eax
	mov	ecx, DWORD PTR _vector$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _entry$[ebp]
	mov	ecx, DWORD PTR [edx+eax*8+4]
	call	ecx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@antlr3Vect@2:
; Line 1150
	mov	eax, DWORD PTR _vector$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _entry$[ebp]
	mov	DWORD PTR [ecx+edx*8+4], 0
; Line 1151
	mov	eax, DWORD PTR _vector$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _entry$[ebp]
	mov	DWORD PTR [ecx+edx*8], 0
; Line 1152
	jmp	SHORT $LN3@antlr3Vect@2
$LN2@antlr3Vect@2:
; Line 1157
	mov	eax, DWORD PTR _vector$[ebp]
	mov	DWORD PTR [eax+4], 0
; Line 1158
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_antlr3VectorClear ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _antlr3VectorFree
_TEXT	SEGMENT
_entry$ = -8						; size = 4
_vector$ = 8						; size = 4
_antlr3VectorFree PROC					; COMDAT
; Line 1162
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1169
	mov	DWORD PTR _entry$[ebp], 0
	jmp	SHORT $LN6@antlr3Vect@3
$LN5@antlr3Vect@3:
	mov	eax, DWORD PTR _entry$[ebp]
	add	eax, 1
	mov	DWORD PTR _entry$[ebp], eax
$LN6@antlr3Vect@3:
	mov	eax, DWORD PTR _vector$[ebp]
	mov	ecx, DWORD PTR _entry$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jae	SHORT $LN4@antlr3Vect@3
; Line 1171
	mov	eax, DWORD PTR _vector$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _entry$[ebp]
	cmp	DWORD PTR [ecx+edx*8+4], 0
	je	SHORT $LN3@antlr3Vect@3
; Line 1173
	mov	eax, DWORD PTR _vector$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR _entry$[ebp]
	mov	eax, DWORD PTR [ecx+edx*8]
	push	eax
	mov	ecx, DWORD PTR _vector$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _entry$[ebp]
	mov	ecx, DWORD PTR [edx+eax*8+4]
	call	ecx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@antlr3Vect@3:
; Line 1175
	mov	eax, DWORD PTR _vector$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _entry$[ebp]
	mov	DWORD PTR [ecx+edx*8+4], 0
; Line 1176
	mov	eax, DWORD PTR _vector$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _entry$[ebp]
	mov	DWORD PTR [ecx+edx*8], 0
; Line 1177
	jmp	SHORT $LN5@antlr3Vect@3
$LN4@antlr3Vect@3:
; Line 1179
	mov	eax, DWORD PTR _vector$[ebp]
	movzx	ecx, BYTE PTR [eax+136]
	test	ecx, ecx
	jne	SHORT $LN7@antlr3Vect@3
; Line 1183
	mov	eax, DWORD PTR _vector$[ebp]
	cmp	DWORD PTR [eax+140], 16			; 00000010H
	jbe	SHORT $LN1@antlr3Vect@3
; Line 1185
	mov	esi, esp
	mov	eax, DWORD PTR _vector$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	DWORD PTR __imp__free
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@antlr3Vect@3:
; Line 1187
	mov	eax, DWORD PTR _vector$[ebp]
	mov	DWORD PTR [eax], 0
; Line 1191
	mov	esi, esp
	mov	eax, DWORD PTR _vector$[ebp]
	push	eax
	call	DWORD PTR __imp__free
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN7@antlr3Vect@3:
; Line 1193
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_antlr3VectorFree ENDP
_TEXT	ENDS
EXTRN	__imp__memmove:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _antlr3VectorDel
_TEXT	SEGMENT
_vector$ = 8						; size = 4
_entry$ = 12						; size = 4
_antlr3VectorDel PROC					; COMDAT
; Line 1196
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1199
	mov	eax, DWORD PTR _vector$[ebp]
	mov	ecx, DWORD PTR _entry$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jb	SHORT $LN4@antlr3Vect@4
; Line 1201
	jmp	$LN5@antlr3Vect@4
$LN4@antlr3Vect@4:
; Line 1206
	mov	eax, DWORD PTR _vector$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _entry$[ebp]
	cmp	DWORD PTR [ecx+edx*8+4], 0
	je	SHORT $LN3@antlr3Vect@4
; Line 1208
	mov	eax, DWORD PTR _vector$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR _entry$[ebp]
	mov	eax, DWORD PTR [ecx+edx*8]
	push	eax
	mov	ecx, DWORD PTR _vector$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _entry$[ebp]
	mov	ecx, DWORD PTR [edx+eax*8+4]
	call	ecx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1209
	mov	eax, DWORD PTR _vector$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _entry$[ebp]
	mov	DWORD PTR [ecx+edx*8+4], 0
$LN3@antlr3Vect@4:
; Line 1212
	mov	eax, DWORD PTR _vector$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 1
	cmp	DWORD PTR _entry$[ebp], ecx
	jne	SHORT $LN2@antlr3Vect@4
; Line 1217
	mov	eax, DWORD PTR _vector$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _entry$[ebp]
	mov	DWORD PTR [ecx+edx*8], 0
; Line 1219
	jmp	SHORT $LN1@antlr3Vect@4
$LN2@antlr3Vect@4:
; Line 1223
	mov	eax, DWORD PTR _vector$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, DWORD PTR _entry$[ebp]
	lea	edx, DWORD PTR [ecx*8-8]
	mov	esi, esp
	push	edx
	mov	eax, DWORD PTR _vector$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _entry$[ebp]
	lea	eax, DWORD PTR [ecx+edx*8+8]
	push	eax
	mov	ecx, DWORD PTR _vector$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _entry$[ebp]
	lea	ecx, DWORD PTR [edx+eax*8]
	push	ecx
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@antlr3Vect@4:
; Line 1228
	mov	eax, DWORD PTR _vector$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 1
	mov	edx, DWORD PTR _vector$[ebp]
	mov	DWORD PTR [edx+4], ecx
$LN5@antlr3Vect@4:
; Line 1229
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_antlr3VectorDel ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _antlr3VectorGet
_TEXT	SEGMENT
_vector$ = 8						; size = 4
_entry$ = 12						; size = 4
_antlr3VectorGet PROC					; COMDAT
; Line 1232
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1235
	mov	eax, DWORD PTR _vector$[ebp]
	mov	ecx, DWORD PTR _entry$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jae	SHORT $LN2@antlr3Vect@5
; Line 1237
	mov	eax, DWORD PTR _vector$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _entry$[ebp]
	mov	eax, DWORD PTR [ecx+edx*8]
	jmp	SHORT $LN3@antlr3Vect@5
; Line 1239
	jmp	SHORT $LN3@antlr3Vect@5
$LN2@antlr3Vect@5:
; Line 1243
	xor	eax, eax
$LN3@antlr3Vect@5:
; Line 1245
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_antlr3VectorGet ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _antrl3VectorRemove
_TEXT	SEGMENT
_element$ = -8						; size = 4
_vector$ = 8						; size = 4
_entry$ = 12						; size = 4
_antrl3VectorRemove PROC				; COMDAT
; Line 1251
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1256
	mov	eax, DWORD PTR _vector$[ebp]
	mov	ecx, DWORD PTR _entry$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jb	SHORT $LN3@antrl3Vect
; Line 1258
	xor	eax, eax
	jmp	$LN4@antrl3Vect
$LN3@antrl3Vect:
; Line 1264
	mov	eax, DWORD PTR _vector$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _entry$[ebp]
	mov	eax, DWORD PTR [ecx+edx*8]
	mov	DWORD PTR _element$[ebp], eax
; Line 1266
	mov	eax, DWORD PTR _vector$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 1
	cmp	DWORD PTR _entry$[ebp], ecx
	jne	SHORT $LN2@antrl3Vect
; Line 1271
	mov	eax, DWORD PTR _vector$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _entry$[ebp]
	mov	DWORD PTR [ecx+edx*8], 0
; Line 1272
	mov	eax, DWORD PTR _vector$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _entry$[ebp]
	mov	DWORD PTR [ecx+edx*8+4], 0
; Line 1274
	jmp	SHORT $LN1@antrl3Vect
$LN2@antrl3Vect:
; Line 1278
	mov	eax, DWORD PTR _vector$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, DWORD PTR _entry$[ebp]
	lea	edx, DWORD PTR [ecx*8-8]
	mov	esi, esp
	push	edx
	mov	eax, DWORD PTR _vector$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _entry$[ebp]
	lea	eax, DWORD PTR [ecx+edx*8+8]
	push	eax
	mov	ecx, DWORD PTR _vector$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _entry$[ebp]
	lea	ecx, DWORD PTR [edx+eax*8]
	push	ecx
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@antrl3Vect:
; Line 1283
	mov	eax, DWORD PTR _vector$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 1
	mov	edx, DWORD PTR _vector$[ebp]
	mov	DWORD PTR [edx+4], ecx
; Line 1285
	mov	eax, DWORD PTR _element$[ebp]
$LN4@antrl3Vect:
; Line 1286
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_antrl3VectorRemove ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _antlr3VectorAdd
_TEXT	SEGMENT
_vector$ = 8						; size = 4
_element$ = 12						; size = 4
_freeptr$ = 16						; size = 4
_antlr3VectorAdd PROC					; COMDAT
; Line 1333
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1336
	mov	eax, DWORD PTR _vector$[ebp]
	mov	ecx, DWORD PTR _vector$[ebp]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+140]
	jne	SHORT $LN1@antlr3Vect@6
; Line 1338
	push	0
	mov	eax, DWORD PTR _vector$[ebp]
	push	eax
	call	_antlr3VectorResize
	add	esp, 8
$LN1@antlr3Vect@6:
; Line 1343
	mov	eax, DWORD PTR _vector$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _vector$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR _element$[ebp]
	mov	DWORD PTR [eax+ecx*8], edx
; Line 1344
	mov	eax, DWORD PTR _vector$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _vector$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR _freeptr$[ebp]
	mov	DWORD PTR [eax+ecx*8+4], edx
; Line 1346
	mov	eax, DWORD PTR _vector$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _vector$[ebp]
	mov	DWORD PTR [edx+4], ecx
; Line 1348
	mov	eax, DWORD PTR _vector$[ebp]
	mov	eax, DWORD PTR [eax+4]
; Line 1350
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_antlr3VectorAdd ENDP
_TEXT	ENDS
EXTRN	_memcpy:PROC
EXTRN	__imp__realloc:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _antlr3VectorResize
_TEXT	SEGMENT
_newSize$ = -8						; size = 4
_vector$ = 8						; size = 4
_hint$ = 12						; size = 4
_antlr3VectorResize PROC				; COMDAT
; Line 1290
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1296
	cmp	DWORD PTR _hint$[ebp], 0
	je	SHORT $LN4@antlr3Vect@7
	mov	eax, DWORD PTR _vector$[ebp]
	mov	ecx, DWORD PTR _hint$[ebp]
	cmp	ecx, DWORD PTR [eax+140]
	jae	SHORT $LN5@antlr3Vect@7
$LN4@antlr3Vect@7:
; Line 1298
	mov	eax, DWORD PTR _vector$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	shl	ecx, 1
	mov	DWORD PTR _newSize$[ebp], ecx
; Line 1300
	jmp	SHORT $LN3@antlr3Vect@7
$LN5@antlr3Vect@7:
; Line 1302
	mov	eax, DWORD PTR _hint$[ebp]
	shl	eax, 1
	mov	DWORD PTR _newSize$[ebp], eax
$LN3@antlr3Vect@7:
; Line 1308
	mov	eax, DWORD PTR _vector$[ebp]
	cmp	DWORD PTR [eax+140], 16			; 00000010H
	jbe	SHORT $LN2@antlr3Vect@7
; Line 1313
	mov	eax, DWORD PTR _newSize$[ebp]
	shl	eax, 3
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _vector$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	DWORD PTR __imp__realloc
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _vector$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 1315
	jmp	SHORT $LN1@antlr3Vect@7
$LN2@antlr3Vect@7:
; Line 1322
	mov	eax, DWORD PTR _newSize$[ebp]
	shl	eax, 3
	mov	esi, esp
	push	eax
	call	DWORD PTR __imp__malloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _vector$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 1323
	push	128					; 00000080H
	mov	eax, DWORD PTR _vector$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR _vector$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN1@antlr3Vect@7:
; Line 1326
	mov	eax, DWORD PTR _vector$[ebp]
	mov	ecx, DWORD PTR _newSize$[ebp]
	mov	DWORD PTR [eax+140], ecx
; Line 1327
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_antlr3VectorResize ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _antlr3VectorSet
_TEXT	SEGMENT
_vector$ = 8						; size = 4
_entry$ = 12						; size = 4
_element$ = 16						; size = 4
_freeptr$ = 20						; size = 4
_freeExisting$ = 24					; size = 1
_antlr3VectorSet PROC					; COMDAT
; Line 1357
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1361
	mov	eax, DWORD PTR _vector$[ebp]
	mov	ecx, DWORD PTR _entry$[ebp]
	cmp	ecx, DWORD PTR [eax+140]
	jb	SHORT $LN3@antlr3Vect@8
; Line 1363
	mov	eax, DWORD PTR _entry$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vector$[ebp]
	push	ecx
	call	_antlr3VectorResize
	add	esp, 8
$LN3@antlr3Vect@8:
; Line 1371
	mov	eax, DWORD PTR _vector$[ebp]
	mov	ecx, DWORD PTR _entry$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jae	SHORT $LN2@antlr3Vect@8
	movzx	eax, BYTE PTR _freeExisting$[ebp]
	test	eax, eax
	je	SHORT $LN2@antlr3Vect@8
	mov	eax, DWORD PTR _vector$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _entry$[ebp]
	cmp	DWORD PTR [ecx+edx*8+4], 0
	je	SHORT $LN2@antlr3Vect@8
; Line 1373
	mov	eax, DWORD PTR _vector$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR _entry$[ebp]
	mov	eax, DWORD PTR [ecx+edx*8]
	push	eax
	mov	ecx, DWORD PTR _vector$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _entry$[ebp]
	mov	ecx, DWORD PTR [edx+eax*8+4]
	call	ecx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@antlr3Vect@8:
; Line 1378
	mov	eax, DWORD PTR _vector$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _entry$[ebp]
	mov	eax, DWORD PTR _freeptr$[ebp]
	mov	DWORD PTR [ecx+edx*8+4], eax
; Line 1379
	mov	eax, DWORD PTR _vector$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _entry$[ebp]
	mov	eax, DWORD PTR _element$[ebp]
	mov	DWORD PTR [ecx+edx*8], eax
; Line 1381
	mov	eax, DWORD PTR _vector$[ebp]
	mov	ecx, DWORD PTR _entry$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jb	SHORT $LN1@antlr3Vect@8
; Line 1383
	mov	eax, DWORD PTR _entry$[ebp]
	add	eax, 1
	mov	ecx, DWORD PTR _vector$[ebp]
	mov	DWORD PTR [ecx+4], eax
$LN1@antlr3Vect@8:
; Line 1385
	mov	eax, DWORD PTR _entry$[ebp]
; Line 1387
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_antlr3VectorSet ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _antlr3VectorSwap
_TEXT	SEGMENT
_freeptr$ = -20						; size = 4
_tempEntry$ = -8					; size = 4
_vector$ = 8						; size = 4
_entry1$ = 12						; size = 4
_entry2$ = 16						; size = 4
_antlr3VectorSwap PROC					; COMDAT
; Line 1394
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1401
	mov	eax, DWORD PTR _vector$[ebp]
	mov	ecx, DWORD PTR _entry1$[ebp]
	cmp	ecx, DWORD PTR [eax+140]
	jae	SHORT $LN1@antlr3Vect@9
	mov	eax, DWORD PTR _vector$[ebp]
	mov	ecx, DWORD PTR _entry2$[ebp]
	cmp	ecx, DWORD PTR [eax+140]
	jb	SHORT $LN2@antlr3Vect@9
$LN1@antlr3Vect@9:
; Line 1403
	xor	al, al
	jmp	SHORT $LN3@antlr3Vect@9
$LN2@antlr3Vect@9:
; Line 1408
	mov	eax, DWORD PTR _vector$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _entry1$[ebp]
	mov	eax, DWORD PTR [ecx+edx*8]
	mov	DWORD PTR _tempEntry$[ebp], eax
; Line 1409
	mov	eax, DWORD PTR _vector$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _entry1$[ebp]
	mov	eax, DWORD PTR [ecx+edx*8+4]
	mov	DWORD PTR _freeptr$[ebp], eax
; Line 1413
	mov	eax, DWORD PTR _vector$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _vector$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR _entry1$[ebp]
	mov	esi, DWORD PTR _entry2$[ebp]
	mov	ecx, DWORD PTR [ecx+esi*8+4]
	mov	DWORD PTR [eax+edx*8+4], ecx
; Line 1414
	mov	eax, DWORD PTR _vector$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _vector$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR _entry1$[ebp]
	mov	esi, DWORD PTR _entry2$[ebp]
	mov	ecx, DWORD PTR [ecx+esi*8]
	mov	DWORD PTR [eax+edx*8], ecx
; Line 1416
	mov	eax, DWORD PTR _vector$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _entry2$[ebp]
	mov	eax, DWORD PTR _freeptr$[ebp]
	mov	DWORD PTR [ecx+edx*8+4], eax
; Line 1417
	mov	eax, DWORD PTR _vector$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _entry2$[ebp]
	mov	eax, DWORD PTR _tempEntry$[ebp]
	mov	DWORD PTR [ecx+edx*8], eax
; Line 1419
	mov	al, 1
$LN3@antlr3Vect@9:
; Line 1421
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_antlr3VectorSwap ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _antlr3VectorSize
_TEXT	SEGMENT
_vector$ = 8						; size = 4
_antlr3VectorSize PROC					; COMDAT
; Line 1424
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1425
	mov	eax, DWORD PTR _vector$[ebp]
	mov	eax, DWORD PTR [eax+4]
; Line 1426
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_antlr3VectorSize ENDP
_TEXT	ENDS
PUBLIC	_antlr3VectorFactoryNew
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _antlr3VectorFactoryNew
_TEXT	SEGMENT
_factory$ = -8						; size = 4
_sizeHint$ = 8						; size = 4
_antlr3VectorFactoryNew PROC				; COMDAT
; Line 1436
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1441
	mov	esi, esp
	push	208					; 000000d0H
	call	DWORD PTR __imp__malloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _factory$[ebp], eax
; Line 1443
	cmp	DWORD PTR _factory$[ebp], 0
	jne	SHORT $LN1@antlr3Vect@10
; Line 1445
	xor	eax, eax
	jmp	SHORT $LN2@antlr3Vect@10
$LN1@antlr3Vect@10:
; Line 1450
	mov	eax, DWORD PTR _factory$[ebp]
	mov	DWORD PTR [eax], 0
; Line 1451
	mov	eax, DWORD PTR _factory$[ebp]
	mov	DWORD PTR [eax+4], -1
; Line 1453
	mov	eax, DWORD PTR _factory$[ebp]
	push	eax
	call	_newPool
	add	esp, 4
; Line 1458
	push	16					; 00000010H
	mov	eax, DWORD PTR _factory$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	call	_antlr3SetVectorApi
	add	esp, 8
; Line 1460
	mov	eax, DWORD PTR _factory$[ebp]
	mov	BYTE PTR [eax+148], 1
; Line 1464
	mov	eax, DWORD PTR _factory$[ebp]
	mov	DWORD PTR [eax+196], OFFSET _closeVectorFactory
; Line 1465
	mov	eax, DWORD PTR _factory$[ebp]
	mov	DWORD PTR [eax+200], OFFSET _newVector
; Line 1466
	mov	eax, DWORD PTR _factory$[ebp]
	mov	DWORD PTR [eax+204], OFFSET _returnVector
; Line 1470
	push	16					; 00000010H
	call	_antlr3StackNew
	add	esp, 4
	mov	ecx, DWORD PTR _factory$[ebp]
	mov	DWORD PTR [ecx+192], eax
; Line 1471
	mov	eax, DWORD PTR _factory$[ebp]
$LN2@antlr3Vect@10:
; Line 1472
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_antlr3VectorFactoryNew ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _returnVector
_TEXT	SEGMENT
_factory$ = 8						; size = 4
_vector$ = 12						; size = 4
_returnVector PROC					; COMDAT
; Line 1479
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1482
	mov	esi, esp
	mov	eax, DWORD PTR _vector$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vector$[ebp]
	mov	edx, DWORD PTR [ecx+160]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1489
	mov	esi, esp
	push	0
	mov	eax, DWORD PTR _vector$[ebp]
	push	eax
	mov	ecx, DWORD PTR _factory$[ebp]
	mov	edx, DWORD PTR [ecx+192]
	push	edx
	mov	eax, DWORD PTR _factory$[ebp]
	mov	ecx, DWORD PTR [eax+192]
	mov	edx, DWORD PTR [ecx+20]
	call	edx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1492
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_returnVector ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _newPool
_TEXT	SEGMENT
_factory$ = 8						; size = 4
_newPool PROC						; COMDAT
; Line 1496
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1499
	mov	eax, DWORD PTR _factory$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _factory$[ebp]
	mov	DWORD PTR [edx+4], ecx
; Line 1506
	mov	eax, DWORD PTR _factory$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	lea	edx, DWORD PTR [ecx*4+4]
	mov	esi, esp
	push	edx
	mov	eax, DWORD PTR _factory$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	DWORD PTR __imp__realloc
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	edx, DWORD PTR _factory$[ebp]
	mov	DWORD PTR [edx], eax
; Line 1512
	mov	esi, esp
	push	46080					; 0000b400H
	call	DWORD PTR __imp__malloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _factory$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _factory$[ebp]
	mov	ecx, DWORD PTR [ecx]
	mov	DWORD PTR [ecx+edx*4], eax
; Line 1517
	mov	eax, DWORD PTR _factory$[ebp]
	mov	DWORD PTR [eax+8], 0
; Line 1522
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_newPool ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _closeVectorFactory
_TEXT	SEGMENT
tv94 = -256						; size = 4
tv78 = -256						; size = 4
_check$ = -56						; size = 4
_vector$ = -44						; size = 4
_limit$ = -32						; size = 4
_poolCount$ = -20					; size = 4
_pool$ = -8						; size = 4
_factory$ = 8						; size = 4
_closeVectorFactory PROC				; COMDAT
; Line 1526
	push	ebp
	mov	ebp, esp
	sub	esp, 256				; 00000100H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-256]
	mov	ecx, 64					; 00000040H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1535
	mov	eax, DWORD PTR _factory$[ebp]
	cmp	DWORD PTR [eax+192], 0
	je	SHORT $LN16@closeVecto
; Line 1537
	mov	esi, esp
	mov	eax, DWORD PTR _factory$[ebp]
	mov	ecx, DWORD PTR [eax+192]
	push	ecx
	mov	edx, DWORD PTR _factory$[ebp]
	mov	eax, DWORD PTR [edx+192]
	mov	ecx, DWORD PTR [eax+8]
	call	ecx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN16@closeVecto:
; Line 1542
	mov	DWORD PTR _poolCount$[ebp], 0
	jmp	SHORT $LN15@closeVecto
$LN14@closeVecto:
	mov	eax, DWORD PTR _poolCount$[ebp]
	add	eax, 1
	mov	DWORD PTR _poolCount$[ebp], eax
$LN15@closeVecto:
	mov	eax, DWORD PTR _factory$[ebp]
	mov	ecx, DWORD PTR _poolCount$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jg	$LN13@closeVecto
; Line 1546
	mov	eax, DWORD PTR _factory$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _poolCount$[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR _pool$[ebp], eax
; Line 1550
	mov	eax, DWORD PTR _factory$[ebp]
	mov	ecx, DWORD PTR _poolCount$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jne	SHORT $LN19@closeVecto
	mov	edx, DWORD PTR _factory$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR tv78[ebp], eax
	jmp	SHORT $LN20@closeVecto
$LN19@closeVecto:
	mov	DWORD PTR tv78[ebp], 256		; 00000100H
$LN20@closeVecto:
	mov	ecx, DWORD PTR tv78[ebp]
	mov	DWORD PTR _limit$[ebp], ecx
; Line 1555
	cmp	DWORD PTR _limit$[ebp], 0
	jbe	SHORT $LN12@closeVecto
; Line 1559
	mov	DWORD PTR _vector$[ebp], 0
	jmp	SHORT $LN11@closeVecto
$LN10@closeVecto:
	mov	eax, DWORD PTR _vector$[ebp]
	add	eax, 1
	mov	DWORD PTR _vector$[ebp], eax
$LN11@closeVecto:
	mov	eax, DWORD PTR _vector$[ebp]
	cmp	eax, DWORD PTR _limit$[ebp]
	jae	SHORT $LN12@closeVecto
; Line 1563
	mov	eax, DWORD PTR _vector$[ebp]
	imul	eax, 180				; 000000b4H
	add	eax, DWORD PTR _pool$[ebp]
	mov	DWORD PTR _check$[ebp], eax
; Line 1573
	mov	esi, esp
	mov	eax, DWORD PTR _check$[ebp]
	push	eax
	mov	ecx, DWORD PTR _check$[ebp]
	mov	edx, DWORD PTR [ecx+144]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1574
	jmp	SHORT $LN10@closeVecto
$LN12@closeVecto:
; Line 1576
	jmp	$LN14@closeVecto
$LN13@closeVecto:
; Line 1584
	mov	DWORD PTR _poolCount$[ebp], 0
	jmp	SHORT $LN8@closeVecto
$LN7@closeVecto:
	mov	eax, DWORD PTR _poolCount$[ebp]
	add	eax, 1
	mov	DWORD PTR _poolCount$[ebp], eax
$LN8@closeVecto:
	mov	eax, DWORD PTR _factory$[ebp]
	mov	ecx, DWORD PTR _poolCount$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jg	$LN6@closeVecto
; Line 1588
	mov	eax, DWORD PTR _factory$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _poolCount$[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR _pool$[ebp], eax
; Line 1592
	mov	eax, DWORD PTR _factory$[ebp]
	mov	ecx, DWORD PTR _poolCount$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jne	SHORT $LN21@closeVecto
	mov	edx, DWORD PTR _factory$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR tv94[ebp], eax
	jmp	SHORT $LN22@closeVecto
$LN21@closeVecto:
	mov	DWORD PTR tv94[ebp], 256		; 00000100H
$LN22@closeVecto:
	mov	ecx, DWORD PTR tv94[ebp]
	mov	DWORD PTR _limit$[ebp], ecx
; Line 1597
	cmp	DWORD PTR _limit$[ebp], 0
	jbe	SHORT $LN5@closeVecto
; Line 1601
	mov	DWORD PTR _vector$[ebp], 0
	jmp	SHORT $LN4@closeVecto
$LN3@closeVecto:
	mov	eax, DWORD PTR _vector$[ebp]
	add	eax, 1
	mov	DWORD PTR _vector$[ebp], eax
$LN4@closeVecto:
	mov	eax, DWORD PTR _vector$[ebp]
	cmp	eax, DWORD PTR _limit$[ebp]
	jae	SHORT $LN5@closeVecto
; Line 1605
	mov	eax, DWORD PTR _vector$[ebp]
	imul	eax, 180				; 000000b4H
	add	eax, DWORD PTR _pool$[ebp]
	mov	DWORD PTR _check$[ebp], eax
; Line 1611
	mov	eax, DWORD PTR _check$[ebp]
	movzx	ecx, BYTE PTR [eax+136]
	cmp	ecx, 1
	jne	SHORT $LN1@closeVecto
	mov	eax, DWORD PTR _check$[ebp]
	cmp	DWORD PTR [eax+140], 16			; 00000010H
	jbe	SHORT $LN1@closeVecto
; Line 1613
	mov	esi, esp
	mov	eax, DWORD PTR _check$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	DWORD PTR __imp__free
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1614
	mov	eax, DWORD PTR _check$[ebp]
	mov	DWORD PTR [eax], 0
$LN1@closeVecto:
; Line 1616
	jmp	SHORT $LN3@closeVecto
$LN5@closeVecto:
; Line 1622
	mov	eax, DWORD PTR _factory$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR _poolCount$[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	push	eax
	call	DWORD PTR __imp__free
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1623
	mov	eax, DWORD PTR _factory$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _poolCount$[ebp]
	mov	DWORD PTR [ecx+edx*4], 0
; Line 1624
	jmp	$LN7@closeVecto
$LN6@closeVecto:
; Line 1629
	mov	esi, esp
	mov	eax, DWORD PTR _factory$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	DWORD PTR __imp__free
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1633
	mov	esi, esp
	mov	eax, DWORD PTR _factory$[ebp]
	push	eax
	call	DWORD PTR __imp__free
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1635
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 256				; 00000100H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_closeVectorFactory ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _newVector
_TEXT	SEGMENT
_vector$ = -8						; size = 4
_factory$ = 8						; size = 4
_newVector PROC						; COMDAT
; Line 1639
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1644
	mov	esi, esp
	mov	eax, DWORD PTR _factory$[ebp]
	mov	ecx, DWORD PTR [eax+192]
	push	ecx
	mov	edx, DWORD PTR _factory$[ebp]
	mov	eax, DWORD PTR [edx+192]
	mov	ecx, DWORD PTR [eax+28]
	call	ecx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _vector$[ebp], eax
; Line 1646
	cmp	DWORD PTR _vector$[ebp], 0
	je	SHORT $LN2@newVector
; Line 1650
	mov	esi, esp
	mov	eax, DWORD PTR _factory$[ebp]
	mov	ecx, DWORD PTR [eax+192]
	push	ecx
	mov	edx, DWORD PTR _factory$[ebp]
	mov	eax, DWORD PTR [edx+192]
	mov	ecx, DWORD PTR [eax+12]
	call	ecx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1653
	mov	eax, DWORD PTR _vector$[ebp]
	jmp	SHORT $LN3@newVector
$LN2@newVector:
; Line 1660
	mov	eax, DWORD PTR _factory$[ebp]
	cmp	DWORD PTR [eax+8], 256			; 00000100H
	jb	SHORT $LN1@newVector
; Line 1664
	mov	eax, DWORD PTR _factory$[ebp]
	push	eax
	call	_newPool
	add	esp, 4
$LN1@newVector:
; Line 1670
	mov	eax, DWORD PTR _factory$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _factory$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR _factory$[ebp]
	mov	edx, DWORD PTR [edx+8]
	imul	edx, 180				; 000000b4H
	add	edx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR _vector$[ebp], edx
; Line 1671
	mov	eax, DWORD PTR _factory$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 1
	mov	edx, DWORD PTR _factory$[ebp]
	mov	DWORD PTR [edx+8], ecx
; Line 1675
	push	16					; 00000010H
	mov	eax, DWORD PTR _vector$[ebp]
	push	eax
	call	_antlr3SetVectorApi
	add	esp, 8
; Line 1676
	mov	eax, DWORD PTR _vector$[ebp]
	mov	BYTE PTR [eax+136], 1
; Line 1682
	mov	eax, DWORD PTR _vector$[ebp]
	add	eax, 8
	mov	ecx, DWORD PTR _vector$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 1688
	mov	eax, DWORD PTR _vector$[ebp]
$LN3@newVector:
; Line 1689
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_newVector ENDP
_TEXT	ENDS
PUBLIC	_antlr3IntTrieNew
EXTRN	__imp__calloc:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _antlr3IntTrieNew
_TEXT	SEGMENT
_trie$ = -8						; size = 4
_depth$ = 8						; size = 4
_antlr3IntTrieNew PROC					; COMDAT
; Line 1769
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1772
	mov	esi, esp
	push	32					; 00000020H
	push	1
	call	DWORD PTR __imp__calloc
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _trie$[ebp], eax
; Line 1774
	cmp	DWORD PTR _trie$[ebp], 0
	jne	SHORT $LN2@antlr3IntT
; Line 1776
	mov	eax, 1
	jmp	$LN3@antlr3IntT
$LN2@antlr3IntT:
; Line 1783
	mov	esi, esp
	push	32					; 00000020H
	push	1
	call	DWORD PTR __imp__calloc
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _trie$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 1785
	mov	eax, DWORD PTR _trie$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN1@antlr3IntT
; Line 1787
	mov	esi, esp
	mov	eax, DWORD PTR _trie$[ebp]
	push	eax
	call	DWORD PTR __imp__free
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1788
	mov	eax, 1
	jmp	SHORT $LN3@antlr3IntT
$LN1@antlr3IntT:
; Line 1791
	mov	eax, DWORD PTR _trie$[ebp]
	mov	DWORD PTR [eax+24], OFFSET _intTrieAdd
; Line 1792
	mov	eax, DWORD PTR _trie$[ebp]
	mov	DWORD PTR [eax+20], OFFSET _intTrieDel
; Line 1793
	mov	eax, DWORD PTR _trie$[ebp]
	mov	DWORD PTR [eax+28], OFFSET _intTrieFree
; Line 1794
	mov	eax, DWORD PTR _trie$[ebp]
	mov	DWORD PTR [eax+16], OFFSET _intTrieGet
; Line 1801
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _depth$[ebp]
	mov	DWORD PTR [ecx], edx
; Line 1806
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _trie$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx+12], eax
; Line 1807
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _trie$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx+16], eax
; Line 1808
	mov	eax, DWORD PTR _trie$[ebp]
	mov	DWORD PTR [eax+8], 0
; Line 1814
	mov	eax, DWORD PTR _trie$[ebp]
$LN3@antlr3IntT:
; Line 1815
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_antlr3IntTrieNew ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _intTrieGet
_TEXT	SEGMENT
tv95 = -224						; size = 8
_nextNode$ = -20					; size = 4
_thisNode$ = -8						; size = 4
_trie$ = 8						; size = 4
_key$ = 12						; size = 4
_intTrieGet PROC					; COMDAT
; Line 1822
	push	ebp
	mov	ebp, esp
	sub	esp, 224				; 000000e0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-224]
	mov	ecx, 56					; 00000038H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1826
	mov	eax, DWORD PTR _trie$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN7@intTrieGet
; Line 1828
	xor	eax, eax
	jmp	$LN8@intTrieGet
$LN7@intTrieGet:
; Line 1841
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _thisNode$[ebp], ecx
; Line 1842
	mov	eax, DWORD PTR _thisNode$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _nextNode$[ebp], ecx
$LN6@intTrieGet:
; Line 1846
	mov	eax, DWORD PTR _thisNode$[ebp]
	mov	ecx, DWORD PTR _nextNode$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jbe	SHORT $LN5@intTrieGet
; Line 1850
	mov	eax, DWORD PTR _nextNode$[ebp]
	mov	DWORD PTR _thisNode$[ebp], eax
; Line 1856
	mov	eax, DWORD PTR _key$[ebp]
	xor	ecx, ecx
	mov	edx, DWORD PTR _nextNode$[ebp]
	mov	edx, DWORD PTR [edx]
	and	eax, DWORD PTR _bitMask[edx*8]
	and	ecx, DWORD PTR _bitMask[edx*8+4]
	mov	DWORD PTR tv95[ebp], eax
	mov	DWORD PTR tv95[ebp+4], ecx
	mov	eax, DWORD PTR tv95[ebp]
	or	eax, DWORD PTR tv95[ebp+4]
	je	SHORT $LN4@intTrieGet
; Line 1858
	mov	eax, DWORD PTR _nextNode$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _nextNode$[ebp], ecx
; Line 1860
	jmp	SHORT $LN3@intTrieGet
$LN4@intTrieGet:
; Line 1862
	mov	eax, DWORD PTR _nextNode$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _nextNode$[ebp], ecx
$LN3@intTrieGet:
; Line 1864
	jmp	SHORT $LN6@intTrieGet
$LN5@intTrieGet:
; Line 1877
	mov	eax, DWORD PTR _nextNode$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cmp	ecx, DWORD PTR _key$[ebp]
	jne	SHORT $LN2@intTrieGet
; Line 1881
	mov	eax, DWORD PTR _nextNode$[ebp]
	mov	eax, DWORD PTR [eax+8]
	jmp	SHORT $LN8@intTrieGet
; Line 1883
	jmp	SHORT $LN8@intTrieGet
$LN2@intTrieGet:
; Line 1885
	xor	eax, eax
$LN8@intTrieGet:
; Line 1887
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_intTrieGet ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _intTrieDel
_TEXT	SEGMENT
_p$ = -8						; size = 4
_trie$ = 8						; size = 4
_key$ = 12						; size = 4
_intTrieDel PROC					; COMDAT
; Line 1892
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1895
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _p$[ebp], ecx
; Line 1896
	mov	eax, DWORD PTR _key$[ebp]
	mov	DWORD PTR _key$[ebp], eax
; Line 1898
	xor	al, al
; Line 1899
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_intTrieDel ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _intTrieAdd
_TEXT	SEGMENT
tv340 = -284						; size = 8
tv320 = -284						; size = 8
tv282 = -284						; size = 8
tv221 = -284						; size = 8
_xorKey$ = -80						; size = 4
_nextEnt$ = -68						; size = 4
_newEnt$ = -56						; size = 4
_depth$ = -44						; size = 4
_entNode$ = -32						; size = 4
_nextNode$ = -20					; size = 4
_thisNode$ = -8						; size = 4
_trie$ = 8						; size = 4
_key$ = 12						; size = 4
_type$ = 16						; size = 4
_intVal$ = 20						; size = 4
_data$ = 24						; size = 4
_freeptr$ = 28						; size = 4
_intTrieAdd PROC					; COMDAT
; Line 1914
	push	ebp
	mov	ebp, esp
	sub	esp, 284				; 0000011cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-284]
	mov	ecx, 71					; 00000047H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1926
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _depth$[ebp], edx
; Line 1928
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _thisNode$[ebp], ecx
; Line 1929
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _nextNode$[ebp], edx
$LN30@intTrieAdd:
; Line 1934
	mov	eax, DWORD PTR _thisNode$[ebp]
	mov	ecx, DWORD PTR _nextNode$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jbe	SHORT $LN29@intTrieAdd
; Line 1938
	mov	eax, DWORD PTR _nextNode$[ebp]
	mov	DWORD PTR _thisNode$[ebp], eax
; Line 1940
	mov	eax, DWORD PTR _key$[ebp]
	xor	ecx, ecx
	mov	edx, DWORD PTR _nextNode$[ebp]
	mov	edx, DWORD PTR [edx]
	and	eax, DWORD PTR _bitMask[edx*8]
	and	ecx, DWORD PTR _bitMask[edx*8+4]
	mov	DWORD PTR tv221[ebp], eax
	mov	DWORD PTR tv221[ebp+4], ecx
	mov	eax, DWORD PTR tv221[ebp]
	or	eax, DWORD PTR tv221[ebp+4]
	je	SHORT $LN28@intTrieAdd
; Line 1944
	mov	eax, DWORD PTR _nextNode$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _nextNode$[ebp], ecx
; Line 1946
	jmp	SHORT $LN27@intTrieAdd
$LN28@intTrieAdd:
; Line 1950
	mov	eax, DWORD PTR _nextNode$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _nextNode$[ebp], ecx
$LN27@intTrieAdd:
; Line 1952
	jmp	SHORT $LN30@intTrieAdd
$LN29@intTrieAdd:
; Line 1957
	mov	eax, DWORD PTR _nextNode$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cmp	ecx, DWORD PTR _key$[ebp]
	jne	$LN26@intTrieAdd
; Line 1962
	mov	eax, DWORD PTR _trie$[ebp]
	movzx	ecx, BYTE PTR [eax+12]
	cmp	ecx, 1
	jne	$LN25@intTrieAdd
; Line 1966
	mov	esi, esp
	push	16					; 00000010H
	push	1
	call	DWORD PTR __imp__calloc
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _newEnt$[ebp], eax
; Line 1968
	cmp	DWORD PTR _newEnt$[ebp], 0
	jne	SHORT $LN24@intTrieAdd
; Line 1972
	xor	al, al
	jmp	$LN31@intTrieAdd
$LN24@intTrieAdd:
; Line 1977
	mov	eax, DWORD PTR _newEnt$[ebp]
	mov	ecx, DWORD PTR _type$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 1978
	mov	eax, DWORD PTR _newEnt$[ebp]
	mov	ecx, DWORD PTR _freeptr$[ebp]
	mov	DWORD PTR [eax+4], ecx
; Line 1979
	cmp	DWORD PTR _type$[ebp], 1
	jne	SHORT $LN23@intTrieAdd
; Line 1981
	mov	eax, DWORD PTR _newEnt$[ebp]
	mov	ecx, DWORD PTR _data$[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 1983
	jmp	SHORT $LN22@intTrieAdd
$LN23@intTrieAdd:
; Line 1985
	mov	eax, DWORD PTR _newEnt$[ebp]
	mov	ecx, DWORD PTR _intVal$[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN22@intTrieAdd:
; Line 1992
	mov	eax, DWORD PTR _nextNode$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _nextEnt$[ebp], ecx
$LN21@intTrieAdd:
; Line 1993
	mov	eax, DWORD PTR _nextEnt$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN20@intTrieAdd
; Line 1995
	mov	eax, DWORD PTR _nextEnt$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _nextEnt$[ebp], ecx
; Line 1996
	jmp	SHORT $LN21@intTrieAdd
$LN20@intTrieAdd:
; Line 1997
	mov	eax, DWORD PTR _nextEnt$[ebp]
	mov	ecx, DWORD PTR _newEnt$[ebp]
	mov	DWORD PTR [eax+12], ecx
; Line 1999
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 1
	mov	edx, DWORD PTR _trie$[ebp]
	mov	DWORD PTR [edx+8], ecx
; Line 2000
	mov	al, 1
	jmp	$LN31@intTrieAdd
; Line 2002
	jmp	SHORT $LN26@intTrieAdd
$LN25@intTrieAdd:
; Line 2007
	xor	al, al
	jmp	$LN31@intTrieAdd
$LN26@intTrieAdd:
; Line 2017
	mov	eax, DWORD PTR _nextNode$[ebp]
	mov	ecx, DWORD PTR _key$[ebp]
	xor	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _xorKey$[ebp], ecx
; Line 2050
	mov	eax, DWORD PTR _xorKey$[ebp]
	and	eax, -65536				; ffff0000H
	je	SHORT $LN18@intTrieAdd
; Line 2052
	mov	eax, DWORD PTR _xorKey$[ebp]
	and	eax, -16777216				; ff000000H
	je	SHORT $LN17@intTrieAdd
; Line 2054
	mov	eax, DWORD PTR _xorKey$[ebp]
	and	eax, -16777216				; ff000000H
	shr	eax, 24					; 00000018H
	movzx	ecx, BYTE PTR _bitIndex[eax]
	add	ecx, 24					; 00000018H
	mov	DWORD PTR _depth$[ebp], ecx
; Line 2056
	jmp	SHORT $LN16@intTrieAdd
$LN17@intTrieAdd:
; Line 2058
	mov	eax, DWORD PTR _xorKey$[ebp]
	and	eax, 16711680				; 00ff0000H
	shr	eax, 16					; 00000010H
	movzx	ecx, BYTE PTR _bitIndex[eax]
	add	ecx, 16					; 00000010H
	mov	DWORD PTR _depth$[ebp], ecx
$LN16@intTrieAdd:
; Line 2061
	jmp	SHORT $LN15@intTrieAdd
$LN18@intTrieAdd:
; Line 2063
	mov	eax, DWORD PTR _xorKey$[ebp]
	and	eax, 65280				; 0000ff00H
	je	SHORT $LN14@intTrieAdd
; Line 2065
	mov	eax, DWORD PTR _xorKey$[ebp]
	and	eax, 65280				; 0000ff00H
	shr	eax, 8
	movzx	ecx, BYTE PTR _bitIndex[eax]
	add	ecx, 8
	mov	DWORD PTR _depth$[ebp], ecx
; Line 2067
	jmp	SHORT $LN15@intTrieAdd
$LN14@intTrieAdd:
; Line 2069
	mov	eax, DWORD PTR _xorKey$[ebp]
	and	eax, 255				; 000000ffH
	movzx	ecx, BYTE PTR _bitIndex[eax]
	mov	DWORD PTR _depth$[ebp], ecx
$LN15@intTrieAdd:
; Line 2085
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _thisNode$[ebp], ecx
; Line 2086
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _entNode$[ebp], edx
$LN12@intTrieAdd:
; Line 2090
	mov	eax, DWORD PTR _thisNode$[ebp]
	mov	ecx, DWORD PTR _entNode$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jbe	SHORT $LN11@intTrieAdd
	mov	eax, DWORD PTR _entNode$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR _depth$[ebp]
	jbe	SHORT $LN11@intTrieAdd
; Line 2094
	mov	eax, DWORD PTR _entNode$[ebp]
	mov	DWORD PTR _thisNode$[ebp], eax
; Line 2096
	mov	eax, DWORD PTR _key$[ebp]
	xor	ecx, ecx
	mov	edx, DWORD PTR _entNode$[ebp]
	mov	edx, DWORD PTR [edx]
	and	eax, DWORD PTR _bitMask[edx*8]
	and	ecx, DWORD PTR _bitMask[edx*8+4]
	mov	DWORD PTR tv282[ebp], eax
	mov	DWORD PTR tv282[ebp+4], ecx
	mov	eax, DWORD PTR tv282[ebp]
	or	eax, DWORD PTR tv282[ebp+4]
	je	SHORT $LN10@intTrieAdd
; Line 2100
	mov	eax, DWORD PTR _entNode$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _entNode$[ebp], ecx
; Line 2102
	jmp	SHORT $LN9@intTrieAdd
$LN10@intTrieAdd:
; Line 2106
	mov	eax, DWORD PTR _entNode$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _entNode$[ebp], ecx
$LN9@intTrieAdd:
; Line 2108
	jmp	SHORT $LN12@intTrieAdd
$LN11@intTrieAdd:
; Line 2113
	mov	esi, esp
	push	20					; 00000014H
	push	1
	call	DWORD PTR __imp__calloc
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _nextNode$[ebp], eax
; Line 2114
	cmp	DWORD PTR _nextNode$[ebp], 0
	jne	SHORT $LN8@intTrieAdd
; Line 2118
	xor	al, al
	jmp	$LN31@intTrieAdd
$LN8@intTrieAdd:
; Line 2123
	mov	esi, esp
	push	16					; 00000010H
	push	1
	call	DWORD PTR __imp__calloc
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _newEnt$[ebp], eax
; Line 2125
	cmp	DWORD PTR _newEnt$[ebp], 0
	jne	SHORT $LN7@intTrieAdd
; Line 2129
	xor	al, al
	jmp	$LN31@intTrieAdd
$LN7@intTrieAdd:
; Line 2134
	mov	eax, DWORD PTR _newEnt$[ebp]
	mov	ecx, DWORD PTR _type$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 2135
	mov	eax, DWORD PTR _newEnt$[ebp]
	mov	ecx, DWORD PTR _freeptr$[ebp]
	mov	DWORD PTR [eax+4], ecx
; Line 2136
	cmp	DWORD PTR _type$[ebp], 1
	jne	SHORT $LN6@intTrieAdd
; Line 2138
	mov	eax, DWORD PTR _newEnt$[ebp]
	mov	ecx, DWORD PTR _data$[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 2140
	jmp	SHORT $LN5@intTrieAdd
$LN6@intTrieAdd:
; Line 2142
	mov	eax, DWORD PTR _newEnt$[ebp]
	mov	ecx, DWORD PTR _intVal$[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN5@intTrieAdd:
; Line 2146
	mov	eax, DWORD PTR _nextNode$[ebp]
	mov	ecx, DWORD PTR _newEnt$[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 2147
	mov	eax, DWORD PTR _nextNode$[ebp]
	mov	ecx, DWORD PTR _key$[ebp]
	mov	DWORD PTR [eax+4], ecx
; Line 2148
	mov	eax, DWORD PTR _nextNode$[ebp]
	mov	ecx, DWORD PTR _depth$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 2154
	mov	eax, DWORD PTR _key$[ebp]
	xor	ecx, ecx
	mov	edx, DWORD PTR _depth$[ebp]
	and	eax, DWORD PTR _bitMask[edx*8]
	and	ecx, DWORD PTR _bitMask[edx*8+4]
	mov	DWORD PTR tv320[ebp], eax
	mov	DWORD PTR tv320[ebp+4], ecx
	mov	eax, DWORD PTR tv320[ebp]
	or	eax, DWORD PTR tv320[ebp+4]
	je	SHORT $LN4@intTrieAdd
; Line 2156
	mov	eax, DWORD PTR _nextNode$[ebp]
	mov	ecx, DWORD PTR _entNode$[ebp]
	mov	DWORD PTR [eax+12], ecx
; Line 2157
	mov	eax, DWORD PTR _nextNode$[ebp]
	mov	ecx, DWORD PTR _nextNode$[ebp]
	mov	DWORD PTR [eax+16], ecx
; Line 2159
	jmp	SHORT $LN3@intTrieAdd
$LN4@intTrieAdd:
; Line 2161
	mov	eax, DWORD PTR _nextNode$[ebp]
	mov	ecx, DWORD PTR _entNode$[ebp]
	mov	DWORD PTR [eax+16], ecx
; Line 2162
	mov	eax, DWORD PTR _nextNode$[ebp]
	mov	ecx, DWORD PTR _nextNode$[ebp]
	mov	DWORD PTR [eax+12], ecx
$LN3@intTrieAdd:
; Line 2170
	mov	eax, DWORD PTR _key$[ebp]
	xor	ecx, ecx
	mov	edx, DWORD PTR _thisNode$[ebp]
	mov	edx, DWORD PTR [edx]
	and	eax, DWORD PTR _bitMask[edx*8]
	and	ecx, DWORD PTR _bitMask[edx*8+4]
	mov	DWORD PTR tv340[ebp], eax
	mov	DWORD PTR tv340[ebp+4], ecx
	mov	eax, DWORD PTR tv340[ebp]
	or	eax, DWORD PTR tv340[ebp+4]
	je	SHORT $LN2@intTrieAdd
; Line 2172
	mov	eax, DWORD PTR _thisNode$[ebp]
	mov	ecx, DWORD PTR _nextNode$[ebp]
	mov	DWORD PTR [eax+16], ecx
; Line 2174
	jmp	SHORT $LN1@intTrieAdd
$LN2@intTrieAdd:
; Line 2176
	mov	eax, DWORD PTR _thisNode$[ebp]
	mov	ecx, DWORD PTR _nextNode$[ebp]
	mov	DWORD PTR [eax+12], ecx
$LN1@intTrieAdd:
; Line 2181
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 1
	mov	edx, DWORD PTR _trie$[ebp]
	mov	DWORD PTR [edx+8], ecx
; Line 2182
	mov	al, 1
$LN31@intTrieAdd:
; Line 2184
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 284				; 0000011cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_intTrieAdd ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _intTrieFree
_TEXT	SEGMENT
_trie$ = 8						; size = 4
_intTrieFree PROC					; COMDAT
; Line 2250
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2253
	mov	eax, DWORD PTR _trie$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_freeIntNode
	add	esp, 4
; Line 2258
	mov	esi, esp
	mov	eax, DWORD PTR _trie$[ebp]
	push	eax
	call	DWORD PTR __imp__free
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2259
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_intTrieFree ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _freeIntNode
_TEXT	SEGMENT
_nextEntry$ = -20					; size = 4
_thisEntry$ = -8					; size = 4
_node$ = 8						; size = 4
_freeIntNode PROC					; COMDAT
; Line 2191
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2198
	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _node$[ebp]
	mov	eax, DWORD PTR [edx]
	cmp	eax, DWORD PTR [ecx]
	jbe	SHORT $LN5@freeIntNod
; Line 2202
	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	_freeIntNode
	add	esp, 4
$LN5@freeIntNod:
; Line 2208
	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _node$[ebp]
	mov	eax, DWORD PTR [edx]
	cmp	eax, DWORD PTR [ecx]
	jbe	SHORT $LN4@freeIntNod
; Line 2212
	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	call	_freeIntNode
	add	esp, 4
$LN4@freeIntNod:
; Line 2218
	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _thisEntry$[ebp], ecx
$LN3@freeIntNod:
; Line 2220
	cmp	DWORD PTR _thisEntry$[ebp], 0
	je	SHORT $LN2@freeIntNod
; Line 2222
	mov	eax, DWORD PTR _thisEntry$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _nextEntry$[ebp], ecx
; Line 2226
	mov	eax, DWORD PTR _thisEntry$[ebp]
	cmp	DWORD PTR [eax], 1
	jne	SHORT $LN1@freeIntNod
	mov	eax, DWORD PTR _thisEntry$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN1@freeIntNod
; Line 2228
	mov	esi, esp
	mov	eax, DWORD PTR _thisEntry$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _thisEntry$[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@freeIntNod:
; Line 2233
	mov	esi, esp
	mov	eax, DWORD PTR _thisEntry$[ebp]
	push	eax
	call	DWORD PTR __imp__free
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2234
	mov	eax, DWORD PTR _nextEntry$[ebp]
	mov	DWORD PTR _thisEntry$[ebp], eax
; Line 2235
	jmp	SHORT $LN3@freeIntNod
$LN2@freeIntNod:
; Line 2240
	mov	esi, esp
	mov	eax, DWORD PTR _node$[ebp]
	push	eax
	call	DWORD PTR __imp__free
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2244
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_freeIntNode ENDP
_TEXT	ENDS
PUBLIC	_antlr3TopoNew
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _antlr3TopoNew
_TEXT	SEGMENT
_topo$ = -8						; size = 4
_antlr3TopoNew PROC					; COMDAT
; Line 2285
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2286
	mov	esi, esp
	push	44					; 0000002cH
	call	DWORD PTR __imp__malloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _topo$[ebp], eax
; Line 2288
	cmp	DWORD PTR _topo$[ebp], 0
	jne	SHORT $LN1@antlr3Topo
; Line 2290
	xor	eax, eax
	jmp	SHORT $LN2@antlr3Topo
$LN1@antlr3Topo:
; Line 2296
	mov	eax, DWORD PTR _topo$[ebp]
	mov	DWORD PTR [eax+24], 0
; Line 2297
	mov	eax, DWORD PTR _topo$[ebp]
	mov	DWORD PTR [eax+20], 1
; Line 2298
	mov	eax, DWORD PTR _topo$[ebp]
	mov	DWORD PTR [eax], 0
; Line 2299
	mov	eax, DWORD PTR _topo$[ebp]
	mov	DWORD PTR [eax+4], 0
; Line 2300
	mov	eax, DWORD PTR _topo$[ebp]
	mov	DWORD PTR [eax+8], 0
; Line 2301
	mov	eax, DWORD PTR _topo$[ebp]
	mov	DWORD PTR [eax+16], 0
; Line 2302
	mov	eax, DWORD PTR _topo$[ebp]
	mov	BYTE PTR [eax+12], 0
; Line 2306
	mov	eax, DWORD PTR _topo$[ebp]
	mov	DWORD PTR [eax+28], OFFSET _addEdge
; Line 2307
	mov	eax, DWORD PTR _topo$[ebp]
	mov	DWORD PTR [eax+32], OFFSET _sortToArray
; Line 2308
	mov	eax, DWORD PTR _topo$[ebp]
	mov	DWORD PTR [eax+36], OFFSET _sortVector
; Line 2309
	mov	eax, DWORD PTR _topo$[ebp]
	mov	DWORD PTR [eax+40], OFFSET _freeTopo
; Line 2311
	mov	eax, DWORD PTR _topo$[ebp]
$LN2@antlr3Topo:
; Line 2312
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_antlr3TopoNew ENDP
_TEXT	ENDS
EXTRN	_antlr3BitsetNew:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _addEdge
_TEXT	SEGMENT
_edgeDeps$ = -32					; size = 4
_maxEdge$ = -20						; size = 4
_i$ = -8						; size = 4
_topo$ = 8						; size = 4
_edge$ = 12						; size = 4
_dependency$ = 16					; size = 4
_addEdge PROC						; COMDAT
; Line 2317
	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2322
	mov	eax, DWORD PTR _edge$[ebp]
	cmp	eax, DWORD PTR _dependency$[ebp]
	jbe	SHORT $LN13@addEdge
; Line 2324
	mov	eax, DWORD PTR _edge$[ebp]
	mov	DWORD PTR _maxEdge$[ebp], eax
; Line 2326
	jmp	SHORT $LN12@addEdge
$LN13@addEdge:
; Line 2328
	mov	eax, DWORD PTR _dependency$[ebp]
	mov	DWORD PTR _maxEdge$[ebp], eax
$LN12@addEdge:
; Line 2336
	mov	eax, DWORD PTR _topo$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN11@addEdge
; Line 2340
	mov	esi, esp
	push	1
	mov	eax, DWORD PTR _maxEdge$[ebp]
	lea	ecx, DWORD PTR [eax*4+4]
	push	ecx
	call	DWORD PTR __imp__calloc
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	edx, DWORD PTR _topo$[ebp]
	mov	DWORD PTR [edx], eax
; Line 2341
	mov	eax, DWORD PTR _topo$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN10@addEdge
; Line 2343
	jmp	$LN14@addEdge
$LN10@addEdge:
; Line 2348
	mov	eax, DWORD PTR _maxEdge$[ebp]
	add	eax, 1
	mov	ecx, DWORD PTR _topo$[ebp]
	mov	DWORD PTR [ecx+20], eax
	jmp	SHORT $LN9@addEdge
$LN11@addEdge:
; Line 2350
	mov	eax, DWORD PTR _topo$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	ecx, DWORD PTR _maxEdge$[ebp]
	ja	SHORT $LN9@addEdge
; Line 2354
	mov	eax, DWORD PTR _maxEdge$[ebp]
	lea	ecx, DWORD PTR [eax*4+4]
	mov	esi, esp
	push	ecx
	mov	edx, DWORD PTR _topo$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	DWORD PTR __imp__realloc
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _topo$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 2355
	mov	eax, DWORD PTR _topo$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN7@addEdge
; Line 2357
	jmp	$LN14@addEdge
$LN7@addEdge:
; Line 2362
	mov	eax, DWORD PTR _topo$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _i$[ebp], ecx
	jmp	SHORT $LN6@addEdge
$LN5@addEdge:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN6@addEdge:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _maxEdge$[ebp]
	ja	SHORT $LN4@addEdge
; Line 2364
	mov	eax, DWORD PTR _topo$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [ecx+edx*4], 0
; Line 2365
	jmp	SHORT $LN5@addEdge
$LN4@addEdge:
; Line 2369
	mov	eax, DWORD PTR _maxEdge$[ebp]
	add	eax, 1
	mov	ecx, DWORD PTR _topo$[ebp]
	mov	DWORD PTR [ecx+20], eax
$LN9@addEdge:
; Line 2376
	mov	eax, DWORD PTR _edge$[ebp]
	cmp	eax, DWORD PTR _dependency$[ebp]
	jne	SHORT $LN3@addEdge
; Line 2378
	jmp	SHORT $LN14@addEdge
$LN3@addEdge:
; Line 2383
	mov	eax, DWORD PTR _topo$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _edge$[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR _edgeDeps$[ebp], eax
; Line 2385
	cmp	DWORD PTR _edgeDeps$[ebp], 0
	jne	SHORT $LN2@addEdge
; Line 2389
	push	0
	call	_antlr3BitsetNew
	add	esp, 4
	mov	DWORD PTR _edgeDeps$[ebp], eax
; Line 2390
	mov	eax, DWORD PTR _topo$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _edge$[ebp]
	mov	eax, DWORD PTR _edgeDeps$[ebp]
	mov	DWORD PTR [ecx+edx*4], eax
; Line 2391
	cmp	DWORD PTR _edgeDeps$[ebp], 0
	jne	SHORT $LN2@addEdge
; Line 2393
	jmp	SHORT $LN14@addEdge
$LN2@addEdge:
; Line 2400
	mov	esi, esp
	mov	eax, DWORD PTR _dependency$[ebp]
	push	eax
	mov	ecx, DWORD PTR _edgeDeps$[ebp]
	push	ecx
	mov	edx, DWORD PTR _edgeDeps$[ebp]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN14@addEdge:
; Line 2405
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_addEdge ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _sortToArray
_TEXT	SEGMENT
_oldLimit$ = -20					; size = 4
_v$ = -8						; size = 4
_topo$ = 8						; size = 4
_sortToArray PROC					; COMDAT
; Line 2524
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2530
	mov	eax, DWORD PTR _topo$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN6@sortToArra
; Line 2532
	xor	eax, eax
	jmp	$LN7@sortToArra
$LN6@sortToArra:
; Line 2538
	mov	eax, DWORD PTR _topo$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	shl	ecx, 2
	mov	esi, esp
	push	ecx
	call	DWORD PTR __imp__malloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	edx, DWORD PTR _topo$[ebp]
	mov	DWORD PTR [edx+4], eax
; Line 2539
	mov	eax, DWORD PTR _topo$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	shl	ecx, 2
	mov	esi, esp
	push	ecx
	call	DWORD PTR __imp__malloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	edx, DWORD PTR _topo$[ebp]
	mov	DWORD PTR [edx+8], eax
; Line 2547
	push	0
	call	_antlr3BitsetNew
	add	esp, 4
	mov	ecx, DWORD PTR _topo$[ebp]
	mov	DWORD PTR [ecx+24], eax
; Line 2552
	mov	eax, DWORD PTR _topo$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _oldLimit$[ebp], ecx
; Line 2553
	mov	eax, DWORD PTR _topo$[ebp]
	mov	DWORD PTR [eax+20], 0
; Line 2555
	mov	DWORD PTR _v$[ebp], 0
	jmp	SHORT $LN5@sortToArra
$LN4@sortToArra:
	mov	eax, DWORD PTR _v$[ebp]
	add	eax, 1
	mov	DWORD PTR _v$[ebp], eax
$LN5@sortToArra:
	mov	eax, DWORD PTR _v$[ebp]
	cmp	eax, DWORD PTR _oldLimit$[ebp]
	jae	SHORT $LN3@sortToArra
; Line 2560
	mov	esi, esp
	mov	eax, DWORD PTR _v$[ebp]
	push	eax
	mov	ecx, DWORD PTR _topo$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	mov	eax, DWORD PTR _topo$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx+36]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN2@sortToArra
; Line 2564
	mov	eax, DWORD PTR _v$[ebp]
	push	eax
	mov	ecx, DWORD PTR _topo$[ebp]
	push	ecx
	call	_DFS
	add	esp, 8
$LN2@sortToArra:
; Line 2570
	mov	eax, DWORD PTR _topo$[ebp]
	movzx	ecx, BYTE PTR [eax+12]
	cmp	ecx, 1
	jne	SHORT $LN1@sortToArra
; Line 2572
	jmp	SHORT $LN3@sortToArra
$LN1@sortToArra:
; Line 2574
	jmp	SHORT $LN4@sortToArra
$LN3@sortToArra:
; Line 2581
	mov	eax, DWORD PTR _topo$[ebp]
	mov	ecx, DWORD PTR _oldLimit$[ebp]
	mov	DWORD PTR [eax+20], ecx
; Line 2587
	mov	eax, DWORD PTR _topo$[ebp]
	mov	eax, DWORD PTR [eax+4]
$LN7@sortToArra:
; Line 2588
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_sortToArray ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _DFS
_TEXT	SEGMENT
_range$37070 = -68					; size = 4
_i$37069 = -56						; size = 4
_numBits$37068 = -44					; size = 4
_l$37062 = -32						; size = 4
_i$37057 = -20						; size = 4
_edges$ = -8						; size = 4
_topo$ = 8						; size = 4
_node$ = 12						; size = 4
_DFS	PROC						; COMDAT
; Line 2416
	push	ebp
	mov	ebp, esp
	sub	esp, 264				; 00000108H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-264]
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2421
	mov	eax, DWORD PTR _topo$[ebp]
	movzx	ecx, BYTE PTR [eax+12]
	cmp	ecx, 1
	jne	SHORT $LN15@DFS
; Line 2423
	jmp	$LN16@DFS
$LN15@DFS:
; Line 2426
	mov	esi, esp
	mov	eax, DWORD PTR _node$[ebp]
	push	eax
	mov	ecx, DWORD PTR _topo$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	mov	eax, DWORD PTR _topo$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx+36]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	movzx	eax, al
	test	eax, eax
	je	$LN14@DFS
; Line 2433
	mov	DWORD PTR _i$37057[ebp], 0
	jmp	SHORT $LN13@DFS
$LN12@DFS:
	mov	eax, DWORD PTR _i$37057[ebp]
	add	eax, 1
	mov	DWORD PTR _i$37057[ebp], eax
$LN13@DFS:
	mov	eax, DWORD PTR _topo$[ebp]
	mov	ecx, DWORD PTR _i$37057[ebp]
	cmp	ecx, DWORD PTR [eax+16]
	jae	SHORT $LN11@DFS
; Line 2435
	mov	eax, DWORD PTR _topo$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _i$37057[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	cmp	eax, DWORD PTR _node$[ebp]
	jne	SHORT $LN10@DFS
; Line 2443
	mov	eax, DWORD PTR _i$37057[ebp]
	mov	DWORD PTR _l$37062[ebp], eax
	jmp	SHORT $LN9@DFS
$LN8@DFS:
	mov	eax, DWORD PTR _l$37062[ebp]
	add	eax, 1
	mov	DWORD PTR _l$37062[ebp], eax
$LN9@DFS:
	mov	eax, DWORD PTR _topo$[ebp]
	mov	ecx, DWORD PTR _l$37062[ebp]
	cmp	ecx, DWORD PTR [eax+16]
	jae	SHORT $LN7@DFS
; Line 2445
	mov	eax, DWORD PTR _topo$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _l$37062[ebp]
	sub	edx, DWORD PTR _i$37057[ebp]
	mov	eax, DWORD PTR _topo$[ebp]
	mov	eax, DWORD PTR [eax+8]
	mov	esi, DWORD PTR _l$37062[ebp]
	mov	ecx, DWORD PTR [ecx+esi*4]
	mov	DWORD PTR [eax+edx*4], ecx
; Line 2446
	jmp	SHORT $LN8@DFS
$LN7@DFS:
; Line 2450
	mov	eax, DWORD PTR _topo$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	sub	ecx, DWORD PTR _i$37057[ebp]
	mov	edx, DWORD PTR _topo$[ebp]
	mov	DWORD PTR [edx+16], ecx
; Line 2454
	mov	eax, DWORD PTR _topo$[ebp]
	mov	BYTE PTR [eax+12], 1
$LN10@DFS:
; Line 2456
	jmp	SHORT $LN12@DFS
$LN11@DFS:
; Line 2457
	jmp	$LN16@DFS
$LN14@DFS:
; Line 2465
	mov	eax, DWORD PTR _topo$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _topo$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	edx, DWORD PTR _node$[ebp]
	mov	DWORD PTR [eax+ecx*4], edx
	mov	eax, DWORD PTR _topo$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	add	ecx, 1
	mov	edx, DWORD PTR _topo$[ebp]
	mov	DWORD PTR [edx+16], ecx
; Line 2469
	mov	esi, esp
	mov	eax, DWORD PTR _node$[ebp]
	push	eax
	mov	ecx, DWORD PTR _topo$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	mov	eax, DWORD PTR _topo$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx+24]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2475
	mov	eax, DWORD PTR _topo$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _node$[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR _edges$[ebp], eax
; Line 2476
	cmp	DWORD PTR _edges$[ebp], 0
	je	$LN6@DFS
; Line 2485
	mov	esi, esp
	mov	eax, DWORD PTR _edges$[ebp]
	push	eax
	mov	ecx, DWORD PTR _edges$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _numBits$37068[ebp], eax
; Line 2486
	mov	esi, esp
	mov	eax, DWORD PTR _edges$[ebp]
	push	eax
	mov	ecx, DWORD PTR _edges$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _range$37070[ebp], eax
; Line 2492
	mov	DWORD PTR _i$37069[ebp], 0
	jmp	SHORT $LN5@DFS
$LN4@DFS:
	mov	eax, DWORD PTR _i$37069[ebp]
	add	eax, 1
	mov	DWORD PTR _i$37069[ebp], eax
$LN5@DFS:
	mov	eax, DWORD PTR _i$37069[ebp]
	cmp	eax, DWORD PTR _numBits$37068[ebp]
	ja	SHORT $LN6@DFS
	cmp	DWORD PTR _range$37070[ebp], 0
	jbe	SHORT $LN6@DFS
; Line 2494
	mov	esi, esp
	mov	eax, DWORD PTR _i$37069[ebp]
	push	eax
	mov	ecx, DWORD PTR _edges$[ebp]
	push	ecx
	mov	edx, DWORD PTR _edges$[ebp]
	mov	eax, DWORD PTR [edx+36]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@DFS
; Line 2496
	mov	eax, DWORD PTR _range$37070[ebp]
	sub	eax, 1
	mov	DWORD PTR _range$37070[ebp], eax
; Line 2500
	mov	eax, DWORD PTR _i$37069[ebp]
	push	eax
	mov	ecx, DWORD PTR _topo$[ebp]
	push	ecx
	call	_DFS
	add	esp, 8
$LN2@DFS:
; Line 2502
	jmp	SHORT $LN4@DFS
$LN6@DFS:
; Line 2510
	mov	eax, DWORD PTR _topo$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _topo$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	edx, DWORD PTR _node$[ebp]
	mov	DWORD PTR [eax+ecx*4], edx
	mov	eax, DWORD PTR _topo$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	mov	edx, DWORD PTR _topo$[ebp]
	mov	DWORD PTR [edx+20], ecx
; Line 2514
	mov	eax, DWORD PTR _topo$[ebp]
	movzx	ecx, BYTE PTR [eax+12]
	test	ecx, ecx
	jne	SHORT $LN16@DFS
; Line 2516
	mov	eax, DWORD PTR _topo$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	sub	ecx, 1
	mov	edx, DWORD PTR _topo$[ebp]
	mov	DWORD PTR [edx+16], ecx
$LN16@DFS:
; Line 2520
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 264				; 00000108H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_DFS	ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _sortVector
_TEXT	SEGMENT
_ind$37110 = -32					; size = 4
_vIndex$ = -20						; size = 4
_i$ = -8						; size = 4
_topo$ = 8						; size = 4
_v$ = 12						; size = 4
_sortVector PROC					; COMDAT
; Line 2592
	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2613
	mov	esi, esp
	mov	eax, DWORD PTR _topo$[ebp]
	push	eax
	mov	ecx, DWORD PTR _topo$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN10@sortVector
; Line 2615
	jmp	$LN11@sortVector
$LN10@sortVector:
; Line 2618
	mov	eax, DWORD PTR _topo$[ebp]
	movzx	ecx, BYTE PTR [eax+12]
	cmp	ecx, 1
	jne	SHORT $LN9@sortVector
; Line 2620
	jmp	$LN11@sortVector
$LN9@sortVector:
; Line 2628
	mov	eax, DWORD PTR _topo$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [eax+20]
	cmp	edx, DWORD PTR [ecx+4]
	jbe	SHORT $LN8@sortVector
; Line 2634
	mov	eax, DWORD PTR _topo$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+20], edx
$LN8@sortVector:
; Line 2642
	mov	eax, DWORD PTR _topo$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	shl	ecx, 2
	mov	esi, esp
	push	ecx
	call	DWORD PTR __imp__malloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _vIndex$[ebp], eax
; Line 2646
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN7@sortVector
$LN6@sortVector:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN7@sortVector:
	mov	eax, DWORD PTR _topo$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR [eax+20]
	jae	SHORT $LN5@sortVector
; Line 2648
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _vIndex$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [ecx+eax*4], edx
; Line 2649
	jmp	SHORT $LN6@sortVector
$LN5@sortVector:
; Line 2656
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@sortVector
$LN3@sortVector:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@sortVector:
	mov	eax, DWORD PTR _topo$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR [eax+20]
	jae	SHORT $LN2@sortVector
; Line 2663
	mov	eax, DWORD PTR _topo$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR _vIndex$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	cmp	edx, DWORD PTR _i$[ebp]
	jne	SHORT $LN1@sortVector
; Line 2665
	jmp	SHORT $LN3@sortVector
$LN1@sortVector:
; Line 2673
	mov	eax, DWORD PTR _topo$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR _vIndex$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _ind$37110[ebp], edx
; Line 2674
	mov	esi, esp
	mov	eax, DWORD PTR _ind$37110[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	edx, DWORD PTR _v$[ebp]
	push	edx
	mov	eax, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR [eax+164]
	call	ecx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2681
	mov	eax, DWORD PTR _topo$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR _vIndex$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [ecx+eax*4], edx
; Line 2682
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _vIndex$[ebp]
	mov	edx, DWORD PTR _ind$37110[ebp]
	mov	DWORD PTR [ecx+eax*4], edx
; Line 2683
	jmp	$LN3@sortVector
$LN2@sortVector:
; Line 2687
	mov	esi, esp
	mov	eax, DWORD PTR _vIndex$[ebp]
	push	eax
	call	DWORD PTR __imp__free
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN11@sortVector:
; Line 2689
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_sortVector ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _freeTopo
_TEXT	SEGMENT
_edgeList$37126 = -20					; size = 4
_i$ = -8						; size = 4
_topo$ = 8						; size = 4
_freeTopo PROC						; COMDAT
; Line 2693
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2698
	mov	eax, DWORD PTR _topo$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN8@freeTopo
; Line 2700
	mov	esi, esp
	mov	eax, DWORD PTR _topo$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	DWORD PTR __imp__free
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2701
	mov	eax, DWORD PTR _topo$[ebp]
	mov	DWORD PTR [eax+4], 0
$LN8@freeTopo:
; Line 2706
	mov	eax, DWORD PTR _topo$[ebp]
	cmp	DWORD PTR [eax+24], 0
	je	SHORT $LN7@freeTopo
; Line 2709
	mov	esi, esp
	mov	eax, DWORD PTR _topo$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	mov	edx, DWORD PTR _topo$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	ecx, DWORD PTR [eax+56]
	call	ecx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2710
	mov	eax, DWORD PTR _topo$[ebp]
	mov	DWORD PTR [eax+24], 0
$LN7@freeTopo:
; Line 2715
	mov	eax, DWORD PTR _topo$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN6@freeTopo
; Line 2720
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN5@freeTopo
$LN4@freeTopo:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN5@freeTopo:
	mov	eax, DWORD PTR _topo$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR [eax+20]
	jae	SHORT $LN3@freeTopo
; Line 2722
	mov	eax, DWORD PTR _topo$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR _edgeList$37126[ebp], eax
; Line 2723
	cmp	DWORD PTR _edgeList$37126[ebp], 0
	je	SHORT $LN2@freeTopo
; Line 2725
	mov	esi, esp
	mov	eax, DWORD PTR _edgeList$37126[ebp]
	push	eax
	mov	ecx, DWORD PTR _edgeList$37126[ebp]
	mov	edx, DWORD PTR [ecx+56]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@freeTopo:
; Line 2727
	jmp	SHORT $LN4@freeTopo
$LN3@freeTopo:
; Line 2729
	mov	esi, esp
	mov	eax, DWORD PTR _topo$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	DWORD PTR __imp__free
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN6@freeTopo:
; Line 2731
	mov	eax, DWORD PTR _topo$[ebp]
	mov	DWORD PTR [eax], 0
; Line 2735
	mov	eax, DWORD PTR _topo$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN1@freeTopo
; Line 2737
	mov	esi, esp
	mov	eax, DWORD PTR _topo$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	DWORD PTR __imp__free
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@freeTopo:
; Line 2740
	mov	esi, esp
	mov	eax, DWORD PTR _topo$[ebp]
	push	eax
	call	DWORD PTR __imp__free
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2741
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_freeTopo ENDP
_TEXT	ENDS
END
