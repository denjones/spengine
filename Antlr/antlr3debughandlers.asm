; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\Users\Ken\Documents\GitHub\spengine\Antlr\antlr3debughandlers.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_antlr3DebugListenerNew
EXTRN	__imp__calloc:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\users\ken\documents\github\spengine\antlr\antlr3debughandlers.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT _antlr3DebugListenerNew
_TEXT	SEGMENT
_delboy$ = -8						; size = 4
_antlr3DebugListenerNew PROC				; COMDAT
; Line 94
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 97
	mov	esi, esp
	push	164					; 000000a4H
	push	1
	call	DWORD PTR __imp__calloc
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _delboy$[ebp], eax
; Line 99
	cmp	DWORD PTR _delboy$[ebp], 0
	jne	SHORT $LN1@antlr3Debu
; Line 101
	xor	eax, eax
	jmp	$LN2@antlr3Debu
$LN1@antlr3Debu:
; Line 106
	mov	eax, DWORD PTR _delboy$[ebp]
	mov	DWORD PTR [eax+152], OFFSET _addChild
; Line 107
	mov	eax, DWORD PTR _delboy$[ebp]
	mov	DWORD PTR [eax+148], OFFSET _becomeRoot
; Line 108
	mov	eax, DWORD PTR _delboy$[ebp]
	mov	DWORD PTR [eax+84], OFFSET _beginBacktrack
; Line 109
	mov	eax, DWORD PTR _delboy$[ebp]
	mov	DWORD PTR [eax+100], OFFSET _beginResync
; Line 110
	mov	eax, DWORD PTR _delboy$[ebp]
	mov	DWORD PTR [eax+112], OFFSET _commence
; Line 111
	mov	eax, DWORD PTR _delboy$[ebp]
	mov	DWORD PTR [eax+64], OFFSET _consumeHiddenToken
; Line 112
	mov	eax, DWORD PTR _delboy$[ebp]
	mov	DWORD PTR [eax+124], OFFSET _consumeNode
; Line 113
	mov	eax, DWORD PTR _delboy$[ebp]
	mov	DWORD PTR [eax+60], OFFSET _consumeToken
; Line 114
	mov	eax, DWORD PTR _delboy$[ebp]
	mov	DWORD PTR [eax+140], OFFSET _createNode
; Line 115
	mov	eax, DWORD PTR _delboy$[ebp]
	mov	DWORD PTR [eax+144], OFFSET _createNodeTok
; Line 116
	mov	eax, DWORD PTR _delboy$[ebp]
	mov	DWORD PTR [eax+88], OFFSET _endBacktrack
; Line 117
	mov	eax, DWORD PTR _delboy$[ebp]
	mov	DWORD PTR [eax+104], OFFSET _endResync
; Line 118
	mov	eax, DWORD PTR _delboy$[ebp]
	mov	DWORD PTR [eax+36], OFFSET _enterAlt
; Line 119
	mov	eax, DWORD PTR _delboy$[ebp]
	mov	DWORD PTR [eax+52], OFFSET _enterDecision
; Line 120
	mov	eax, DWORD PTR _delboy$[ebp]
	mov	DWORD PTR [eax+32], OFFSET _enterRule
; Line 121
	mov	eax, DWORD PTR _delboy$[ebp]
	mov	DWORD PTR [eax+44], OFFSET _enterSubRule
; Line 122
	mov	eax, DWORD PTR _delboy$[ebp]
	mov	DWORD PTR [eax+56], OFFSET _exitDecision
; Line 123
	mov	eax, DWORD PTR _delboy$[ebp]
	mov	DWORD PTR [eax+40], OFFSET _exitRule
; Line 124
	mov	eax, DWORD PTR _delboy$[ebp]
	mov	DWORD PTR [eax+48], OFFSET _exitSubRule
; Line 125
	mov	eax, DWORD PTR _delboy$[ebp]
	mov	DWORD PTR [eax+28], OFFSET _handshake
; Line 126
	mov	eax, DWORD PTR _delboy$[ebp]
	mov	DWORD PTR [eax+92], OFFSET _location
; Line 127
	mov	eax, DWORD PTR _delboy$[ebp]
	mov	DWORD PTR [eax+68], OFFSET _LT
; Line 128
	mov	eax, DWORD PTR _delboy$[ebp]
	mov	DWORD PTR [eax+128], OFFSET _LTT
; Line 129
	mov	eax, DWORD PTR _delboy$[ebp]
	mov	DWORD PTR [eax+72], OFFSET _mark
; Line 130
	mov	eax, DWORD PTR _delboy$[ebp]
	mov	DWORD PTR [eax+132], OFFSET _nilNode
; Line 131
	mov	eax, DWORD PTR _delboy$[ebp]
	mov	DWORD PTR [eax+96], OFFSET _recognitionException
; Line 132
	mov	eax, DWORD PTR _delboy$[ebp]
	mov	DWORD PTR [eax+76], OFFSET _rewindMark
; Line 133
	mov	eax, DWORD PTR _delboy$[ebp]
	mov	DWORD PTR [eax+80], OFFSET _rewindLast
; Line 134
	mov	eax, DWORD PTR _delboy$[ebp]
	mov	DWORD PTR [eax+108], OFFSET _semanticPredicate
; Line 135
	mov	eax, DWORD PTR _delboy$[ebp]
	mov	DWORD PTR [eax+156], OFFSET _setTokenBoundaries
; Line 136
	mov	eax, DWORD PTR _delboy$[ebp]
	mov	DWORD PTR [eax+116], OFFSET _terminate
; Line 137
	mov	eax, DWORD PTR _delboy$[ebp]
	mov	DWORD PTR [eax+136], OFFSET _errorNode
; Line 139
	mov	eax, DWORD PTR _delboy$[ebp]
	mov	DWORD PTR [eax+8], 2
; Line 141
	mov	eax, DWORD PTR _delboy$[ebp]
	mov	DWORD PTR [eax], 49100			; 0000bfccH
; Line 143
	mov	eax, DWORD PTR _delboy$[ebp]
$LN2@antlr3Debu:
; Line 144
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_antlr3DebugListenerNew ENDP
_TEXT	ENDS
PUBLIC	_antlr3DebugListenerNewPort
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _antlr3DebugListenerNewPort
_TEXT	SEGMENT
_delboy$ = -8						; size = 4
_port$ = 8						; size = 4
_antlr3DebugListenerNewPort PROC			; COMDAT
; Line 148
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 151
	call	_antlr3DebugListenerNew
	mov	DWORD PTR _delboy$[ebp], eax
; Line 153
	cmp	DWORD PTR _delboy$[ebp], 0
	je	SHORT $LN1@antlr3Debu@2
; Line 155
	mov	eax, DWORD PTR _delboy$[ebp]
	mov	ecx, DWORD PTR _port$[ebp]
	mov	DWORD PTR [eax], ecx
$LN1@antlr3Debu@2:
; Line 158
	mov	eax, DWORD PTR _delboy$[ebp]
; Line 159
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_antlr3DebugListenerNewPort ENDP
_TEXT	ENDS
PUBLIC	??_C@_0N@LDLKKDCB@grammar?5?$CC?$CFs?6?$AA@	; `string'
PUBLIC	??_C@_09ILMAJDDB@ANTLR?5?$CFd?6?$AA@		; `string'
PUBLIC	__$ArrayPad$
EXTRN	_strlen:PROC
EXTRN	__imp__sprintf:PROC
EXTRN	_setsockopt@20:PROC
EXTRN	_closesocket@4:PROC
EXTRN	_shutdown@8:PROC
EXTRN	_accept@12:PROC
EXTRN	_listen@8:PROC
EXTRN	_bind@12:PROC
EXTRN	_htonl@4:PROC
EXTRN	_htons@4:PROC
EXTRN	_socket@12:PROC
EXTRN	_WSAStartup@8:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
;	COMDAT ??_C@_0N@LDLKKDCB@grammar?5?$CC?$CFs?6?$AA@
CONST	SEGMENT
??_C@_0N@LDLKKDCB@grammar?5?$CC?$CFs?6?$AA@ DB 'grammar "%s', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09ILMAJDDB@ANTLR?5?$CFd?6?$AA@
CONST	SEGMENT
??_C@_09ILMAJDDB@ANTLR?5?$CFd?6?$AA@ DB 'ANTLR %d', 0aH, 00H ; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT _handshake
_TEXT	SEGMENT
_err$36226 = -780					; size = 4
_wsaData$36225 = -768					; size = 400
_wVersionRequested$36224 = -360				; size = 2
_optVal$ = -348						; size = 4
_sockaddr_len$ = -336					; size = 4
_message$ = -324					; size = 256
_server$ = -60						; size = 16
_client$ = -36						; size = 16
_serverSocket$ = -12					; size = 4
__$ArrayPad$ = -4					; size = 4
_delboy$ = 8						; size = 4
_handshake PROC						; COMDAT
; Line 195
	push	ebp
	mov	ebp, esp
	sub	esp, 976				; 000003d0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-976]
	mov	ecx, 244				; 000000f4H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 220
	mov	eax, DWORD PTR _delboy$[ebp]
	movzx	ecx, BYTE PTR [eax+16]
	test	ecx, ecx
	jne	$LN6@handshake
; Line 234
	mov	eax, 257				; 00000101H
	mov	WORD PTR _wVersionRequested$36224[ebp], ax
; Line 236
	lea	eax, DWORD PTR _wsaData$36225[ebp]
	push	eax
	movzx	ecx, WORD PTR _wVersionRequested$36224[ebp]
	push	ecx
	call	_WSAStartup@8
	mov	DWORD PTR _err$36226[ebp], eax
; Line 238
	cmp	DWORD PTR _err$36226[ebp], 0
	je	SHORT $LN5@handshake
; Line 243
	xor	al, al
	jmp	$LN7@handshake
$LN5@handshake:
; Line 251
	push	0
	push	1
	push	2
	call	_socket@12
	mov	DWORD PTR _serverSocket$[ebp], eax
; Line 253
	cmp	DWORD PTR _serverSocket$[ebp], -1
	jne	SHORT $LN4@handshake
; Line 255
	xor	al, al
	jmp	$LN7@handshake
$LN4@handshake:
; Line 260
	mov	eax, DWORD PTR _delboy$[ebp]
	movzx	ecx, WORD PTR [eax]
	push	ecx
	call	_htons@4
	mov	WORD PTR _server$[ebp+2], ax
; Line 261
	mov	eax, 2
	mov	WORD PTR _server$[ebp], ax
; Line 262
	push	0
	call	_htonl@4
	mov	DWORD PTR _server$[ebp+4], eax
; Line 269
	push	16					; 00000010H
	lea	eax, DWORD PTR _server$[ebp]
	push	eax
	mov	ecx, DWORD PTR _serverSocket$[ebp]
	push	ecx
	call	_bind@12
	cmp	eax, -1
	jne	SHORT $LN3@handshake
; Line 271
	xor	al, al
	jmp	$LN7@handshake
$LN3@handshake:
; Line 277
	push	1
	mov	eax, DWORD PTR _serverSocket$[ebp]
	push	eax
	call	_listen@8
	cmp	eax, -1
	jne	SHORT $LN2@handshake
; Line 281
	xor	al, al
	jmp	$LN7@handshake
$LN2@handshake:
; Line 286
	mov	DWORD PTR _sockaddr_len$[ebp], 16	; 00000010H
; Line 287
	lea	eax, DWORD PTR _sockaddr_len$[ebp]
	push	eax
	lea	ecx, DWORD PTR _client$[ebp]
	push	ecx
	mov	edx, DWORD PTR _serverSocket$[ebp]
	push	edx
	call	_accept@12
	mov	ecx, DWORD PTR _delboy$[ebp]
	mov	DWORD PTR [ecx+4], eax
; Line 291
	push	2
	mov	eax, DWORD PTR _serverSocket$[ebp]
	push	eax
	call	_shutdown@8
; Line 292
	mov	eax, DWORD PTR _serverSocket$[ebp]
	push	eax
	call	_closesocket@4
; Line 294
	mov	eax, DWORD PTR _delboy$[ebp]
	cmp	DWORD PTR [eax+4], -1
	jne	SHORT $LN1@handshake
; Line 296
	xor	al, al
	jmp	$LN7@handshake
$LN1@handshake:
; Line 301
	mov	DWORD PTR _optVal$[ebp], 1
; Line 302
	push	4
	lea	eax, DWORD PTR _optVal$[ebp]
	push	eax
	push	1
	push	65535					; 0000ffffH
	mov	ecx, DWORD PTR _delboy$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	_setsockopt@20
$LN6@handshake:
; Line 310
	mov	esi, esp
	mov	eax, DWORD PTR _delboy$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	push	OFFSET ??_C@_09ILMAJDDB@ANTLR?5?$CFd?6?$AA@
	lea	edx, DWORD PTR _message$[ebp]
	push	edx
	call	DWORD PTR __imp__sprintf
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 311
	lea	eax, DWORD PTR _message$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	push	eax
	lea	ecx, DWORD PTR _message$[ebp]
	push	ecx
	mov	edx, DWORD PTR _delboy$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	_sockSend
	add	esp, 12					; 0000000cH
; Line 312
	mov	eax, DWORD PTR _delboy$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	esi, esp
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	push	OFFSET ??_C@_0N@LDLKKDCB@grammar?5?$CC?$CFs?6?$AA@
	lea	eax, DWORD PTR _message$[ebp]
	push	eax
	call	DWORD PTR __imp__sprintf
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 313
	lea	eax, DWORD PTR _message$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	push	eax
	lea	ecx, DWORD PTR _message$[ebp]
	push	ecx
	mov	edx, DWORD PTR _delboy$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	_sockSend
	add	esp, 12					; 0000000cH
; Line 314
	mov	eax, DWORD PTR _delboy$[ebp]
	push	eax
	call	_ack
	add	esp, 4
; Line 316
	mov	eax, DWORD PTR _delboy$[ebp]
	mov	BYTE PTR [eax+16], 1
; Line 318
	mov	al, 1
$LN7@handshake:
; Line 319
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN16@handshake
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 976				; 000003d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN16@handshake:
	DD	6
	DD	$LN15@handshake
$LN15@handshake:
	DD	-36					; ffffffdcH
	DD	16					; 00000010H
	DD	$LN9@handshake
	DD	-60					; ffffffc4H
	DD	16					; 00000010H
	DD	$LN10@handshake
	DD	-324					; fffffebcH
	DD	256					; 00000100H
	DD	$LN11@handshake
	DD	-336					; fffffeb0H
	DD	4
	DD	$LN12@handshake
	DD	-348					; fffffea4H
	DD	4
	DD	$LN13@handshake
	DD	-768					; fffffd00H
	DD	400					; 00000190H
	DD	$LN14@handshake
$LN14@handshake:
	DB	119					; 00000077H
	DB	115					; 00000073H
	DB	97					; 00000061H
	DB	68					; 00000044H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	0
$LN13@handshake:
	DB	111					; 0000006fH
	DB	112					; 00000070H
	DB	116					; 00000074H
	DB	86					; 00000056H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	0
$LN12@handshake:
	DB	115					; 00000073H
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	100					; 00000064H
	DB	114					; 00000072H
	DB	95					; 0000005fH
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	0
$LN11@handshake:
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	115					; 00000073H
	DB	97					; 00000061H
	DB	103					; 00000067H
	DB	101					; 00000065H
	DB	0
$LN10@handshake:
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	118					; 00000076H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
$LN9@handshake:
	DB	99					; 00000063H
	DB	108					; 0000006cH
	DB	105					; 00000069H
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	0
_handshake ENDP
_TEXT	ENDS
EXTRN	_send@16:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _sockSend
_TEXT	SEGMENT
_thisSend$ = -20					; size = 4
_sent$ = -8						; size = 4
_sock$ = 8						; size = 4
_ptr$ = 12						; size = 4
_len$ = 16						; size = 4
_sockSend PROC						; COMDAT
; Line 166
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 170
	mov	DWORD PTR _sent$[ebp], 0
$LN3@sockSend:
; Line 172
	mov	eax, DWORD PTR _sent$[ebp]
	cmp	eax, DWORD PTR _len$[ebp]
	jge	SHORT $LN2@sockSend
; Line 176
	push	0
	mov	eax, DWORD PTR _len$[ebp]
	sub	eax, DWORD PTR _sent$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _sock$[ebp]
	push	edx
	call	_send@16
	mov	DWORD PTR _thisSend$[ebp], eax
; Line 180
	cmp	DWORD PTR _thisSend$[ebp], -1
	jne	SHORT $LN1@sockSend
; Line 182
	xor	eax, eax
	jmp	SHORT $LN4@sockSend
$LN1@sockSend:
; Line 187
	mov	eax, DWORD PTR _ptr$[ebp]
	add	eax, DWORD PTR _thisSend$[ebp]
	mov	DWORD PTR _ptr$[ebp], eax
; Line 188
	mov	eax, DWORD PTR _sent$[ebp]
	add	eax, DWORD PTR _thisSend$[ebp]
	mov	DWORD PTR _sent$[ebp], eax
; Line 189
	jmp	SHORT $LN3@sockSend
$LN2@sockSend:
; Line 190
	mov	eax, 1
$LN4@sockSend:
; Line 191
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_sockSend ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DN@JOJNMFAB@Received?5char?5count?5was?5?$CFd?0?5and?5@ ; `string'
PUBLIC	??_C@_0DF@DGFGDKCA@Exiting?5debugger?5as?5remote?5clien@ ; `string'
EXTRN	__imp__exit:PROC
EXTRN	__imp__printf:PROC
EXTRN	_recv@16:PROC
;	COMDAT ??_C@_0DN@JOJNMFAB@Received?5char?5count?5was?5?$CFd?0?5and?5@
CONST	SEGMENT
??_C@_0DN@JOJNMFAB@Received?5char?5count?5was?5?$CFd?0?5and?5@ DB 'Receiv'
	DB	'ed char count was %d, and last char received was %02X', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DF@DGFGDKCA@Exiting?5debugger?5as?5remote?5clien@
CONST	SEGMENT
??_C@_0DF@DGFGDKCA@Exiting?5debugger?5as?5remote?5clien@ DB 'Exiting debu'
	DB	'gger as remote client closed the socket', 0aH, 00H ; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT _ack
_TEXT	SEGMENT
_rCount$ = -20						; size = 4
_buffer$ = -5						; size = 1
_delboy$ = 8						; size = 4
_ack	PROC						; COMDAT
; Line 331
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
$LN5@ack:
; Line 343
	push	0
	push	1
	lea	eax, DWORD PTR _buffer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _delboy$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	_recv@16
	mov	DWORD PTR _rCount$[ebp], eax
; Line 345
	cmp	DWORD PTR _rCount$[ebp], 1
	jne	SHORT $LN3@ack
	movsx	eax, BYTE PTR _buffer$[ebp]
	cmp	eax, 10					; 0000000aH
	jne	SHORT $LN5@ack
$LN3@ack:
; Line 352
	cmp	DWORD PTR _rCount$[ebp], 1
	je	SHORT $LN7@ack
; Line 354
	mov	esi, esp
	push	OFFSET ??_C@_0DF@DGFGDKCA@Exiting?5debugger?5as?5remote?5clien@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 355
	movsx	eax, BYTE PTR _buffer$[ebp]
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _rCount$[ebp]
	push	ecx
	push	OFFSET ??_C@_0DN@JOJNMFAB@Received?5char?5count?5was?5?$CFd?0?5and?5@
	call	DWORD PTR __imp__printf
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 356
	mov	esi, esp
	push	0
	call	DWORD PTR __imp__exit
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN7@ack:
; Line 358
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@ack
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN10@ack:
	DD	1
	DD	$LN9@ack
$LN9@ack:
	DD	-5					; fffffffbH
	DD	1
	DD	$LN8@ack
$LN8@ack:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
_ack	ENDP
_TEXT	ENDS
PUBLIC	??_C@_03MMIJIMKH@?$CF25?$AA@			; `string'
PUBLIC	??_C@_03PJCJBAHO@?$CF0D?$AA@			; `string'
PUBLIC	??_C@_03IEFOOEDL@?$CF0A?$AA@			; `string'
PUBLIC	??_C@_02KINNFLEC@?7?$CC?$AA@			; `string'
PUBLIC	_serializeText
;	COMDAT ??_C@_03MMIJIMKH@?$CF25?$AA@
CONST	SEGMENT
??_C@_03MMIJIMKH@?$CF25?$AA@ DB '%25', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03PJCJBAHO@?$CF0D?$AA@
CONST	SEGMENT
??_C@_03PJCJBAHO@?$CF0D?$AA@ DB '%0D', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03IEFOOEDL@?$CF0A?$AA@
CONST	SEGMENT
??_C@_03IEFOOEDL@?$CF0A?$AA@ DB '%0A', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02KINNFLEC@?7?$CC?$AA@
CONST	SEGMENT
??_C@_02KINNFLEC@?7?$CC?$AA@ DB 09H, '"', 00H		; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT _serializeText
_TEXT	SEGMENT
tv75 = -220						; size = 4
_character$ = -20					; size = 4
_c$ = -8						; size = 4
_buffer$ = 8						; size = 4
_text$ = 12						; size = 4
_serializeText PROC					; COMDAT
; Line 366
	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 372
	mov	esi, esp
	push	OFFSET ??_C@_02KINNFLEC@?7?$CC?$AA@
	mov	eax, DWORD PTR _buffer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _buffer$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 374
	cmp	DWORD PTR _text$[ebp], 0
	jne	SHORT $LN10@serializeT
; Line 376
	jmp	$LN11@serializeT
$LN10@serializeT:
; Line 383
	mov	DWORD PTR _c$[ebp], 0
	jmp	SHORT $LN9@serializeT
$LN8@serializeT:
	mov	eax, DWORD PTR _c$[ebp]
	add	eax, 1
	mov	DWORD PTR _c$[ebp], eax
$LN9@serializeT:
	mov	eax, DWORD PTR _text$[ebp]
	mov	ecx, DWORD PTR _c$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jae	$LN11@serializeT
; Line 385
	mov	esi, esp
	mov	eax, DWORD PTR _c$[ebp]
	push	eax
	mov	ecx, DWORD PTR _text$[ebp]
	push	ecx
	mov	edx, DWORD PTR _text$[ebp]
	mov	eax, DWORD PTR [edx+84]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _character$[ebp], eax
	mov	ecx, DWORD PTR _character$[ebp]
	mov	DWORD PTR tv75[ebp], ecx
	cmp	DWORD PTR tv75[ebp], 10			; 0000000aH
	je	SHORT $LN4@serializeT
	cmp	DWORD PTR tv75[ebp], 13			; 0000000dH
	je	SHORT $LN3@serializeT
	cmp	DWORD PTR tv75[ebp], 92			; 0000005cH
	je	SHORT $LN2@serializeT
	jmp	SHORT $LN1@serializeT
$LN4@serializeT:
; Line 389
	mov	esi, esp
	push	OFFSET ??_C@_03IEFOOEDL@?$CF0A?$AA@
	mov	eax, DWORD PTR _buffer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _buffer$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 390
	jmp	SHORT $LN5@serializeT
$LN3@serializeT:
; Line 394
	mov	esi, esp
	push	OFFSET ??_C@_03PJCJBAHO@?$CF0D?$AA@
	mov	eax, DWORD PTR _buffer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _buffer$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 395
	jmp	SHORT $LN5@serializeT
$LN2@serializeT:
; Line 399
	mov	esi, esp
	push	OFFSET ??_C@_03MMIJIMKH@?$CF25?$AA@
	mov	eax, DWORD PTR _buffer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _buffer$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 400
	jmp	SHORT $LN5@serializeT
$LN1@serializeT:
; Line 406
	mov	esi, esp
	mov	eax, DWORD PTR _character$[ebp]
	push	eax
	mov	ecx, DWORD PTR _buffer$[ebp]
	push	ecx
	mov	edx, DWORD PTR _buffer$[ebp]
	mov	eax, DWORD PTR [edx+64]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN5@serializeT:
; Line 409
	jmp	$LN8@serializeT
$LN11@serializeT:
; Line 410
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_serializeText ENDP
_TEXT	ENDS
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	_serializeToken
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT _serializeToken
_TEXT	SEGMENT
_delboy$ = 8						; size = 4
_t$ = 12						; size = 4
_serializeToken PROC					; COMDAT
; Line 419
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 422
	mov	eax, DWORD PTR _delboy$[ebp]
	cmp	DWORD PTR [eax+20], 0
	jne	SHORT $LN1@serializeT@2
; Line 428
	mov	esi, esp
	push	64					; 00000040H
	mov	eax, DWORD PTR _delboy$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _delboy$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _delboy$[ebp]
	mov	DWORD PTR [ecx+20], eax
$LN1@serializeT@2:
; Line 433
	mov	esi, esp
	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	mov	eax, DWORD PTR _delboy$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	mov	edx, DWORD PTR _delboy$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR [eax+24]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 438
	mov	esi, esp
	mov	eax, DWORD PTR _t$[ebp]
	push	eax
	mov	ecx, DWORD PTR _t$[ebp]
	mov	edx, DWORD PTR [ecx+116]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	eax
	mov	eax, DWORD PTR _delboy$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	mov	edx, DWORD PTR _delboy$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR [eax+68]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 439
	mov	esi, esp
	push	9
	mov	eax, DWORD PTR _delboy$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	mov	edx, DWORD PTR _delboy$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR [eax+64]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 440
	mov	esi, esp
	mov	eax, DWORD PTR _t$[ebp]
	push	eax
	mov	ecx, DWORD PTR _t$[ebp]
	mov	edx, DWORD PTR [ecx+84]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	eax
	mov	eax, DWORD PTR _delboy$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	mov	edx, DWORD PTR _delboy$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR [eax+68]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 441
	mov	esi, esp
	push	9
	mov	eax, DWORD PTR _delboy$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	mov	edx, DWORD PTR _delboy$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR [eax+64]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 442
	mov	esi, esp
	mov	eax, DWORD PTR _t$[ebp]
	push	eax
	mov	ecx, DWORD PTR _t$[ebp]
	mov	edx, DWORD PTR [ecx+108]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	eax
	mov	eax, DWORD PTR _delboy$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	mov	edx, DWORD PTR _delboy$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR [eax+68]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 443
	mov	esi, esp
	push	9
	mov	eax, DWORD PTR _delboy$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	mov	edx, DWORD PTR _delboy$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR [eax+64]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 444
	mov	esi, esp
	mov	eax, DWORD PTR _t$[ebp]
	push	eax
	mov	ecx, DWORD PTR _t$[ebp]
	mov	edx, DWORD PTR [ecx+92]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	eax
	mov	eax, DWORD PTR _delboy$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	mov	edx, DWORD PTR _delboy$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR [eax+68]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 445
	mov	esi, esp
	push	9
	mov	eax, DWORD PTR _delboy$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	mov	edx, DWORD PTR _delboy$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR [eax+64]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 446
	mov	esi, esp
	mov	eax, DWORD PTR _t$[ebp]
	push	eax
	mov	ecx, DWORD PTR _t$[ebp]
	mov	edx, DWORD PTR [ecx+100]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	eax
	mov	eax, DWORD PTR _delboy$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	mov	edx, DWORD PTR _delboy$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR [eax+68]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 450
	mov	esi, esp
	mov	eax, DWORD PTR _t$[ebp]
	push	eax
	mov	ecx, DWORD PTR _t$[ebp]
	mov	edx, DWORD PTR [ecx+72]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	mov	eax, DWORD PTR _delboy$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	call	_serializeText
	add	esp, 8
; Line 457
	mov	esi, esp
	mov	eax, DWORD PTR _delboy$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	mov	edx, DWORD PTR _delboy$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR [eax+100]
	call	ecx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 458
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_serializeToken ENDP
_TEXT	ENDS
PUBLIC	_serializeNode
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _serializeNode
_TEXT	SEGMENT
_token$ = -8						; size = 4
_delboy$ = 8						; size = 4
_node$ = 12						; size = 4
_serializeNode PROC					; COMDAT
; Line 465
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 471
	mov	eax, DWORD PTR _delboy$[ebp]
	cmp	DWORD PTR [eax+20], 0
	jne	SHORT $LN4@serializeN
; Line 477
	mov	esi, esp
	push	64					; 00000040H
	mov	eax, DWORD PTR _delboy$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _delboy$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _delboy$[ebp]
	mov	DWORD PTR [ecx+20], eax
$LN4@serializeN:
; Line 482
	mov	esi, esp
	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	mov	eax, DWORD PTR _delboy$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	mov	edx, DWORD PTR _delboy$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR [eax+24]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 486
	cmp	DWORD PTR _node$[ebp], 0
	jne	SHORT $LN3@serializeN
; Line 488
	mov	eax, DWORD PTR _delboy$[ebp]
	mov	eax, DWORD PTR [eax+20]
	jmp	$LN5@serializeN
$LN3@serializeN:
; Line 494
	mov	esi, esp
	push	9
	mov	eax, DWORD PTR _delboy$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	mov	edx, DWORD PTR _delboy$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR [eax+64]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 498
	mov	esi, esp
	mov	eax, DWORD PTR _node$[ebp]
	push	eax
	mov	ecx, DWORD PTR _delboy$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	mov	eax, DWORD PTR _delboy$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx+128]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	eax
	mov	eax, DWORD PTR _delboy$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	mov	edx, DWORD PTR _delboy$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR [eax+68]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 499
	mov	esi, esp
	push	9
	mov	eax, DWORD PTR _delboy$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	mov	edx, DWORD PTR _delboy$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR [eax+64]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 503
	mov	esi, esp
	mov	eax, DWORD PTR _node$[ebp]
	push	eax
	mov	ecx, DWORD PTR _delboy$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	mov	eax, DWORD PTR _delboy$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx+84]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	eax
	mov	eax, DWORD PTR _delboy$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	mov	edx, DWORD PTR _delboy$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR [eax+68]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 507
	mov	esi, esp
	mov	eax, DWORD PTR _node$[ebp]
	push	eax
	mov	ecx, DWORD PTR _delboy$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	mov	eax, DWORD PTR _delboy$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx+140]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _token$[ebp], eax
; Line 509
	mov	esi, esp
	push	9
	mov	eax, DWORD PTR _delboy$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	mov	edx, DWORD PTR _delboy$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR [eax+64]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 510
	cmp	DWORD PTR _token$[ebp], 0
	je	$LN2@serializeN
; Line 514
	mov	esi, esp
	mov	eax, DWORD PTR _token$[ebp]
	push	eax
	mov	ecx, DWORD PTR _token$[ebp]
	mov	edx, DWORD PTR [ecx+92]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	eax
	mov	eax, DWORD PTR _delboy$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	mov	edx, DWORD PTR _delboy$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR [eax+68]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 515
	mov	esi, esp
	push	32					; 00000020H
	mov	eax, DWORD PTR _delboy$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	mov	edx, DWORD PTR _delboy$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR [eax+64]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 516
	mov	esi, esp
	mov	eax, DWORD PTR _token$[ebp]
	push	eax
	mov	ecx, DWORD PTR _token$[ebp]
	mov	edx, DWORD PTR [ecx+100]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	eax
	mov	eax, DWORD PTR _delboy$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	mov	edx, DWORD PTR _delboy$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR [eax+68]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 518
	jmp	SHORT $LN1@serializeN
$LN2@serializeN:
; Line 522
	mov	esi, esp
	push	-1
	mov	eax, DWORD PTR _delboy$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	mov	edx, DWORD PTR _delboy$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR [eax+68]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 523
	mov	esi, esp
	push	9
	mov	eax, DWORD PTR _delboy$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	mov	edx, DWORD PTR _delboy$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR [eax+64]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 524
	mov	esi, esp
	push	-1
	mov	eax, DWORD PTR _delboy$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	mov	edx, DWORD PTR _delboy$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR [eax+68]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@serializeN:
; Line 529
	mov	esi, esp
	push	9
	mov	eax, DWORD PTR _delboy$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	mov	edx, DWORD PTR _delboy$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR [eax+64]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 530
	mov	esi, esp
	mov	eax, DWORD PTR _node$[ebp]
	push	eax
	mov	ecx, DWORD PTR _delboy$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	mov	eax, DWORD PTR _delboy$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx+148]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	eax
	mov	eax, DWORD PTR _delboy$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	mov	edx, DWORD PTR _delboy$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR [eax+68]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 534
	mov	esi, esp
	mov	eax, DWORD PTR _node$[ebp]
	push	eax
	mov	ecx, DWORD PTR _delboy$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	mov	eax, DWORD PTR _delboy$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx+92]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	mov	eax, DWORD PTR _delboy$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	call	_serializeText
	add	esp, 8
; Line 541
	mov	esi, esp
	mov	eax, DWORD PTR _delboy$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	mov	edx, DWORD PTR _delboy$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR [eax+100]
	call	ecx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN5@serializeN:
; Line 542
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_serializeNode ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BB@ENKMDCBO@enterRule?7?$CFs?7?$CFs?6?$AA@ ; `string'
PUBLIC	__$ArrayPad$
;	COMDAT ??_C@_0BB@ENKMDCBO@enterRule?7?$CFs?7?$CFs?6?$AA@
CONST	SEGMENT
??_C@_0BB@ENKMDCBO@enterRule?7?$CFs?7?$CFs?6?$AA@ DB 'enterRule', 09H, '%'
	DB	's', 09H, '%s', 0aH, 00H			; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT _enterRule
_TEXT	SEGMENT
_buffer$ = -520						; size = 512
__$ArrayPad$ = -4					; size = 4
_delboy$ = 8						; size = 4
_grammarFileName$ = 12					; size = 4
_ruleName$ = 16						; size = 4
_enterRule PROC						; COMDAT
; Line 549
	push	ebp
	mov	ebp, esp
	sub	esp, 716				; 000002ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-716]
	mov	ecx, 179				; 000000b3H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 554
	mov	esi, esp
	mov	eax, DWORD PTR _ruleName$[ebp]
	push	eax
	mov	ecx, DWORD PTR _grammarFileName$[ebp]
	push	ecx
	push	OFFSET ??_C@_0BB@ENKMDCBO@enterRule?7?$CFs?7?$CFs?6?$AA@
	lea	edx, DWORD PTR _buffer$[ebp]
	push	edx
	call	DWORD PTR __imp__sprintf
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 555
	lea	eax, DWORD PTR _buffer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _delboy$[ebp]
	push	ecx
	call	_transmit
	add	esp, 8
; Line 556
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@enterRule
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 716				; 000002ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN5@enterRule:
	DD	1
	DD	$LN4@enterRule
$LN4@enterRule:
	DD	-520					; fffffdf8H
	DD	512					; 00000200H
	DD	$LN3@enterRule
$LN3@enterRule:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
_enterRule ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _transmit
_TEXT	SEGMENT
_delboy$ = 8						; size = 4
_ptr$ = 12						; size = 4
_transmit PROC						; COMDAT
; Line 324
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 325
	mov	eax, DWORD PTR _ptr$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _delboy$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	_sockSend
	add	esp, 12					; 0000000cH
; Line 326
	mov	eax, DWORD PTR _delboy$[ebp]
	push	eax
	call	_ack
	add	esp, 4
; Line 327
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_transmit ENDP
_TEXT	ENDS
PUBLIC	??_C@_0N@JDALHHAO@enterAlt?7?$CFd?6?$AA@	; `string'
PUBLIC	__$ArrayPad$
;	COMDAT ??_C@_0N@JDALHHAO@enterAlt?7?$CFd?6?$AA@
CONST	SEGMENT
??_C@_0N@JDALHHAO@enterAlt?7?$CFd?6?$AA@ DB 'enterAlt', 09H, '%d', 0aH, 00H ; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT _enterAlt
_TEXT	SEGMENT
_buffer$ = -520						; size = 512
__$ArrayPad$ = -4					; size = 4
_delboy$ = 8						; size = 4
_alt$ = 12						; size = 4
_enterAlt PROC						; COMDAT
; Line 560
	push	ebp
	mov	ebp, esp
	sub	esp, 716				; 000002ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-716]
	mov	ecx, 179				; 000000b3H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 565
	mov	esi, esp
	mov	eax, DWORD PTR _alt$[ebp]
	push	eax
	push	OFFSET ??_C@_0N@JDALHHAO@enterAlt?7?$CFd?6?$AA@
	lea	ecx, DWORD PTR _buffer$[ebp]
	push	ecx
	call	DWORD PTR __imp__sprintf
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 566
	lea	eax, DWORD PTR _buffer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _delboy$[ebp]
	push	ecx
	call	_transmit
	add	esp, 8
; Line 567
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@enterAlt
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 716				; 000002ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN5@enterAlt:
	DD	1
	DD	$LN4@enterAlt
$LN4@enterAlt:
	DD	-520					; fffffdf8H
	DD	512					; 00000200H
	DD	$LN3@enterAlt
$LN3@enterAlt:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
_enterAlt ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BA@HKINPPNN@exitRule?7?$CFs?7?$CFs?6?$AA@ ; `string'
PUBLIC	__$ArrayPad$
;	COMDAT ??_C@_0BA@HKINPPNN@exitRule?7?$CFs?7?$CFs?6?$AA@
CONST	SEGMENT
??_C@_0BA@HKINPPNN@exitRule?7?$CFs?7?$CFs?6?$AA@ DB 'exitRule', 09H, '%s', 09H
	DB	'%s', 0aH, 00H				; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT _exitRule
_TEXT	SEGMENT
_buffer$ = -520						; size = 512
__$ArrayPad$ = -4					; size = 4
_delboy$ = 8						; size = 4
_grammarFileName$ = 12					; size = 4
_ruleName$ = 16						; size = 4
_exitRule PROC						; COMDAT
; Line 571
	push	ebp
	mov	ebp, esp
	sub	esp, 716				; 000002ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-716]
	mov	ecx, 179				; 000000b3H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 576
	mov	esi, esp
	mov	eax, DWORD PTR _ruleName$[ebp]
	push	eax
	mov	ecx, DWORD PTR _grammarFileName$[ebp]
	push	ecx
	push	OFFSET ??_C@_0BA@HKINPPNN@exitRule?7?$CFs?7?$CFs?6?$AA@
	lea	edx, DWORD PTR _buffer$[ebp]
	push	edx
	call	DWORD PTR __imp__sprintf
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 577
	lea	eax, DWORD PTR _buffer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _delboy$[ebp]
	push	ecx
	call	_transmit
	add	esp, 8
; Line 578
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@exitRule
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 716				; 000002ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN5@exitRule:
	DD	1
	DD	$LN4@exitRule
$LN4@exitRule:
	DD	-520					; fffffdf8H
	DD	512					; 00000200H
	DD	$LN3@exitRule
$LN3@exitRule:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
_exitRule ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BB@GEBKADNP@enterSubRule?7?$CFd?6?$AA@	; `string'
PUBLIC	__$ArrayPad$
;	COMDAT ??_C@_0BB@GEBKADNP@enterSubRule?7?$CFd?6?$AA@
CONST	SEGMENT
??_C@_0BB@GEBKADNP@enterSubRule?7?$CFd?6?$AA@ DB 'enterSubRule', 09H, '%d'
	DB	0aH, 00H					; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT _enterSubRule
_TEXT	SEGMENT
_buffer$ = -520						; size = 512
__$ArrayPad$ = -4					; size = 4
_delboy$ = 8						; size = 4
_decisionNumber$ = 12					; size = 4
_enterSubRule PROC					; COMDAT
; Line 582
	push	ebp
	mov	ebp, esp
	sub	esp, 716				; 000002ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-716]
	mov	ecx, 179				; 000000b3H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 587
	mov	esi, esp
	mov	eax, DWORD PTR _decisionNumber$[ebp]
	push	eax
	push	OFFSET ??_C@_0BB@GEBKADNP@enterSubRule?7?$CFd?6?$AA@
	lea	ecx, DWORD PTR _buffer$[ebp]
	push	ecx
	call	DWORD PTR __imp__sprintf
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 588
	lea	eax, DWORD PTR _buffer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _delboy$[ebp]
	push	ecx
	call	_transmit
	add	esp, 8
; Line 589
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@enterSubRu
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 716				; 000002ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN5@enterSubRu:
	DD	1
	DD	$LN4@enterSubRu
$LN4@enterSubRu:
	DD	-520					; fffffdf8H
	DD	512					; 00000200H
	DD	$LN3@enterSubRu
$LN3@enterSubRu:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
_enterSubRule ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BA@FDDLMOBM@exitSubRule?7?$CFd?6?$AA@	; `string'
PUBLIC	__$ArrayPad$
;	COMDAT ??_C@_0BA@FDDLMOBM@exitSubRule?7?$CFd?6?$AA@
CONST	SEGMENT
??_C@_0BA@FDDLMOBM@exitSubRule?7?$CFd?6?$AA@ DB 'exitSubRule', 09H, '%d', 0aH
	DB	00H						; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT _exitSubRule
_TEXT	SEGMENT
_buffer$ = -520						; size = 512
__$ArrayPad$ = -4					; size = 4
_delboy$ = 8						; size = 4
_decisionNumber$ = 12					; size = 4
_exitSubRule PROC					; COMDAT
; Line 593
	push	ebp
	mov	ebp, esp
	sub	esp, 716				; 000002ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-716]
	mov	ecx, 179				; 000000b3H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 598
	mov	esi, esp
	mov	eax, DWORD PTR _decisionNumber$[ebp]
	push	eax
	push	OFFSET ??_C@_0BA@FDDLMOBM@exitSubRule?7?$CFd?6?$AA@
	lea	ecx, DWORD PTR _buffer$[ebp]
	push	ecx
	call	DWORD PTR __imp__sprintf
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 599
	lea	eax, DWORD PTR _buffer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _delboy$[ebp]
	push	ecx
	call	_transmit
	add	esp, 8
; Line 600
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@exitSubRul
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 716				; 000002ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN5@exitSubRul:
	DD	1
	DD	$LN4@exitSubRul
$LN4@exitSubRul:
	DD	-520					; fffffdf8H
	DD	512					; 00000200H
	DD	$LN3@exitSubRul
$LN3@exitSubRul:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
_exitSubRule ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BC@JHLNNKII@enterDecision?7?$CFd?6?$AA@	; `string'
PUBLIC	__$ArrayPad$
;	COMDAT ??_C@_0BC@JHLNNKII@enterDecision?7?$CFd?6?$AA@
CONST	SEGMENT
??_C@_0BC@JHLNNKII@enterDecision?7?$CFd?6?$AA@ DB 'enterDecision', 09H, '%'
	DB	'd', 0aH, 00H				; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT _enterDecision
_TEXT	SEGMENT
_buffer$ = -520						; size = 512
__$ArrayPad$ = -4					; size = 4
_delboy$ = 8						; size = 4
_decisionNumber$ = 12					; size = 4
_enterDecision PROC					; COMDAT
; Line 604
	push	ebp
	mov	ebp, esp
	sub	esp, 716				; 000002ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-716]
	mov	ecx, 179				; 000000b3H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 609
	mov	esi, esp
	mov	eax, DWORD PTR _decisionNumber$[ebp]
	push	eax
	push	OFFSET ??_C@_0BC@JHLNNKII@enterDecision?7?$CFd?6?$AA@
	lea	ecx, DWORD PTR _buffer$[ebp]
	push	ecx
	call	DWORD PTR __imp__sprintf
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 610
	lea	eax, DWORD PTR _buffer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _delboy$[ebp]
	push	ecx
	call	_transmit
	add	esp, 8
; Line 612
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@enterDecis
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 716				; 000002ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN5@enterDecis:
	DD	1
	DD	$LN4@enterDecis
$LN4@enterDecis:
	DD	-520					; fffffdf8H
	DD	512					; 00000200H
	DD	$LN3@enterDecis
$LN3@enterDecis:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
_enterDecision ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BB@JFOHGIEP@exitDecision?7?$CFd?6?$AA@	; `string'
PUBLIC	__$ArrayPad$
;	COMDAT ??_C@_0BB@JFOHGIEP@exitDecision?7?$CFd?6?$AA@
CONST	SEGMENT
??_C@_0BB@JFOHGIEP@exitDecision?7?$CFd?6?$AA@ DB 'exitDecision', 09H, '%d'
	DB	0aH, 00H					; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT _exitDecision
_TEXT	SEGMENT
_buffer$ = -520						; size = 512
__$ArrayPad$ = -4					; size = 4
_delboy$ = 8						; size = 4
_decisionNumber$ = 12					; size = 4
_exitDecision PROC					; COMDAT
; Line 616
	push	ebp
	mov	ebp, esp
	sub	esp, 716				; 000002ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-716]
	mov	ecx, 179				; 000000b3H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 621
	mov	esi, esp
	mov	eax, DWORD PTR _decisionNumber$[ebp]
	push	eax
	push	OFFSET ??_C@_0BB@JFOHGIEP@exitDecision?7?$CFd?6?$AA@
	lea	ecx, DWORD PTR _buffer$[ebp]
	push	ecx
	call	DWORD PTR __imp__sprintf
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 622
	lea	eax, DWORD PTR _buffer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _delboy$[ebp]
	push	ecx
	call	_transmit
	add	esp, 8
; Line 623
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@exitDecisi
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 716				; 000002ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN5@exitDecisi:
	DD	1
	DD	$LN4@exitDecisi
$LN4@exitDecisi:
	DD	-520					; fffffdf8H
	DD	512					; 00000200H
	DD	$LN3@exitDecisi
$LN3@exitDecisi:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
_exitDecision ENDP
_TEXT	ENDS
PUBLIC	??_C@_0O@CLDGECJA@consumeToken?7?$AA@		; `string'
;	COMDAT ??_C@_0O@CLDGECJA@consumeToken?7?$AA@
CONST	SEGMENT
??_C@_0O@CLDGECJA@consumeToken?7?$AA@ DB 'consumeToken', 09H, 00H ; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT _consumeToken
_TEXT	SEGMENT
_msg$ = -8						; size = 4
_delboy$ = 8						; size = 4
_t$ = 12						; size = 4
_consumeToken PROC					; COMDAT
; Line 627
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 632
	mov	eax, DWORD PTR _t$[ebp]
	push	eax
	mov	ecx, DWORD PTR _delboy$[ebp]
	push	ecx
	call	_serializeToken
	add	esp, 8
	mov	DWORD PTR _msg$[ebp], eax
; Line 636
	mov	esi, esp
	push	OFFSET ??_C@_0O@CLDGECJA@consumeToken?7?$AA@
	push	0
	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	mov	ecx, DWORD PTR _msg$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	call	edx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 638
	mov	esi, esp
	push	10					; 0000000aH
	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	mov	ecx, DWORD PTR _msg$[ebp]
	mov	edx, DWORD PTR [ecx+64]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 642
	mov	eax, DWORD PTR _msg$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _delboy$[ebp]
	push	edx
	call	_transmit
	add	esp, 8
; Line 643
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_consumeToken ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BE@GEGFGNHF@consumeHiddenToken?7?$AA@	; `string'
;	COMDAT ??_C@_0BE@GEGFGNHF@consumeHiddenToken?7?$AA@
CONST	SEGMENT
??_C@_0BE@GEGFGNHF@consumeHiddenToken?7?$AA@ DB 'consumeHiddenToken', 09H
	DB	00H						; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT _consumeHiddenToken
_TEXT	SEGMENT
_msg$ = -8						; size = 4
_delboy$ = 8						; size = 4
_t$ = 12						; size = 4
_consumeHiddenToken PROC				; COMDAT
; Line 647
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 652
	mov	eax, DWORD PTR _t$[ebp]
	push	eax
	mov	ecx, DWORD PTR _delboy$[ebp]
	push	ecx
	call	_serializeToken
	add	esp, 8
	mov	DWORD PTR _msg$[ebp], eax
; Line 656
	mov	esi, esp
	push	OFFSET ??_C@_0BE@GEGFGNHF@consumeHiddenToken?7?$AA@
	push	0
	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	mov	ecx, DWORD PTR _msg$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	call	edx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 658
	mov	esi, esp
	push	10					; 0000000aH
	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	mov	ecx, DWORD PTR _msg$[ebp]
	mov	edx, DWORD PTR [ecx+64]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 662
	mov	eax, DWORD PTR _msg$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _delboy$[ebp]
	push	edx
	call	_transmit
	add	esp, 8
; Line 663
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_consumeHiddenToken ENDP
_TEXT	ENDS
PUBLIC	??_C@_03LFAOPKED@LT?7?$AA@			; `string'
PUBLIC	??_C@_01GPOEFGEJ@?7?$AA@			; `string'
;	COMDAT ??_C@_03LFAOPKED@LT?7?$AA@
CONST	SEGMENT
??_C@_03LFAOPKED@LT?7?$AA@ DB 'LT', 09H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01GPOEFGEJ@?7?$AA@
CONST	SEGMENT
??_C@_01GPOEFGEJ@?7?$AA@ DB 09H, 00H			; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT _LT
_TEXT	SEGMENT
_msg$ = -8						; size = 4
_delboy$ = 8						; size = 4
_i$ = 12						; size = 4
_t$ = 16						; size = 4
_LT	PROC						; COMDAT
; Line 669
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 672
	cmp	DWORD PTR _t$[ebp], 0
	je	$LN2@LT
; Line 676
	mov	eax, DWORD PTR _t$[ebp]
	push	eax
	mov	ecx, DWORD PTR _delboy$[ebp]
	push	ecx
	call	_serializeToken
	add	esp, 8
	mov	DWORD PTR _msg$[ebp], eax
; Line 680
	mov	esi, esp
	push	OFFSET ??_C@_01GPOEFGEJ@?7?$AA@
	push	0
	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	mov	ecx, DWORD PTR _msg$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	call	edx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 681
	mov	esi, esp
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _msg$[ebp]
	push	ecx
	mov	edx, DWORD PTR _msg$[ebp]
	mov	eax, DWORD PTR [edx+60]
	call	eax
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 685
	mov	esi, esp
	push	OFFSET ??_C@_03LFAOPKED@LT?7?$AA@
	push	0
	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	mov	ecx, DWORD PTR _msg$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	call	edx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 687
	mov	esi, esp
	push	10					; 0000000aH
	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	mov	ecx, DWORD PTR _msg$[ebp]
	mov	edx, DWORD PTR [ecx+64]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 691
	mov	eax, DWORD PTR _msg$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _delboy$[ebp]
	push	edx
	call	_transmit
	add	esp, 8
$LN2@LT:
; Line 693
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_LT	ENDP
_TEXT	ENDS
PUBLIC	??_C@_08JOJCKFBH@mark?7?$CFd?6?$AA@		; `string'
PUBLIC	__$ArrayPad$
;	COMDAT ??_C@_08JOJCKFBH@mark?7?$CFd?6?$AA@
CONST	SEGMENT
??_C@_08JOJCKFBH@mark?7?$CFd?6?$AA@ DB 'mark', 09H, '%d', 0aH, 00H ; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT _mark
_TEXT	SEGMENT
_buffer$ = -136						; size = 128
__$ArrayPad$ = -4					; size = 4
_delboy$ = 8						; size = 4
_marker$ = 12						; size = 4
_mark	PROC						; COMDAT
; Line 697
	push	ebp
	mov	ebp, esp
	sub	esp, 332				; 0000014cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-332]
	mov	ecx, 83					; 00000053H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 700
	mov	esi, esp
	mov	eax, DWORD PTR _marker$[ebp]
	push	eax
	push	OFFSET ??_C@_08JOJCKFBH@mark?7?$CFd?6?$AA@
	lea	ecx, DWORD PTR _buffer$[ebp]
	push	ecx
	call	DWORD PTR __imp__sprintf
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 704
	lea	eax, DWORD PTR _buffer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _delboy$[ebp]
	push	ecx
	call	_transmit
	add	esp, 8
; Line 705
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@mark
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 332				; 0000014cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN5@mark:
	DD	1
	DD	$LN4@mark
$LN4@mark:
	DD	-136					; ffffff78H
	DD	128					; 00000080H
	DD	$LN3@mark
$LN3@mark:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
_mark	ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DJLPLDGG@rewind?7?$CFd?6?$AA@		; `string'
PUBLIC	__$ArrayPad$
;	COMDAT ??_C@_0L@DJLPLDGG@rewind?7?$CFd?6?$AA@
CONST	SEGMENT
??_C@_0L@DJLPLDGG@rewind?7?$CFd?6?$AA@ DB 'rewind', 09H, '%d', 0aH, 00H ; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT _rewindMark
_TEXT	SEGMENT
_buffer$ = -136						; size = 128
__$ArrayPad$ = -4					; size = 4
_delboy$ = 8						; size = 4
_marker$ = 12						; size = 4
_rewindMark PROC					; COMDAT
; Line 709
	push	ebp
	mov	ebp, esp
	sub	esp, 332				; 0000014cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-332]
	mov	ecx, 83					; 00000053H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 712
	mov	esi, esp
	mov	eax, DWORD PTR _marker$[ebp]
	push	eax
	push	OFFSET ??_C@_0L@DJLPLDGG@rewind?7?$CFd?6?$AA@
	lea	ecx, DWORD PTR _buffer$[ebp]
	push	ecx
	call	DWORD PTR __imp__sprintf
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 716
	lea	eax, DWORD PTR _buffer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _delboy$[ebp]
	push	ecx
	call	_transmit
	add	esp, 8
; Line 718
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@rewindMark
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 332				; 0000014cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN5@rewindMark:
	DD	1
	DD	$LN4@rewindMark
$LN4@rewindMark:
	DD	-136					; ffffff78H
	DD	128					; 00000080H
	DD	$LN3@rewindMark
$LN3@rewindMark:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
_rewindMark ENDP
_TEXT	ENDS
PUBLIC	??_C@_07EBOLPGDK@rewind?6?$AA@			; `string'
;	COMDAT ??_C@_07EBOLPGDK@rewind?6?$AA@
CONST	SEGMENT
??_C@_07EBOLPGDK@rewind?6?$AA@ DB 'rewind', 0aH, 00H	; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT _rewindLast
_TEXT	SEGMENT
_delboy$ = 8						; size = 4
_rewindLast PROC					; COMDAT
; Line 722
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 723
	push	OFFSET ??_C@_07EBOLPGDK@rewind?6?$AA@
	mov	eax, DWORD PTR _delboy$[ebp]
	push	eax
	call	_transmit
	add	esp, 8
; Line 724
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_rewindLast ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BD@LEGDBIBN@beginBacktrack?7?$CFd?6?$AA@	; `string'
PUBLIC	__$ArrayPad$
;	COMDAT ??_C@_0BD@LEGDBIBN@beginBacktrack?7?$CFd?6?$AA@
CONST	SEGMENT
??_C@_0BD@LEGDBIBN@beginBacktrack?7?$CFd?6?$AA@ DB 'beginBacktrack', 09H, '%'
	DB	'd', 0aH, 00H				; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT _beginBacktrack
_TEXT	SEGMENT
_buffer$ = -136						; size = 128
__$ArrayPad$ = -4					; size = 4
_delboy$ = 8						; size = 4
_level$ = 12						; size = 4
_beginBacktrack PROC					; COMDAT
; Line 728
	push	ebp
	mov	ebp, esp
	sub	esp, 332				; 0000014cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-332]
	mov	ecx, 83					; 00000053H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 731
	mov	esi, esp
	mov	eax, DWORD PTR _level$[ebp]
	push	eax
	push	OFFSET ??_C@_0BD@LEGDBIBN@beginBacktrack?7?$CFd?6?$AA@
	lea	ecx, DWORD PTR _buffer$[ebp]
	push	ecx
	call	DWORD PTR __imp__sprintf
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 735
	lea	eax, DWORD PTR _buffer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _delboy$[ebp]
	push	ecx
	call	_transmit
	add	esp, 8
; Line 736
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@beginBackt
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 332				; 0000014cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN5@beginBackt:
	DD	1
	DD	$LN4@beginBackt
$LN4@beginBackt:
	DD	-136					; ffffff78H
	DD	128					; 00000080H
	DD	$LN3@beginBackt
$LN3@beginBackt:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
_beginBacktrack ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BE@JACBLDCL@endBacktrack?7?$CFd?7?$CFd?6?$AA@ ; `string'
PUBLIC	__$ArrayPad$
;	COMDAT ??_C@_0BE@JACBLDCL@endBacktrack?7?$CFd?7?$CFd?6?$AA@
CONST	SEGMENT
??_C@_0BE@JACBLDCL@endBacktrack?7?$CFd?7?$CFd?6?$AA@ DB 'endBacktrack', 09H
	DB	'%d', 09H, '%d', 0aH, 00H			; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT _endBacktrack
_TEXT	SEGMENT
_buffer$ = -136						; size = 128
__$ArrayPad$ = -4					; size = 4
_delboy$ = 8						; size = 4
_level$ = 12						; size = 4
_successful$ = 16					; size = 1
_endBacktrack PROC					; COMDAT
; Line 740
	push	ebp
	mov	ebp, esp
	sub	esp, 332				; 0000014cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-332]
	mov	ecx, 83					; 00000053H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 743
	movzx	eax, BYTE PTR _successful$[ebp]
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _level$[ebp]
	push	ecx
	push	OFFSET ??_C@_0BE@JACBLDCL@endBacktrack?7?$CFd?7?$CFd?6?$AA@
	lea	edx, DWORD PTR _buffer$[ebp]
	push	edx
	call	DWORD PTR __imp__sprintf
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 747
	lea	eax, DWORD PTR _buffer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _delboy$[ebp]
	push	ecx
	call	_transmit
	add	esp, 8
; Line 748
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@endBacktra
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 332				; 0000014cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN5@endBacktra:
	DD	1
	DD	$LN4@endBacktra
$LN4@endBacktra:
	DD	-136					; ffffff78H
	DD	128					; 00000080H
	DD	$LN3@endBacktra
$LN3@endBacktra:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
_endBacktrack ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BA@DOLCCEBI@location?7?$CFd?7?$CFd?6?$AA@ ; `string'
PUBLIC	__$ArrayPad$
;	COMDAT ??_C@_0BA@DOLCCEBI@location?7?$CFd?7?$CFd?6?$AA@
CONST	SEGMENT
??_C@_0BA@DOLCCEBI@location?7?$CFd?7?$CFd?6?$AA@ DB 'location', 09H, '%d', 09H
	DB	'%d', 0aH, 00H				; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT _location
_TEXT	SEGMENT
_buffer$ = -136						; size = 128
__$ArrayPad$ = -4					; size = 4
_delboy$ = 8						; size = 4
_line$ = 12						; size = 4
_pos$ = 16						; size = 4
_location PROC						; COMDAT
; Line 752
	push	ebp
	mov	ebp, esp
	sub	esp, 332				; 0000014cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-332]
	mov	ecx, 83					; 00000053H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 755
	mov	esi, esp
	mov	eax, DWORD PTR _pos$[ebp]
	push	eax
	mov	ecx, DWORD PTR _line$[ebp]
	push	ecx
	push	OFFSET ??_C@_0BA@DOLCCEBI@location?7?$CFd?7?$CFd?6?$AA@
	lea	edx, DWORD PTR _buffer$[ebp]
	push	edx
	call	DWORD PTR __imp__sprintf
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 759
	lea	eax, DWORD PTR _buffer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _delboy$[ebp]
	push	ecx
	call	_transmit
	add	esp, 8
; Line 760
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@location
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 332				; 0000014cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN5@location:
	DD	1
	DD	$LN4@location
$LN4@location:
	DD	-136					; ffffff78H
	DD	128					; 00000080H
	DD	$LN3@location
$LN3@location:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
_location ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BH@FBDPJABF@exception?7?$CFs?7?$CFd?7?$CFd?7?$CFd?6?$AA@ ; `string'
PUBLIC	__$ArrayPad$
;	COMDAT ??_C@_0BH@FBDPJABF@exception?7?$CFs?7?$CFd?7?$CFd?7?$CFd?6?$AA@
CONST	SEGMENT
??_C@_0BH@FBDPJABF@exception?7?$CFs?7?$CFd?7?$CFd?7?$CFd?6?$AA@ DB 'excep'
	DB	'tion', 09H, '%s', 09H, '%d', 09H, '%d', 09H, '%d', 0aH, 00H ; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT _recognitionException
_TEXT	SEGMENT
_buffer$ = -264						; size = 256
__$ArrayPad$ = -4					; size = 4
_delboy$ = 8						; size = 4
_e$ = 12						; size = 4
_recognitionException PROC				; COMDAT
; Line 764
	push	ebp
	mov	ebp, esp
	sub	esp, 460				; 000001ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-460]
	mov	ecx, 115				; 00000073H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 767
	mov	esi, esp
	mov	eax, DWORD PTR _e$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	push	ecx
	mov	edx, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [edx+44]
	push	eax
	mov	ecx, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	push	edx
	mov	eax, DWORD PTR _e$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	push	OFFSET ??_C@_0BH@FBDPJABF@exception?7?$CFs?7?$CFd?7?$CFd?7?$CFd?6?$AA@
	lea	edx, DWORD PTR _buffer$[ebp]
	push	edx
	call	DWORD PTR __imp__sprintf
	add	esp, 24					; 00000018H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 771
	lea	eax, DWORD PTR _buffer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _delboy$[ebp]
	push	ecx
	call	_transmit
	add	esp, 8
; Line 772
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@recognitio
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 460				; 000001ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN5@recognitio:
	DD	1
	DD	$LN4@recognitio
$LN4@recognitio:
	DD	-264					; fffffef8H
	DD	256					; 00000100H
	DD	$LN3@recognitio
$LN3@recognitio:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
_recognitionException ENDP
_TEXT	ENDS
PUBLIC	??_C@_0N@DCBHEMKM@beginResync?6?$AA@		; `string'
;	COMDAT ??_C@_0N@DCBHEMKM@beginResync?6?$AA@
CONST	SEGMENT
??_C@_0N@DCBHEMKM@beginResync?6?$AA@ DB 'beginResync', 0aH, 00H ; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT _beginResync
_TEXT	SEGMENT
_delboy$ = 8						; size = 4
_beginResync PROC					; COMDAT
; Line 776
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 777
	push	OFFSET ??_C@_0N@DCBHEMKM@beginResync?6?$AA@
	mov	eax, DWORD PTR _delboy$[ebp]
	push	eax
	call	_transmit
	add	esp, 8
; Line 778
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_beginResync ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@KHCEOHOJ@endResync?6?$AA@		; `string'
;	COMDAT ??_C@_0L@KHCEOHOJ@endResync?6?$AA@
CONST	SEGMENT
??_C@_0L@KHCEOHOJ@endResync?6?$AA@ DB 'endResync', 0aH, 00H ; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT _endResync
_TEXT	SEGMENT
_delboy$ = 8						; size = 4
_endResync PROC						; COMDAT
; Line 782
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 783
	push	OFFSET ??_C@_0L@KHCEOHOJ@endResync?6?$AA@
	mov	eax, DWORD PTR _delboy$[ebp]
	push	eax
	call	_transmit
	add	esp, 8
; Line 784
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_endResync ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BG@LEAPHAIG@semanticPredicate?7?$CFs?7?$AA@ ; `string'
PUBLIC	??_C@_05LAPONLG@false?$AA@			; `string'
PUBLIC	??_C@_04LOAJBDKD@true?$AA@			; `string'
EXTRN	__imp__malloc:PROC
;	COMDAT ??_C@_0BG@LEAPHAIG@semanticPredicate?7?$CFs?7?$AA@
CONST	SEGMENT
??_C@_0BG@LEAPHAIG@semanticPredicate?7?$CFs?7?$AA@ DB 'semanticPredicate', 09H
	DB	'%s', 09H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_05LAPONLG@false?$AA@
CONST	SEGMENT
??_C@_05LAPONLG@false?$AA@ DB 'false', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04LOAJBDKD@true?$AA@
CONST	SEGMENT
??_C@_04LOAJBDKD@true?$AA@ DB 'true', 00H		; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT _semanticPredicate
_TEXT	SEGMENT
tv83 = -220						; size = 4
tv75 = -220						; size = 4
_out$ = -20						; size = 4
_buffer$ = -8						; size = 4
_delboy$ = 8						; size = 4
_result$ = 12						; size = 1
_predicate$ = 16					; size = 4
_semanticPredicate PROC					; COMDAT
; Line 788
	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 792
	cmp	DWORD PTR _predicate$[ebp], 0
	je	$LN11@semanticPr
; Line 794
	mov	eax, DWORD PTR _predicate$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	lea	ecx, DWORD PTR [eax+eax+64]
	mov	esi, esp
	push	ecx
	call	DWORD PTR __imp__malloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _buffer$[ebp], eax
; Line 796
	cmp	DWORD PTR _buffer$[ebp], 0
	je	$LN9@semanticPr
; Line 798
	movzx	eax, BYTE PTR _result$[ebp]
	cmp	eax, 1
	jne	SHORT $LN13@semanticPr
	mov	DWORD PTR tv75[ebp], OFFSET ??_C@_04LOAJBDKD@true?$AA@
	jmp	SHORT $LN14@semanticPr
$LN13@semanticPr:
	mov	DWORD PTR tv75[ebp], OFFSET ??_C@_05LAPONLG@false?$AA@
$LN14@semanticPr:
	mov	esi, esp
	mov	ecx, DWORD PTR tv75[ebp]
	push	ecx
	push	OFFSET ??_C@_0BG@LEAPHAIG@semanticPredicate?7?$CFs?7?$AA@
	mov	edx, DWORD PTR _buffer$[ebp]
	push	edx
	call	DWORD PTR __imp__sprintf
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	add	eax, DWORD PTR _buffer$[ebp]
	mov	DWORD PTR _out$[ebp], eax
$LN8@semanticPr:
; Line 800
	mov	eax, DWORD PTR _predicate$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	$LN7@semanticPr
; Line 802
	mov	eax, DWORD PTR _predicate$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR tv83[ebp], cl
	cmp	BYTE PTR tv83[ebp], 10			; 0000000aH
	je	SHORT $LN4@semanticPr
	cmp	BYTE PTR tv83[ebp], 13			; 0000000dH
	je	SHORT $LN3@semanticPr
	cmp	BYTE PTR tv83[ebp], 37			; 00000025H
	je	SHORT $LN2@semanticPr
	jmp	$LN1@semanticPr
$LN4@semanticPr:
; Line 806
	mov	eax, DWORD PTR _out$[ebp]
	mov	BYTE PTR [eax], 37			; 00000025H
	mov	ecx, DWORD PTR _out$[ebp]
	add	ecx, 1
	mov	DWORD PTR _out$[ebp], ecx
; Line 807
	mov	eax, DWORD PTR _out$[ebp]
	mov	BYTE PTR [eax], 48			; 00000030H
	mov	ecx, DWORD PTR _out$[ebp]
	add	ecx, 1
	mov	DWORD PTR _out$[ebp], ecx
; Line 808
	mov	eax, DWORD PTR _out$[ebp]
	mov	BYTE PTR [eax], 65			; 00000041H
	mov	ecx, DWORD PTR _out$[ebp]
	add	ecx, 1
	mov	DWORD PTR _out$[ebp], ecx
; Line 809
	jmp	SHORT $LN5@semanticPr
$LN3@semanticPr:
; Line 813
	mov	eax, DWORD PTR _out$[ebp]
	mov	BYTE PTR [eax], 37			; 00000025H
	mov	ecx, DWORD PTR _out$[ebp]
	add	ecx, 1
	mov	DWORD PTR _out$[ebp], ecx
; Line 814
	mov	eax, DWORD PTR _out$[ebp]
	mov	BYTE PTR [eax], 48			; 00000030H
	mov	ecx, DWORD PTR _out$[ebp]
	add	ecx, 1
	mov	DWORD PTR _out$[ebp], ecx
; Line 815
	mov	eax, DWORD PTR _out$[ebp]
	mov	BYTE PTR [eax], 68			; 00000044H
	mov	ecx, DWORD PTR _out$[ebp]
	add	ecx, 1
	mov	DWORD PTR _out$[ebp], ecx
; Line 816
	jmp	SHORT $LN5@semanticPr
$LN2@semanticPr:
; Line 820
	mov	eax, DWORD PTR _out$[ebp]
	mov	BYTE PTR [eax], 37			; 00000025H
	mov	ecx, DWORD PTR _out$[ebp]
	add	ecx, 1
	mov	DWORD PTR _out$[ebp], ecx
; Line 821
	mov	eax, DWORD PTR _out$[ebp]
	mov	BYTE PTR [eax], 48			; 00000030H
	mov	ecx, DWORD PTR _out$[ebp]
	add	ecx, 1
	mov	DWORD PTR _out$[ebp], ecx
; Line 822
	mov	eax, DWORD PTR _out$[ebp]
	mov	BYTE PTR [eax], 68			; 00000044H
	mov	ecx, DWORD PTR _out$[ebp]
	add	ecx, 1
	mov	DWORD PTR _out$[ebp], ecx
; Line 823
	jmp	SHORT $LN5@semanticPr
$LN1@semanticPr:
; Line 828
	mov	eax, DWORD PTR _out$[ebp]
	mov	ecx, DWORD PTR _predicate$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl
	mov	eax, DWORD PTR _out$[ebp]
	add	eax, 1
	mov	DWORD PTR _out$[ebp], eax
$LN5@semanticPr:
; Line 832
	mov	eax, DWORD PTR _predicate$[ebp]
	add	eax, 1
	mov	DWORD PTR _predicate$[ebp], eax
; Line 833
	jmp	$LN8@semanticPr
$LN7@semanticPr:
; Line 834
	mov	eax, DWORD PTR _out$[ebp]
	mov	BYTE PTR [eax], 10			; 0000000aH
	mov	ecx, DWORD PTR _out$[ebp]
	add	ecx, 1
	mov	DWORD PTR _out$[ebp], ecx
; Line 835
	mov	eax, DWORD PTR _out$[ebp]
	mov	BYTE PTR [eax], 0
	mov	ecx, DWORD PTR _out$[ebp]
	add	ecx, 1
	mov	DWORD PTR _out$[ebp], ecx
$LN9@semanticPr:
; Line 840
	mov	eax, DWORD PTR _buffer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _delboy$[ebp]
	push	ecx
	call	_transmit
	add	esp, 8
$LN11@semanticPr:
; Line 842
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_semanticPredicate ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _commence
_TEXT	SEGMENT
_delboy$ = 8						; size = 4
_commence PROC						; COMDAT
; Line 851
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 854
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_commence ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@KANKBBAE@terminate?6?$AA@		; `string'
;	COMDAT ??_C@_0L@KANKBBAE@terminate?6?$AA@
CONST	SEGMENT
??_C@_0L@KANKBBAE@terminate?6?$AA@ DB 'terminate', 0aH, 00H ; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT _terminate
_TEXT	SEGMENT
_delboy$ = 8						; size = 4
_terminate PROC						; COMDAT
; Line 862
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 865
	push	10					; 0000000aH
	push	OFFSET ??_C@_0L@KANKBBAE@terminate?6?$AA@
	mov	eax, DWORD PTR _delboy$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	_sockSend
	add	esp, 12					; 0000000cH
; Line 866
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_terminate ENDP
_TEXT	ENDS
PUBLIC	??_C@_0N@CLFGHGNF@consumeNode?7?$AA@		; `string'
;	COMDAT ??_C@_0N@CLFGHGNF@consumeNode?7?$AA@
CONST	SEGMENT
??_C@_0N@CLFGHGNF@consumeNode?7?$AA@ DB 'consumeNode', 09H, 00H ; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT _consumeNode
_TEXT	SEGMENT
_buffer$ = -8						; size = 4
_delboy$ = 8						; size = 4
_t$ = 12						; size = 4
_consumeNode PROC					; COMDAT
; Line 873
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 876
	mov	eax, DWORD PTR _t$[ebp]
	push	eax
	mov	ecx, DWORD PTR _delboy$[ebp]
	push	ecx
	call	_serializeNode
	add	esp, 8
	mov	DWORD PTR _buffer$[ebp], eax
; Line 880
	mov	esi, esp
	push	OFFSET ??_C@_0N@CLFGHGNF@consumeNode?7?$AA@
	push	0
	mov	eax, DWORD PTR _buffer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _buffer$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	call	edx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 881
	mov	esi, esp
	push	10					; 0000000aH
	mov	eax, DWORD PTR _buffer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _buffer$[ebp]
	mov	edx, DWORD PTR [ecx+64]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 885
	mov	esi, esp
	mov	eax, DWORD PTR _delboy$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	mov	edx, DWORD PTR _delboy$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR [eax+100]
	call	ecx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	edx, DWORD PTR [eax+4]
	push	edx
	mov	eax, DWORD PTR _delboy$[ebp]
	push	eax
	call	_transmit
	add	esp, 8
; Line 886
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_consumeNode ENDP
_TEXT	ENDS
PUBLIC	??_C@_03KELPNMOF@LN?7?$AA@			; `string'
;	COMDAT ??_C@_03KELPNMOF@LN?7?$AA@
CONST	SEGMENT
??_C@_03KELPNMOF@LN?7?$AA@ DB 'LN', 09H, 00H		; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT _LTT
_TEXT	SEGMENT
_buffer$ = -8						; size = 4
_delboy$ = 8						; size = 4
_i$ = 12						; size = 4
_t$ = 16						; size = 4
_LTT	PROC						; COMDAT
; Line 890
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 893
	mov	eax, DWORD PTR _t$[ebp]
	push	eax
	mov	ecx, DWORD PTR _delboy$[ebp]
	push	ecx
	call	_serializeNode
	add	esp, 8
	mov	DWORD PTR _buffer$[ebp], eax
; Line 897
	mov	esi, esp
	push	OFFSET ??_C@_01GPOEFGEJ@?7?$AA@
	push	0
	mov	eax, DWORD PTR _buffer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _buffer$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	call	edx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 898
	mov	esi, esp
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _buffer$[ebp]
	push	ecx
	mov	edx, DWORD PTR _buffer$[ebp]
	mov	eax, DWORD PTR [edx+60]
	call	eax
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 899
	mov	esi, esp
	push	OFFSET ??_C@_03KELPNMOF@LN?7?$AA@
	push	0
	mov	eax, DWORD PTR _buffer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _buffer$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	call	edx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 900
	mov	esi, esp
	push	10					; 0000000aH
	mov	eax, DWORD PTR _buffer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _buffer$[ebp]
	mov	edx, DWORD PTR [ecx+64]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 904
	mov	esi, esp
	mov	eax, DWORD PTR _delboy$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	mov	edx, DWORD PTR _delboy$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR [eax+100]
	call	ecx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	edx, DWORD PTR [eax+4]
	push	edx
	mov	eax, DWORD PTR _delboy$[ebp]
	push	eax
	call	_transmit
	add	esp, 8
; Line 905
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_LTT	ENDP
_TEXT	ENDS
PUBLIC	??_C@_0M@LCJNOAFD@nilNode?7?$CFd?6?$AA@		; `string'
PUBLIC	__$ArrayPad$
;	COMDAT ??_C@_0M@LCJNOAFD@nilNode?7?$CFd?6?$AA@
CONST	SEGMENT
??_C@_0M@LCJNOAFD@nilNode?7?$CFd?6?$AA@ DB 'nilNode', 09H, '%d', 0aH, 00H ; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT _nilNode
_TEXT	SEGMENT
_buffer$ = -136						; size = 128
__$ArrayPad$ = -4					; size = 4
_delboy$ = 8						; size = 4
_t$ = 12						; size = 4
_nilNode PROC						; COMDAT
; Line 909
	push	ebp
	mov	ebp, esp
	sub	esp, 332				; 0000014cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-332]
	mov	ecx, 83					; 00000053H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 911
	mov	esi, esp
	mov	eax, DWORD PTR _t$[ebp]
	push	eax
	mov	ecx, DWORD PTR _delboy$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	mov	eax, DWORD PTR _delboy$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx+128]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_0M@LCJNOAFD@nilNode?7?$CFd?6?$AA@
	lea	eax, DWORD PTR _buffer$[ebp]
	push	eax
	call	DWORD PTR __imp__sprintf
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 912
	lea	eax, DWORD PTR _buffer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _delboy$[ebp]
	push	ecx
	call	_transmit
	add	esp, 8
; Line 913
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@nilNode
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 332				; 0000014cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN5@nilNode:
	DD	1
	DD	$LN4@nilNode
$LN4@nilNode:
	DD	-136					; ffffff78H
	DD	128					; 00000080H
	DD	$LN3@nilNode
$LN3@nilNode:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
_nilNode ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BN@GBIFKPIJ@createNodeFromTokenElements?5?$AA@ ; `string'
;	COMDAT ??_C@_0BN@GBIFKPIJ@createNodeFromTokenElements?5?$AA@
CONST	SEGMENT
??_C@_0BN@GBIFKPIJ@createNodeFromTokenElements?5?$AA@ DB 'createNodeFromT'
	DB	'okenElements ', 00H				; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT _createNode
_TEXT	SEGMENT
_delboy$ = 8						; size = 4
_t$ = 12						; size = 4
_createNode PROC					; COMDAT
; Line 917
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 920
	mov	eax, DWORD PTR _delboy$[ebp]
	cmp	DWORD PTR [eax+20], 0
	jne	SHORT $LN1@createNode
; Line 926
	mov	esi, esp
	push	64					; 00000040H
	mov	eax, DWORD PTR _delboy$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _delboy$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _delboy$[ebp]
	mov	DWORD PTR [ecx+20], eax
$LN1@createNode:
; Line 931
	mov	esi, esp
	push	OFFSET ??_C@_0BN@GBIFKPIJ@createNodeFromTokenElements?5?$AA@
	mov	eax, DWORD PTR _delboy$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	mov	edx, DWORD PTR _delboy$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR [eax+28]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 938
	mov	esi, esp
	mov	eax, DWORD PTR _t$[ebp]
	push	eax
	mov	ecx, DWORD PTR _delboy$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	mov	eax, DWORD PTR _delboy$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx+128]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	eax
	mov	eax, DWORD PTR _delboy$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	mov	edx, DWORD PTR _delboy$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR [eax+68]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 939
	mov	esi, esp
	push	9
	mov	eax, DWORD PTR _delboy$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	mov	edx, DWORD PTR _delboy$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR [eax+64]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 943
	mov	esi, esp
	mov	eax, DWORD PTR _t$[ebp]
	push	eax
	mov	ecx, DWORD PTR _delboy$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	mov	eax, DWORD PTR _delboy$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx+84]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	eax
	mov	eax, DWORD PTR _delboy$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	mov	edx, DWORD PTR _delboy$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR [eax+68]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 947
	mov	esi, esp
	mov	eax, DWORD PTR _t$[ebp]
	push	eax
	mov	ecx, DWORD PTR _delboy$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	mov	eax, DWORD PTR _delboy$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx+92]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	mov	eax, DWORD PTR _delboy$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	call	_serializeText
	add	esp, 8
; Line 948
	mov	esi, esp
	push	10					; 0000000aH
	mov	eax, DWORD PTR _delboy$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	mov	edx, DWORD PTR _delboy$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR [eax+64]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 955
	mov	esi, esp
	mov	eax, DWORD PTR _delboy$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	mov	edx, DWORD PTR _delboy$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR [eax+100]
	call	ecx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	edx, DWORD PTR [eax+4]
	push	edx
	mov	eax, DWORD PTR _delboy$[ebp]
	push	eax
	call	_transmit
	add	esp, 8
; Line 957
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_createNode ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@OOIEOANM@errorNode?7?$AA@		; `string'
;	COMDAT ??_C@_0L@OOIEOANM@errorNode?7?$AA@
CONST	SEGMENT
??_C@_0L@OOIEOANM@errorNode?7?$AA@ DB 'errorNode', 09H, 00H ; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT _errorNode
_TEXT	SEGMENT
_delboy$ = 8						; size = 4
_t$ = 12						; size = 4
_errorNode PROC						; COMDAT
; Line 960
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 963
	mov	eax, DWORD PTR _delboy$[ebp]
	cmp	DWORD PTR [eax+20], 0
	jne	SHORT $LN1@errorNode
; Line 969
	mov	esi, esp
	push	64					; 00000040H
	mov	eax, DWORD PTR _delboy$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _delboy$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _delboy$[ebp]
	mov	DWORD PTR [ecx+20], eax
$LN1@errorNode:
; Line 974
	mov	esi, esp
	push	OFFSET ??_C@_0L@OOIEOANM@errorNode?7?$AA@
	mov	eax, DWORD PTR _delboy$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	mov	edx, DWORD PTR _delboy$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR [eax+28]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 981
	mov	esi, esp
	mov	eax, DWORD PTR _t$[ebp]
	push	eax
	mov	ecx, DWORD PTR _delboy$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	mov	eax, DWORD PTR _delboy$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx+128]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	eax
	mov	eax, DWORD PTR _delboy$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	mov	edx, DWORD PTR _delboy$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR [eax+68]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 982
	mov	esi, esp
	push	9
	mov	eax, DWORD PTR _delboy$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	mov	edx, DWORD PTR _delboy$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR [eax+64]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 986
	mov	esi, esp
	push	0
	mov	eax, DWORD PTR _delboy$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	mov	edx, DWORD PTR _delboy$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR [eax+68]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 990
	mov	esi, esp
	mov	eax, DWORD PTR _t$[ebp]
	push	eax
	mov	ecx, DWORD PTR _delboy$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	mov	eax, DWORD PTR _delboy$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx+92]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	mov	eax, DWORD PTR _delboy$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	call	_serializeText
	add	esp, 8
; Line 991
	mov	esi, esp
	push	10					; 0000000aH
	mov	eax, DWORD PTR _delboy$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	mov	edx, DWORD PTR _delboy$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR [eax+64]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 998
	mov	esi, esp
	mov	eax, DWORD PTR _delboy$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	mov	edx, DWORD PTR _delboy$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR [eax+100]
	call	ecx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	edx, DWORD PTR [eax+4]
	push	edx
	mov	eax, DWORD PTR _delboy$[ebp]
	push	eax
	call	_transmit
	add	esp, 8
; Line 1000
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_errorNode ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BC@JHAHHABL@createNode?7?$CFd?7?$CFd?6?$AA@ ; `string'
PUBLIC	__$ArrayPad$
;	COMDAT ??_C@_0BC@JHAHHABL@createNode?7?$CFd?7?$CFd?6?$AA@
CONST	SEGMENT
??_C@_0BC@JHAHHABL@createNode?7?$CFd?7?$CFd?6?$AA@ DB 'createNode', 09H, '%'
	DB	'd', 09H, '%d', 0aH, 00H			; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT _createNodeTok
_TEXT	SEGMENT
_buffer$ = -136						; size = 128
__$ArrayPad$ = -4					; size = 4
_delboy$ = 8						; size = 4
_node$ = 12						; size = 4
_token$ = 16						; size = 4
_createNodeTok PROC					; COMDAT
; Line 1004
	push	ebp
	mov	ebp, esp
	sub	esp, 332				; 0000014cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-332]
	mov	ecx, 83					; 00000053H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 1007
	mov	esi, esp
	mov	eax, DWORD PTR _token$[ebp]
	push	eax
	mov	ecx, DWORD PTR _token$[ebp]
	mov	edx, DWORD PTR [ecx+116]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	eax
	mov	edi, esp
	mov	eax, DWORD PTR _node$[ebp]
	push	eax
	mov	ecx, DWORD PTR _delboy$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	mov	eax, DWORD PTR _delboy$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx+128]
	call	edx
	add	esp, 8
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	push	OFFSET ??_C@_0BC@JHAHHABL@createNode?7?$CFd?7?$CFd?6?$AA@
	lea	eax, DWORD PTR _buffer$[ebp]
	push	eax
	call	DWORD PTR __imp__sprintf
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1009
	lea	eax, DWORD PTR _buffer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _delboy$[ebp]
	push	ecx
	call	_transmit
	add	esp, 8
; Line 1010
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@createNode@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 332				; 0000014cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN5@createNode@2:
	DD	1
	DD	$LN4@createNode@2
$LN4@createNode@2:
	DD	-136					; ffffff78H
	DD	128					; 00000080H
	DD	$LN3@createNode@2
$LN3@createNode@2:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
_createNodeTok ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BC@HDNJJMMJ@becomeRoot?7?$CFd?7?$CFd?6?$AA@ ; `string'
PUBLIC	__$ArrayPad$
;	COMDAT ??_C@_0BC@HDNJJMMJ@becomeRoot?7?$CFd?7?$CFd?6?$AA@
CONST	SEGMENT
??_C@_0BC@HDNJJMMJ@becomeRoot?7?$CFd?7?$CFd?6?$AA@ DB 'becomeRoot', 09H, '%'
	DB	'd', 09H, '%d', 0aH, 00H			; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT _becomeRoot
_TEXT	SEGMENT
_buffer$ = -136						; size = 128
__$ArrayPad$ = -4					; size = 4
_delboy$ = 8						; size = 4
_newRoot$ = 12						; size = 4
_oldRoot$ = 16						; size = 4
_becomeRoot PROC					; COMDAT
; Line 1014
	push	ebp
	mov	ebp, esp
	sub	esp, 332				; 0000014cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-332]
	mov	ecx, 83					; 00000053H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 1019
	mov	esi, esp
	mov	eax, DWORD PTR _oldRoot$[ebp]
	push	eax
	mov	ecx, DWORD PTR _delboy$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	mov	eax, DWORD PTR _delboy$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx+128]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	eax
	mov	edi, esp
	mov	eax, DWORD PTR _newRoot$[ebp]
	push	eax
	mov	ecx, DWORD PTR _delboy$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	mov	eax, DWORD PTR _delboy$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx+128]
	call	edx
	add	esp, 8
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	push	OFFSET ??_C@_0BC@HDNJJMMJ@becomeRoot?7?$CFd?7?$CFd?6?$AA@
	lea	eax, DWORD PTR _buffer$[ebp]
	push	eax
	call	DWORD PTR __imp__sprintf
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1020
	lea	eax, DWORD PTR _buffer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _delboy$[ebp]
	push	ecx
	call	_transmit
	add	esp, 8
; Line 1021
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@becomeRoot
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 332				; 0000014cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN5@becomeRoot:
	DD	1
	DD	$LN4@becomeRoot
$LN4@becomeRoot:
	DD	-136					; ffffff78H
	DD	128					; 00000080H
	DD	$LN3@becomeRoot
$LN3@becomeRoot:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
_becomeRoot ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BA@CIOIAFCB@addChild?7?$CFd?7?$CFd?6?$AA@ ; `string'
PUBLIC	__$ArrayPad$
;	COMDAT ??_C@_0BA@CIOIAFCB@addChild?7?$CFd?7?$CFd?6?$AA@
CONST	SEGMENT
??_C@_0BA@CIOIAFCB@addChild?7?$CFd?7?$CFd?6?$AA@ DB 'addChild', 09H, '%d', 09H
	DB	'%d', 0aH, 00H				; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT _addChild
_TEXT	SEGMENT
_buffer$ = -136						; size = 128
__$ArrayPad$ = -4					; size = 4
_delboy$ = 8						; size = 4
_root$ = 12						; size = 4
_child$ = 16						; size = 4
_addChild PROC						; COMDAT
; Line 1026
	push	ebp
	mov	ebp, esp
	sub	esp, 332				; 0000014cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-332]
	mov	ecx, 83					; 00000053H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 1031
	mov	esi, esp
	mov	eax, DWORD PTR _child$[ebp]
	push	eax
	mov	ecx, DWORD PTR _delboy$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	mov	eax, DWORD PTR _delboy$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx+128]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	eax
	mov	edi, esp
	mov	eax, DWORD PTR _root$[ebp]
	push	eax
	mov	ecx, DWORD PTR _delboy$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	mov	eax, DWORD PTR _delboy$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx+128]
	call	edx
	add	esp, 8
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	push	OFFSET ??_C@_0BA@CIOIAFCB@addChild?7?$CFd?7?$CFd?6?$AA@
	lea	eax, DWORD PTR _buffer$[ebp]
	push	eax
	call	DWORD PTR __imp__sprintf
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1032
	lea	eax, DWORD PTR _buffer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _delboy$[ebp]
	push	ecx
	call	_transmit
	add	esp, 8
; Line 1033
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@addChild
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 332				; 0000014cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN5@addChild:
	DD	1
	DD	$LN4@addChild
$LN4@addChild:
	DD	-136					; ffffff78H
	DD	128					; 00000080H
	DD	$LN3@addChild
$LN3@addChild:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
_addChild ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BF@NJPIKMHA@becomeRoot?7?$CFd?7?$CFd?7?$CFd?6?$AA@ ; `string'
PUBLIC	__$ArrayPad$
;	COMDAT ??_C@_0BF@NJPIKMHA@becomeRoot?7?$CFd?7?$CFd?7?$CFd?6?$AA@
CONST	SEGMENT
??_C@_0BF@NJPIKMHA@becomeRoot?7?$CFd?7?$CFd?7?$CFd?6?$AA@ DB 'becomeRoot', 09H
	DB	'%d', 09H, '%d', 09H, '%d', 0aH, 00H		; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT _setTokenBoundaries
_TEXT	SEGMENT
_buffer$ = -136						; size = 128
__$ArrayPad$ = -4					; size = 4
_delboy$ = 8						; size = 4
_t$ = 12						; size = 4
_tokenStartIndex$ = 16					; size = 4
_tokenStopIndex$ = 20					; size = 4
_setTokenBoundaries PROC				; COMDAT
; Line 1037
	push	ebp
	mov	ebp, esp
	sub	esp, 332				; 0000014cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-332]
	mov	ecx, 83					; 00000053H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 1043
	mov	esi, esp
	mov	eax, DWORD PTR _tokenStopIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _tokenStartIndex$[ebp]
	push	ecx
	mov	edi, esp
	mov	edx, DWORD PTR _t$[ebp]
	push	edx
	mov	eax, DWORD PTR _delboy$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	mov	edx, DWORD PTR _delboy$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	ecx, DWORD PTR [eax+128]
	call	ecx
	add	esp, 8
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	push	OFFSET ??_C@_0BF@NJPIKMHA@becomeRoot?7?$CFd?7?$CFd?7?$CFd?6?$AA@
	lea	edx, DWORD PTR _buffer$[ebp]
	push	edx
	call	DWORD PTR __imp__sprintf
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1044
	lea	eax, DWORD PTR _buffer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _delboy$[ebp]
	push	ecx
	call	_transmit
	add	esp, 8
; Line 1045
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@setTokenBo
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 332				; 0000014cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN5@setTokenBo:
	DD	1
	DD	$LN4@setTokenBo
$LN4@setTokenBo:
	DD	-136					; ffffff78H
	DD	128					; 00000080H
	DD	$LN3@setTokenBo
$LN3@setTokenBo:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
_setTokenBoundaries ENDP
_TEXT	ENDS
END
