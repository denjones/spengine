; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\Users\Ken\Documents\GitHub\spengine\Antlr\antlr3commontoken.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_antlr3CommonTokenNew
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\users\ken\documents\github\spengine\antlr\antlr3commontoken.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT _antlr3CommonTokenNew
_TEXT	SEGMENT
_token$ = -8						; size = 4
_ttype$ = 8						; size = 4
_antlr3CommonTokenNew PROC				; COMDAT
; Line 74
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 79
	call	_newToken
	mov	DWORD PTR _token$[ebp], eax
; Line 81
	cmp	DWORD PTR _token$[ebp], 0
	je	SHORT $LN1@antlr3Comm
; Line 83
	mov	esi, esp
	mov	eax, DWORD PTR _ttype$[ebp]
	push	eax
	mov	ecx, DWORD PTR _token$[ebp]
	push	ecx
	mov	edx, DWORD PTR _token$[ebp]
	mov	eax, DWORD PTR [edx+88]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@antlr3Comm:
; Line 88
	mov	eax, DWORD PTR _token$[ebp]
; Line 89
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_antlr3CommonTokenNew ENDP
_TEXT	ENDS
PUBLIC	_antlr3SetTokenAPI
PUBLIC	_antlr3TokenFactoryNew
EXTRN	__imp__malloc:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _antlr3TokenFactoryNew
_TEXT	SEGMENT
_factory$ = -8						; size = 4
_input$ = 8						; size = 4
_antlr3TokenFactoryNew PROC				; COMDAT
; Line 93
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 98
	mov	esi, esp
	push	180					; 000000b4H
	call	DWORD PTR __imp__malloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _factory$[ebp], eax
; Line 100
	cmp	DWORD PTR _factory$[ebp], 0
	jne	SHORT $LN1@antlr3Toke
; Line 102
	xor	eax, eax
	jmp	$LN2@antlr3Toke
$LN1@antlr3Toke:
; Line 107
	mov	eax, DWORD PTR _factory$[ebp]
	mov	DWORD PTR [eax+164], OFFSET _newPoolToken
; Line 108
	mov	eax, DWORD PTR _factory$[ebp]
	mov	DWORD PTR [eax+176], OFFSET _factoryClose
; Line 109
	mov	eax, DWORD PTR _factory$[ebp]
	mov	DWORD PTR [eax+172], OFFSET _setInputStream
; Line 110
	mov	eax, DWORD PTR _factory$[ebp]
	mov	DWORD PTR [eax+168], OFFSET _factoryReset
; Line 114
	mov	eax, DWORD PTR _factory$[ebp]
	mov	DWORD PTR [eax+4], -1
; Line 115
	mov	eax, DWORD PTR _factory$[ebp]
	mov	DWORD PTR [eax], 0
; Line 116
	mov	eax, DWORD PTR _factory$[ebp]
	mov	DWORD PTR [eax+8], -1
; Line 117
	mov	eax, DWORD PTR _factory$[ebp]
	push	eax
	call	_newPool
	add	esp, 4
; Line 122
	mov	eax, DWORD PTR _factory$[ebp]
	add	eax, 16					; 00000010H
	push	eax
	call	_antlr3SetTokenAPI
	add	esp, 4
; Line 126
	mov	eax, DWORD PTR _factory$[ebp]
	mov	BYTE PTR [eax+20], 1
; Line 130
	mov	eax, DWORD PTR _input$[ebp]
	push	eax
	mov	ecx, DWORD PTR _factory$[ebp]
	push	ecx
	call	_setInputStream
	add	esp, 8
; Line 132
	mov	eax, DWORD PTR _factory$[ebp]
$LN2@antlr3Toke:
; Line 134
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_antlr3TokenFactoryNew ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _setInputStream
_TEXT	SEGMENT
_factory$ = 8						; size = 4
_input$ = 12						; size = 4
_setInputStream PROC					; COMDAT
; Line 138
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 139
	mov	eax, DWORD PTR _factory$[ebp]
	mov	ecx, DWORD PTR _input$[ebp]
	mov	DWORD PTR [eax+160], ecx
; Line 140
	mov	eax, DWORD PTR _factory$[ebp]
	mov	ecx, DWORD PTR _input$[ebp]
	mov	DWORD PTR [eax+44], ecx
; Line 141
	cmp	DWORD PTR _input$[ebp], 0
	je	SHORT $LN2@setInputSt
; Line 143
	mov	eax, DWORD PTR _factory$[ebp]
	mov	ecx, DWORD PTR _input$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+24], edx
; Line 145
	jmp	SHORT $LN3@setInputSt
$LN2@setInputSt:
; Line 147
	mov	eax, DWORD PTR _factory$[ebp]
	mov	DWORD PTR [eax+24], 0
$LN3@setInputSt:
; Line 149
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_setInputStream ENDP
_TEXT	ENDS
EXTRN	__imp__calloc:PROC
EXTRN	__imp__realloc:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _newPool
_TEXT	SEGMENT
_factory$ = 8						; size = 4
_newPool PROC						; COMDAT
; Line 153
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 156
	mov	eax, DWORD PTR _factory$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _factory$[ebp]
	mov	DWORD PTR [edx+4], ecx
; Line 161
	mov	eax, DWORD PTR _factory$[ebp]
	mov	ecx, DWORD PTR _factory$[ebp]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+8]
	jle	SHORT $LN1@newPool
; Line 168
	mov	eax, DWORD PTR _factory$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	lea	edx, DWORD PTR [ecx*4+4]
	mov	esi, esp
	push	edx
	mov	eax, DWORD PTR _factory$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	DWORD PTR __imp__realloc
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	edx, DWORD PTR _factory$[ebp]
	mov	DWORD PTR [edx], eax
; Line 174
	mov	esi, esp
	push	147456					; 00024000H
	push	1
	call	DWORD PTR __imp__calloc
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _factory$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _factory$[ebp]
	mov	ecx, DWORD PTR [ecx]
	mov	DWORD PTR [ecx+edx*4], eax
; Line 178
	mov	eax, DWORD PTR _factory$[ebp]
	mov	ecx, DWORD PTR _factory$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+8], edx
$LN1@newPool:
; Line 183
	mov	eax, DWORD PTR _factory$[ebp]
	mov	DWORD PTR [eax+12], 0
; Line 188
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_newPool ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _newPoolToken
_TEXT	SEGMENT
tv86 = -208						; size = 4
_token$ = -8						; size = 4
_factory$ = 8						; size = 4
_newPoolToken PROC					; COMDAT
; Line 192
	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 198
	mov	eax, DWORD PTR _factory$[ebp]
	cmp	DWORD PTR [eax+12], 1024		; 00000400H
	jb	SHORT $LN2@newPoolTok
; Line 202
	mov	eax, DWORD PTR _factory$[ebp]
	push	eax
	call	_newPool
	add	esp, 4
$LN2@newPoolTok:
; Line 208
	mov	eax, DWORD PTR _factory$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _factory$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR _factory$[ebp]
	mov	edx, DWORD PTR [edx+12]
	imul	edx, 144				; 00000090H
	add	edx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR _token$[ebp], edx
; Line 209
	mov	eax, DWORD PTR _factory$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	add	ecx, 1
	mov	edx, DWORD PTR _factory$[ebp]
	mov	DWORD PTR [edx+12], ecx
; Line 215
	mov	eax, DWORD PTR _token$[ebp]
	cmp	DWORD PTR [eax+128], 0
	jne	SHORT $LN1@newPoolTok
; Line 217
	mov	eax, DWORD PTR _token$[ebp]
	push	eax
	call	_antlr3SetTokenAPI
	add	esp, 4
; Line 221
	mov	eax, DWORD PTR _token$[ebp]
	mov	BYTE PTR [eax+4], 1
; Line 222
	mov	eax, DWORD PTR _factory$[ebp]
	cmp	DWORD PTR [eax+160], 0
	jne	SHORT $LN5@newPoolTok
	mov	DWORD PTR tv86[ebp], 0
	jmp	SHORT $LN6@newPoolTok
$LN5@newPoolTok:
	mov	ecx, DWORD PTR _factory$[ebp]
	mov	edx, DWORD PTR [ecx+160]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR tv86[ebp], eax
$LN6@newPoolTok:
	mov	ecx, DWORD PTR _token$[ebp]
	mov	edx, DWORD PTR tv86[ebp]
	mov	DWORD PTR [ecx+8], edx
; Line 223
	mov	eax, DWORD PTR _token$[ebp]
	mov	ecx, DWORD PTR _factory$[ebp]
	mov	edx, DWORD PTR [ecx+160]
	mov	DWORD PTR [eax+28], edx
$LN1@newPoolTok:
; Line 228
	mov	eax, DWORD PTR _token$[ebp]
; Line 229
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_newPoolToken ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _factoryReset
_TEXT	SEGMENT
_factory$ = 8						; size = 4
_factoryReset PROC					; COMDAT
; Line 233
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 237
	mov	eax, DWORD PTR _factory$[ebp]
	mov	DWORD PTR [eax+4], -1
; Line 238
	mov	eax, DWORD PTR _factory$[ebp]
	push	eax
	call	_newPool
	add	esp, 4
; Line 239
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_factoryReset ENDP
_TEXT	ENDS
EXTRN	__imp__free:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _factoryClose
_TEXT	SEGMENT
tv72 = -256						; size = 4
_check$ = -56						; size = 4
_token$ = -44						; size = 4
_limit$ = -32						; size = 4
_poolCount$ = -20					; size = 4
_pool$ = -8						; size = 4
_factory$ = 8						; size = 4
_factoryClose PROC					; COMDAT
; Line 243
	push	ebp
	mov	ebp, esp
	sub	esp, 256				; 00000100H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-256]
	mov	ecx, 64					; 00000040H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 252
	mov	DWORD PTR _poolCount$[ebp], 0
	jmp	SHORT $LN8@factoryClo
$LN7@factoryClo:
	mov	eax, DWORD PTR _poolCount$[ebp]
	add	eax, 1
	mov	DWORD PTR _poolCount$[ebp], eax
$LN8@factoryClo:
	mov	eax, DWORD PTR _factory$[ebp]
	mov	ecx, DWORD PTR _poolCount$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jg	$LN6@factoryClo
; Line 256
	mov	eax, DWORD PTR _factory$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _poolCount$[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR _pool$[ebp], eax
; Line 260
	mov	eax, DWORD PTR _factory$[ebp]
	mov	ecx, DWORD PTR _poolCount$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jne	SHORT $LN11@factoryClo
	mov	edx, DWORD PTR _factory$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN12@factoryClo
$LN11@factoryClo:
	mov	DWORD PTR tv72[ebp], 1024		; 00000400H
$LN12@factoryClo:
	mov	ecx, DWORD PTR tv72[ebp]
	mov	DWORD PTR _limit$[ebp], ecx
; Line 265
	cmp	DWORD PTR _limit$[ebp], 0
	jbe	SHORT $LN5@factoryClo
; Line 269
	mov	DWORD PTR _token$[ebp], 0
	jmp	SHORT $LN4@factoryClo
$LN3@factoryClo:
	mov	eax, DWORD PTR _token$[ebp]
	add	eax, 1
	mov	DWORD PTR _token$[ebp], eax
$LN4@factoryClo:
	mov	eax, DWORD PTR _token$[ebp]
	cmp	eax, DWORD PTR _limit$[ebp]
	jae	SHORT $LN5@factoryClo
; Line 273
	mov	eax, DWORD PTR _token$[ebp]
	imul	eax, 144				; 00000090H
	add	eax, DWORD PTR _pool$[ebp]
	mov	DWORD PTR _check$[ebp], eax
; Line 278
	mov	eax, DWORD PTR _check$[ebp]
	cmp	DWORD PTR [eax+64], 0
	je	SHORT $LN1@factoryClo
	mov	eax, DWORD PTR _check$[ebp]
	cmp	DWORD PTR [eax+68], 0
	je	SHORT $LN1@factoryClo
; Line 280
	mov	esi, esp
	mov	eax, DWORD PTR _check$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	push	ecx
	mov	edx, DWORD PTR _check$[ebp]
	mov	eax, DWORD PTR [edx+68]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 281
	mov	eax, DWORD PTR _check$[ebp]
	mov	DWORD PTR [eax+64], 0
$LN1@factoryClo:
; Line 283
	jmp	SHORT $LN3@factoryClo
$LN5@factoryClo:
; Line 288
	mov	eax, DWORD PTR _factory$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR _poolCount$[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	push	eax
	call	DWORD PTR __imp__free
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 289
	mov	eax, DWORD PTR _factory$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _poolCount$[ebp]
	mov	DWORD PTR [ecx+edx*4], 0
; Line 290
	jmp	$LN7@factoryClo
$LN6@factoryClo:
; Line 295
	mov	esi, esp
	mov	eax, DWORD PTR _factory$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	DWORD PTR __imp__free
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 299
	mov	esi, esp
	mov	eax, DWORD PTR _factory$[ebp]
	push	eax
	call	DWORD PTR __imp__free
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 300
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 256				; 00000100H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_factoryClose ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _newToken
_TEXT	SEGMENT
_token$ = -8						; size = 4
_newToken PROC						; COMDAT
; Line 305
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 310
	mov	esi, esp
	push	144					; 00000090H
	push	1
	call	DWORD PTR __imp__calloc
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _token$[ebp], eax
; Line 312
	cmp	DWORD PTR _token$[ebp], 0
	jne	SHORT $LN1@newToken
; Line 314
	xor	eax, eax
	jmp	SHORT $LN2@newToken
$LN1@newToken:
; Line 319
	mov	eax, DWORD PTR _token$[ebp]
	push	eax
	call	_antlr3SetTokenAPI
	add	esp, 4
; Line 320
	mov	eax, DWORD PTR _token$[ebp]
	mov	BYTE PTR [eax+4], 0
; Line 322
	mov	eax, DWORD PTR _token$[ebp]
$LN2@newToken:
; Line 323
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_newToken ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _antlr3SetTokenAPI
_TEXT	SEGMENT
_token$ = 8						; size = 4
_antlr3SetTokenAPI PROC					; COMDAT
; Line 327
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 328
	mov	eax, DWORD PTR _token$[ebp]
	mov	DWORD PTR [eax+72], OFFSET _getText
; Line 329
	mov	eax, DWORD PTR _token$[ebp]
	mov	DWORD PTR [eax+76], OFFSET _setText
; Line 330
	mov	eax, DWORD PTR _token$[ebp]
	mov	DWORD PTR [eax+80], OFFSET _setText8
; Line 331
	mov	eax, DWORD PTR _token$[ebp]
	mov	DWORD PTR [eax+84], OFFSET _getType
; Line 332
	mov	eax, DWORD PTR _token$[ebp]
	mov	DWORD PTR [eax+88], OFFSET _setType
; Line 333
	mov	eax, DWORD PTR _token$[ebp]
	mov	DWORD PTR [eax+92], OFFSET _getLine
; Line 334
	mov	eax, DWORD PTR _token$[ebp]
	mov	DWORD PTR [eax+96], OFFSET _setLine
; Line 335
	mov	eax, DWORD PTR _token$[ebp]
	mov	DWORD PTR [eax+96], OFFSET _setLine
; Line 336
	mov	eax, DWORD PTR _token$[ebp]
	mov	DWORD PTR [eax+100], OFFSET _getCharPositionInLine
; Line 337
	mov	eax, DWORD PTR _token$[ebp]
	mov	DWORD PTR [eax+104], OFFSET _setCharPositionInLine
; Line 338
	mov	eax, DWORD PTR _token$[ebp]
	mov	DWORD PTR [eax+108], OFFSET _getChannel
; Line 339
	mov	eax, DWORD PTR _token$[ebp]
	mov	DWORD PTR [eax+112], OFFSET _setChannel
; Line 340
	mov	eax, DWORD PTR _token$[ebp]
	mov	DWORD PTR [eax+116], OFFSET _getTokenIndex
; Line 341
	mov	eax, DWORD PTR _token$[ebp]
	mov	DWORD PTR [eax+120], OFFSET _setTokenIndex
; Line 342
	mov	eax, DWORD PTR _token$[ebp]
	mov	DWORD PTR [eax+124], OFFSET _getStartIndex
; Line 343
	mov	eax, DWORD PTR _token$[ebp]
	mov	DWORD PTR [eax+128], OFFSET _setStartIndex
; Line 344
	mov	eax, DWORD PTR _token$[ebp]
	mov	DWORD PTR [eax+132], OFFSET _getStopIndex
; Line 345
	mov	eax, DWORD PTR _token$[ebp]
	mov	DWORD PTR [eax+136], OFFSET _setStopIndex
; Line 346
	mov	eax, DWORD PTR _token$[ebp]
	mov	DWORD PTR [eax+140], OFFSET _toString
; Line 349
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_antlr3SetTokenAPI ENDP
_TEXT	ENDS
PUBLIC	??_C@_05FLDDOMNH@?$DMEOF?$DO?$AA@		; `string'
;	COMDAT ??_C@_05FLDDOMNH@?$DMEOF?$DO?$AA@
CONST	SEGMENT
??_C@_05FLDDOMNH@?$DMEOF?$DO?$AA@ DB '<EOF>', 00H	; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT _getText
_TEXT	SEGMENT
tv65 = -196						; size = 4
_token$ = 8						; size = 4
_getText PROC						; COMDAT
; Line 352
	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 353
	mov	eax, DWORD PTR _token$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	DWORD PTR tv65[ebp], ecx
	cmp	DWORD PTR tv65[ebp], 1
	je	SHORT $LN6@getText
	cmp	DWORD PTR tv65[ebp], 2
	je	SHORT $LN7@getText
	jmp	SHORT $LN3@getText
$LN7@getText:
; Line 360
	mov	eax, DWORD PTR _token$[ebp]
	mov	eax, DWORD PTR [eax+48]
	jmp	$LN10@getText
; Line 361
	jmp	$LN10@getText
$LN6@getText:
; Line 369
	mov	eax, DWORD PTR _token$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN5@getText
; Line 371
	mov	esi, esp
	mov	eax, DWORD PTR _token$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	push	ecx
	mov	edx, DWORD PTR _token$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _token$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [edx+28]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _token$[ebp]
	mov	DWORD PTR [ecx+48], eax
; Line 372
	mov	eax, DWORD PTR _token$[ebp]
	mov	DWORD PTR [eax+44], 2
; Line 373
	mov	eax, DWORD PTR _token$[ebp]
	mov	eax, DWORD PTR [eax+48]
	jmp	$LN10@getText
; Line 375
	jmp	SHORT $LN4@getText
$LN5@getText:
; Line 379
	xor	eax, eax
	jmp	$LN10@getText
$LN4@getText:
; Line 381
	jmp	$LN10@getText
$LN3@getText:
; Line 387
	mov	eax, DWORD PTR _token$[ebp]
	cmp	DWORD PTR [eax], -1
	jne	SHORT $LN2@getText
; Line 389
	mov	esi, esp
	push	OFFSET ??_C@_05FLDDOMNH@?$DMEOF?$DO?$AA@
	mov	eax, DWORD PTR _token$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _token$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [eax+28]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	edx, DWORD PTR _token$[ebp]
	mov	DWORD PTR [edx+48], eax
; Line 390
	mov	eax, DWORD PTR _token$[ebp]
	mov	DWORD PTR [eax+44], 2
; Line 391
	mov	eax, DWORD PTR _token$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	edx, DWORD PTR _token$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx], eax
; Line 392
	mov	eax, DWORD PTR _token$[ebp]
	mov	eax, DWORD PTR [eax+48]
	jmp	SHORT $LN10@getText
$LN2@getText:
; Line 400
	mov	eax, DWORD PTR _token$[ebp]
	cmp	DWORD PTR [eax+28], 0
	je	SHORT $LN1@getText
; Line 406
	mov	esi, esp
	mov	eax, DWORD PTR _token$[ebp]
	push	eax
	mov	ecx, DWORD PTR _token$[ebp]
	mov	edx, DWORD PTR [ecx+132]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	eax
	mov	edi, esp
	mov	eax, DWORD PTR _token$[ebp]
	push	eax
	mov	ecx, DWORD PTR _token$[ebp]
	mov	edx, DWORD PTR [ecx+124]
	call	edx
	add	esp, 4
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	mov	eax, DWORD PTR _token$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	push	ecx
	mov	edx, DWORD PTR _token$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	ecx, DWORD PTR [eax+84]
	call	ecx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	SHORT $LN10@getText
$LN1@getText:
; Line 411
	xor	eax, eax
$LN10@getText:
; Line 414
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 196				; 000000c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_getText ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _setText8
_TEXT	SEGMENT
tv66 = -196						; size = 4
_token$ = 8						; size = 4
_text$ = 12						; size = 4
_setText8 PROC						; COMDAT
; Line 416
	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 419
	cmp	DWORD PTR _text$[ebp], 0
	jne	SHORT $LN5@setText8
	jmp	SHORT $LN6@setText8
$LN5@setText8:
; Line 421
	mov	eax, DWORD PTR _token$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	DWORD PTR tv66[ebp], ecx
	cmp	DWORD PTR tv66[ebp], 0
	jb	SHORT $LN1@setText8
	cmp	DWORD PTR tv66[ebp], 1
	jbe	SHORT $LN2@setText8
	jmp	SHORT $LN1@setText8
$LN2@setText8:
; Line 429
	mov	eax, DWORD PTR _token$[ebp]
	mov	DWORD PTR [eax+44], 1
; Line 430
	mov	eax, DWORD PTR _token$[ebp]
	mov	ecx, DWORD PTR _text$[ebp]
	mov	DWORD PTR [eax+48], ecx
; Line 431
	jmp	SHORT $LN6@setText8
$LN1@setText8:
; Line 437
	mov	esi, esp
	mov	eax, DWORD PTR _text$[ebp]
	push	eax
	mov	ecx, DWORD PTR _token$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	push	edx
	mov	eax, DWORD PTR _token$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	edx, DWORD PTR [ecx+28]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN6@setText8:
; Line 444
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 196				; 000000c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_setText8 ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _setText
_TEXT	SEGMENT
_token$ = 8						; size = 4
_text$ = 12						; size = 4
_setText PROC						; COMDAT
; Line 452
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 456
	mov	eax, DWORD PTR _token$[ebp]
	mov	DWORD PTR [eax+44], 2
; Line 457
	mov	eax, DWORD PTR _token$[ebp]
	mov	ecx, DWORD PTR _text$[ebp]
	mov	DWORD PTR [eax+48], ecx
; Line 462
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_setText ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _getType
_TEXT	SEGMENT
_token$ = 8						; size = 4
_getType PROC						; COMDAT
; Line 465
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 466
	mov	eax, DWORD PTR _token$[ebp]
	mov	eax, DWORD PTR [eax]
; Line 467
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_getType ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _setType
_TEXT	SEGMENT
_token$ = 8						; size = 4
_type$ = 12						; size = 4
_setType PROC						; COMDAT
; Line 470
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 471
	mov	eax, DWORD PTR _token$[ebp]
	mov	ecx, DWORD PTR _type$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 472
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_setType ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _getLine
_TEXT	SEGMENT
_token$ = 8						; size = 4
_getLine PROC						; COMDAT
; Line 475
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 476
	mov	eax, DWORD PTR _token$[ebp]
	mov	eax, DWORD PTR [eax+12]
; Line 477
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_getLine ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _setLine
_TEXT	SEGMENT
_token$ = 8						; size = 4
_line$ = 12						; size = 4
_setLine PROC						; COMDAT
; Line 480
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 481
	mov	eax, DWORD PTR _token$[ebp]
	mov	ecx, DWORD PTR _line$[ebp]
	mov	DWORD PTR [eax+12], ecx
; Line 482
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_setLine ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _getCharPositionInLine
_TEXT	SEGMENT
_token$ = 8						; size = 4
_getCharPositionInLine PROC				; COMDAT
; Line 485
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 486
	mov	eax, DWORD PTR _token$[ebp]
	mov	eax, DWORD PTR [eax+20]
; Line 487
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_getCharPositionInLine ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _setCharPositionInLine
_TEXT	SEGMENT
_token$ = 8						; size = 4
_pos$ = 12						; size = 4
_setCharPositionInLine PROC				; COMDAT
; Line 490
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 491
	mov	eax, DWORD PTR _token$[ebp]
	mov	ecx, DWORD PTR _pos$[ebp]
	mov	DWORD PTR [eax+20], ecx
; Line 492
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_setCharPositionInLine ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _getChannel
_TEXT	SEGMENT
_token$ = 8						; size = 4
_getChannel PROC					; COMDAT
; Line 495
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 496
	mov	eax, DWORD PTR _token$[ebp]
	mov	eax, DWORD PTR [eax+24]
; Line 497
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_getChannel ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _setChannel
_TEXT	SEGMENT
_token$ = 8						; size = 4
_channel$ = 12						; size = 4
_setChannel PROC					; COMDAT
; Line 500
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 501
	mov	eax, DWORD PTR _token$[ebp]
	mov	ecx, DWORD PTR _channel$[ebp]
	mov	DWORD PTR [eax+24], ecx
; Line 502
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_setChannel ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _getTokenIndex
_TEXT	SEGMENT
_token$ = 8						; size = 4
_getTokenIndex PROC					; COMDAT
; Line 505
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 506
	mov	eax, DWORD PTR _token$[ebp]
	mov	eax, DWORD PTR [eax+32]
; Line 507
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_getTokenIndex ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _setTokenIndex
_TEXT	SEGMENT
_token$ = 8						; size = 4
_index$ = 12						; size = 4
_setTokenIndex PROC					; COMDAT
; Line 510
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 511
	mov	eax, DWORD PTR _token$[ebp]
	mov	ecx, DWORD PTR _index$[ebp]
	mov	DWORD PTR [eax+32], ecx
; Line 512
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_setTokenIndex ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _getStartIndex
_TEXT	SEGMENT
tv69 = -196						; size = 4
_token$ = 8						; size = 4
_getStartIndex PROC					; COMDAT
; Line 515
	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 516
	mov	eax, DWORD PTR _token$[ebp]
	cmp	DWORD PTR [eax+36], -1
	jne	SHORT $LN3@getStartIn
	mov	ecx, DWORD PTR _token$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@getStartIn
$LN3@getStartIn:
	mov	ecx, DWORD PTR _token$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR tv69[ebp], edx
$LN4@getStartIn:
	mov	eax, DWORD PTR tv69[ebp]
; Line 517
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_getStartIndex ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _setStartIndex
_TEXT	SEGMENT
_token$ = 8						; size = 4
_start$ = 12						; size = 4
_setStartIndex PROC					; COMDAT
; Line 520
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 521
	mov	eax, DWORD PTR _token$[ebp]
	mov	ecx, DWORD PTR _start$[ebp]
	mov	DWORD PTR [eax+36], ecx
; Line 522
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_setStartIndex ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _getStopIndex
_TEXT	SEGMENT
_token$ = 8						; size = 4
_getStopIndex PROC					; COMDAT
; Line 525
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 526
	mov	eax, DWORD PTR _token$[ebp]
	mov	eax, DWORD PTR [eax+40]
; Line 527
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_getStopIndex ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _setStopIndex
_TEXT	SEGMENT
_token$ = 8						; size = 4
_stop$ = 12						; size = 4
_setStopIndex PROC					; COMDAT
; Line 530
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 531
	mov	eax, DWORD PTR _token$[ebp]
	mov	ecx, DWORD PTR _stop$[ebp]
	mov	DWORD PTR [eax+40], ecx
; Line 532
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_setStopIndex ENDP
_TEXT	ENDS
PUBLIC	??_C@_09PNCFGGF@?5LinePos?3?$AA@		; `string'
PUBLIC	??_C@_06FIEBOLOH@Line?3?5?$AA@			; `string'
PUBLIC	??_C@_02KCKGHPCA@?$CJ?5?$AA@			; `string'
PUBLIC	??_C@_0M@NJBPMJAH@?$CIchannel?5?$DN?5?$AA@	; `string'
PUBLIC	??_C@_02LLMPMKNF@?$DO?5?$AA@			; `string'
PUBLIC	??_C@_08KMKDFHHP@?8?0?5type?$DM?$AA@		; `string'
PUBLIC	??_C@_04KDEICOAP@?$CJ?5?$DN?8?$AA@		; `string'
PUBLIC	??_C@_07LGAFOPAI@?9Stop?3?5?$AA@		; `string'
PUBLIC	??_C@_09LBBAKIIA@?5?$CIStart?3?5?$AA@		; `string'
PUBLIC	??_C@_08NEOOKDGC@?$FLIndex?3?5?$AA@		; `string'
;	COMDAT ??_C@_09PNCFGGF@?5LinePos?3?$AA@
CONST	SEGMENT
??_C@_09PNCFGGF@?5LinePos?3?$AA@ DB ' LinePos:', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06FIEBOLOH@Line?3?5?$AA@
CONST	SEGMENT
??_C@_06FIEBOLOH@Line?3?5?$AA@ DB 'Line: ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02KCKGHPCA@?$CJ?5?$AA@
CONST	SEGMENT
??_C@_02KCKGHPCA@?$CJ?5?$AA@ DB ') ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@NJBPMJAH@?$CIchannel?5?$DN?5?$AA@
CONST	SEGMENT
??_C@_0M@NJBPMJAH@?$CIchannel?5?$DN?5?$AA@ DB '(channel = ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02LLMPMKNF@?$DO?5?$AA@
CONST	SEGMENT
??_C@_02LLMPMKNF@?$DO?5?$AA@ DB '> ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08KMKDFHHP@?8?0?5type?$DM?$AA@
CONST	SEGMENT
??_C@_08KMKDFHHP@?8?0?5type?$DM?$AA@ DB ''', type<', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04KDEICOAP@?$CJ?5?$DN?8?$AA@
CONST	SEGMENT
??_C@_04KDEICOAP@?$CJ?5?$DN?8?$AA@ DB ') =''', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07LGAFOPAI@?9Stop?3?5?$AA@
CONST	SEGMENT
??_C@_07LGAFOPAI@?9Stop?3?5?$AA@ DB '-Stop: ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09LBBAKIIA@?5?$CIStart?3?5?$AA@
CONST	SEGMENT
??_C@_09LBBAKIIA@?5?$CIStart?3?5?$AA@ DB ' (Start: ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08NEOOKDGC@?$FLIndex?3?5?$AA@
CONST	SEGMENT
??_C@_08NEOOKDGC@?$FLIndex?3?5?$AA@ DB '[Index: ', 00H	; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT _toString
_TEXT	SEGMENT
_outtext$ = -20						; size = 4
_text$ = -8						; size = 4
_token$ = 8						; size = 4
_toString PROC						; COMDAT
; Line 535
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 539
	mov	esi, esp
	mov	eax, DWORD PTR _token$[ebp]
	push	eax
	mov	ecx, DWORD PTR _token$[ebp]
	mov	edx, DWORD PTR [ecx+72]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _text$[ebp], eax
; Line 541
	cmp	DWORD PTR _text$[ebp], 0
	jne	SHORT $LN3@toString
; Line 543
	xor	eax, eax
	jmp	$LN4@toString
$LN3@toString:
; Line 546
	mov	eax, DWORD PTR _text$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN2@toString
; Line 548
	mov	eax, DWORD PTR _text$[ebp]
	jmp	$LN4@toString
$LN2@toString:
; Line 553
	mov	esi, esp
	mov	eax, DWORD PTR _text$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _text$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+8]
	call	ecx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _outtext$[ebp], eax
; Line 559
	mov	esi, esp
	push	OFFSET ??_C@_08NEOOKDGC@?$FLIndex?3?5?$AA@
	mov	eax, DWORD PTR _outtext$[ebp]
	push	eax
	mov	ecx, DWORD PTR _outtext$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 560
	mov	esi, esp
	mov	eax, DWORD PTR _token$[ebp]
	push	eax
	mov	ecx, DWORD PTR _token$[ebp]
	mov	edx, DWORD PTR [ecx+116]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	eax
	mov	eax, DWORD PTR _outtext$[ebp]
	push	eax
	mov	ecx, DWORD PTR _outtext$[ebp]
	mov	edx, DWORD PTR [ecx+68]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 561
	mov	esi, esp
	push	OFFSET ??_C@_09LBBAKIIA@?5?$CIStart?3?5?$AA@
	mov	eax, DWORD PTR _outtext$[ebp]
	push	eax
	mov	ecx, DWORD PTR _outtext$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 562
	mov	esi, esp
	mov	eax, DWORD PTR _token$[ebp]
	push	eax
	mov	ecx, DWORD PTR _token$[ebp]
	mov	edx, DWORD PTR [ecx+124]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	eax
	mov	eax, DWORD PTR _outtext$[ebp]
	push	eax
	mov	ecx, DWORD PTR _outtext$[ebp]
	mov	edx, DWORD PTR [ecx+68]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 563
	mov	esi, esp
	push	OFFSET ??_C@_07LGAFOPAI@?9Stop?3?5?$AA@
	mov	eax, DWORD PTR _outtext$[ebp]
	push	eax
	mov	ecx, DWORD PTR _outtext$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 564
	mov	esi, esp
	mov	eax, DWORD PTR _token$[ebp]
	push	eax
	mov	ecx, DWORD PTR _token$[ebp]
	mov	edx, DWORD PTR [ecx+132]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	eax
	mov	eax, DWORD PTR _outtext$[ebp]
	push	eax
	mov	ecx, DWORD PTR _outtext$[ebp]
	mov	edx, DWORD PTR [ecx+68]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 565
	mov	esi, esp
	push	OFFSET ??_C@_04KDEICOAP@?$CJ?5?$DN?8?$AA@
	mov	eax, DWORD PTR _outtext$[ebp]
	push	eax
	mov	ecx, DWORD PTR _outtext$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 566
	mov	esi, esp
	mov	eax, DWORD PTR _text$[ebp]
	push	eax
	mov	ecx, DWORD PTR _outtext$[ebp]
	push	ecx
	mov	edx, DWORD PTR _outtext$[ebp]
	mov	eax, DWORD PTR [edx+52]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 567
	mov	esi, esp
	push	OFFSET ??_C@_08KMKDFHHP@?8?0?5type?$DM?$AA@
	mov	eax, DWORD PTR _outtext$[ebp]
	push	eax
	mov	ecx, DWORD PTR _outtext$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 568
	mov	esi, esp
	mov	eax, DWORD PTR _token$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _outtext$[ebp]
	push	edx
	mov	eax, DWORD PTR _outtext$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 569
	mov	esi, esp
	push	OFFSET ??_C@_02LLMPMKNF@?$DO?5?$AA@
	mov	eax, DWORD PTR _outtext$[ebp]
	push	eax
	mov	ecx, DWORD PTR _outtext$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 571
	mov	esi, esp
	mov	eax, DWORD PTR _token$[ebp]
	push	eax
	mov	ecx, DWORD PTR _token$[ebp]
	mov	edx, DWORD PTR [ecx+108]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jbe	SHORT $LN1@toString
; Line 573
	mov	esi, esp
	push	OFFSET ??_C@_0M@NJBPMJAH@?$CIchannel?5?$DN?5?$AA@
	mov	eax, DWORD PTR _outtext$[ebp]
	push	eax
	mov	ecx, DWORD PTR _outtext$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 574
	mov	esi, esp
	mov	eax, DWORD PTR _token$[ebp]
	push	eax
	mov	ecx, DWORD PTR _token$[ebp]
	mov	edx, DWORD PTR [ecx+108]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	eax
	mov	eax, DWORD PTR _outtext$[ebp]
	push	eax
	mov	ecx, DWORD PTR _outtext$[ebp]
	mov	edx, DWORD PTR [ecx+68]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 575
	mov	esi, esp
	push	OFFSET ??_C@_02KCKGHPCA@?$CJ?5?$AA@
	mov	eax, DWORD PTR _outtext$[ebp]
	push	eax
	mov	ecx, DWORD PTR _outtext$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@toString:
; Line 578
	mov	esi, esp
	push	OFFSET ??_C@_06FIEBOLOH@Line?3?5?$AA@
	mov	eax, DWORD PTR _outtext$[ebp]
	push	eax
	mov	ecx, DWORD PTR _outtext$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 579
	mov	esi, esp
	mov	eax, DWORD PTR _token$[ebp]
	push	eax
	mov	ecx, DWORD PTR _token$[ebp]
	mov	edx, DWORD PTR [ecx+92]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	eax
	mov	eax, DWORD PTR _outtext$[ebp]
	push	eax
	mov	ecx, DWORD PTR _outtext$[ebp]
	mov	edx, DWORD PTR [ecx+68]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 580
	mov	esi, esp
	push	OFFSET ??_C@_09PNCFGGF@?5LinePos?3?$AA@
	mov	eax, DWORD PTR _outtext$[ebp]
	push	eax
	mov	ecx, DWORD PTR _outtext$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 581
	mov	esi, esp
	mov	eax, DWORD PTR _token$[ebp]
	push	eax
	mov	ecx, DWORD PTR _token$[ebp]
	mov	edx, DWORD PTR [ecx+100]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	eax
	mov	eax, DWORD PTR _outtext$[ebp]
	push	eax
	mov	ecx, DWORD PTR _outtext$[ebp]
	mov	edx, DWORD PTR [ecx+68]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 582
	mov	esi, esp
	push	93					; 0000005dH
	mov	eax, DWORD PTR _outtext$[ebp]
	push	eax
	mov	ecx, DWORD PTR _outtext$[ebp]
	mov	edx, DWORD PTR [ecx+64]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 584
	mov	eax, DWORD PTR _outtext$[ebp]
$LN4@toString:
; Line 585
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_toString ENDP
_TEXT	ENDS
END
