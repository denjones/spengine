; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\Users\pa\repos\spengine\Antlr\antlr3convertutf.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

CONST	SEGMENT
_trailingBytesForUTF8 DB 00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	04H
	DB	04H
	DB	04H
	DB	04H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
_offsetsFromUTF8 DD 00H
	DD	03080H
	DD	0e2080H
	DD	03c82080H
	DD	0fa082080H
	DD	082082080H
_firstByteMark DB 00H
	DB	00H
	DB	0c0H
	DB	0e0H
	DB	0f0H
	DB	0f8H
	DB	0fcH
CONST	ENDS
PUBLIC	_ConvertUTF32toUTF16
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\users\pa\repos\spengine\antlr\antlr3convertutf.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT _ConvertUTF32toUTF16
_TEXT	SEGMENT
_ch$33881 = -44						; size = 4
_target$ = -32						; size = 4
_source$ = -20						; size = 4
_result$ = -8						; size = 4
_sourceStart$ = 8					; size = 4
_sourceEnd$ = 12					; size = 4
_targetStart$ = 16					; size = 4
_targetEnd$ = 20					; size = 4
_flags$ = 24						; size = 4
_ConvertUTF32toUTF16 PROC				; COMDAT
; Line 54
	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 55
	mov	DWORD PTR _result$[ebp], 0
; Line 56
	mov	eax, DWORD PTR _sourceStart$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _source$[ebp], ecx
; Line 57
	mov	eax, DWORD PTR _targetStart$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _target$[ebp], ecx
$LN14@ConvertUTF:
; Line 58
	mov	eax, DWORD PTR _source$[ebp]
	cmp	eax, DWORD PTR _sourceEnd$[ebp]
	jae	$LN13@ConvertUTF
; Line 60
	mov	eax, DWORD PTR _target$[ebp]
	cmp	eax, DWORD PTR _targetEnd$[ebp]
	jb	SHORT $LN12@ConvertUTF
; Line 61
	mov	DWORD PTR _result$[ebp], 2
	jmp	$LN13@ConvertUTF
$LN12@ConvertUTF:
; Line 63
	mov	eax, DWORD PTR _source$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _ch$33881[ebp], ecx
	mov	edx, DWORD PTR _source$[ebp]
	add	edx, 4
	mov	DWORD PTR _source$[ebp], edx
; Line 64
	cmp	DWORD PTR _ch$33881[ebp], 65535		; 0000ffffH
	ja	SHORT $LN11@ConvertUTF
; Line 66
	cmp	DWORD PTR _ch$33881[ebp], 55296		; 0000d800H
	jb	SHORT $LN10@ConvertUTF
	cmp	DWORD PTR _ch$33881[ebp], 57343		; 0000dfffH
	ja	SHORT $LN10@ConvertUTF
; Line 67
	cmp	DWORD PTR _flags$[ebp], 0
	jne	SHORT $LN9@ConvertUTF
; Line 68
	mov	eax, DWORD PTR _source$[ebp]
	sub	eax, 4
	mov	DWORD PTR _source$[ebp], eax
; Line 69
	mov	DWORD PTR _result$[ebp], 3
; Line 70
	jmp	$LN13@ConvertUTF
; Line 71
	jmp	SHORT $LN8@ConvertUTF
$LN9@ConvertUTF:
; Line 72
	mov	eax, 65533				; 0000fffdH
	mov	ecx, DWORD PTR _target$[ebp]
	mov	WORD PTR [ecx], ax
	mov	edx, DWORD PTR _target$[ebp]
	add	edx, 2
	mov	DWORD PTR _target$[ebp], edx
$LN8@ConvertUTF:
; Line 74
	jmp	SHORT $LN7@ConvertUTF
$LN10@ConvertUTF:
; Line 75
	mov	eax, DWORD PTR _target$[ebp]
	mov	cx, WORD PTR _ch$33881[ebp]
	mov	WORD PTR [eax], cx
	mov	edx, DWORD PTR _target$[ebp]
	add	edx, 2
	mov	DWORD PTR _target$[ebp], edx
$LN7@ConvertUTF:
; Line 76
	jmp	$LN6@ConvertUTF
$LN11@ConvertUTF:
; Line 77
	cmp	DWORD PTR _ch$33881[ebp], 1114111	; 0010ffffH
	jbe	SHORT $LN5@ConvertUTF
; Line 78
	cmp	DWORD PTR _flags$[ebp], 0
	jne	SHORT $LN4@ConvertUTF
; Line 79
	mov	DWORD PTR _result$[ebp], 3
; Line 80
	jmp	SHORT $LN3@ConvertUTF
$LN4@ConvertUTF:
; Line 81
	mov	eax, 65533				; 0000fffdH
	mov	ecx, DWORD PTR _target$[ebp]
	mov	WORD PTR [ecx], ax
	mov	edx, DWORD PTR _target$[ebp]
	add	edx, 2
	mov	DWORD PTR _target$[ebp], edx
$LN3@ConvertUTF:
; Line 83
	jmp	SHORT $LN6@ConvertUTF
$LN5@ConvertUTF:
; Line 85
	mov	eax, DWORD PTR _target$[ebp]
	add	eax, 2
	cmp	eax, DWORD PTR _targetEnd$[ebp]
	jb	SHORT $LN1@ConvertUTF
; Line 86
	mov	eax, DWORD PTR _source$[ebp]
	sub	eax, 4
	mov	DWORD PTR _source$[ebp], eax
; Line 87
	mov	DWORD PTR _result$[ebp], 2
	jmp	SHORT $LN13@ConvertUTF
$LN1@ConvertUTF:
; Line 89
	mov	eax, DWORD PTR _ch$33881[ebp]
	sub	eax, 65536				; 00010000H
	mov	DWORD PTR _ch$33881[ebp], eax
; Line 90
	mov	eax, DWORD PTR _ch$33881[ebp]
	shr	eax, 10					; 0000000aH
	add	eax, 55296				; 0000d800H
	mov	ecx, DWORD PTR _target$[ebp]
	mov	WORD PTR [ecx], ax
	mov	edx, DWORD PTR _target$[ebp]
	add	edx, 2
	mov	DWORD PTR _target$[ebp], edx
; Line 91
	mov	eax, DWORD PTR _ch$33881[ebp]
	and	eax, 1023				; 000003ffH
	add	eax, 56320				; 0000dc00H
	mov	ecx, DWORD PTR _target$[ebp]
	mov	WORD PTR [ecx], ax
	mov	edx, DWORD PTR _target$[ebp]
	add	edx, 2
	mov	DWORD PTR _target$[ebp], edx
$LN6@ConvertUTF:
; Line 93
	jmp	$LN14@ConvertUTF
$LN13@ConvertUTF:
; Line 94
	mov	eax, DWORD PTR _sourceStart$[ebp]
	mov	ecx, DWORD PTR _source$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 95
	mov	eax, DWORD PTR _targetStart$[ebp]
	mov	ecx, DWORD PTR _target$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 96
	mov	eax, DWORD PTR _result$[ebp]
; Line 97
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_ConvertUTF32toUTF16 ENDP
_TEXT	ENDS
PUBLIC	_ConvertUTF16toUTF32
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _ConvertUTF16toUTF32
_TEXT	SEGMENT
_oldSource$33927 = -68					; size = 4
_ch2$ = -56						; size = 4
_ch$ = -44						; size = 4
_target$ = -32						; size = 4
_source$ = -20						; size = 4
_result$ = -8						; size = 4
_sourceStart$ = 8					; size = 4
_sourceEnd$ = 12					; size = 4
_targetStart$ = 16					; size = 4
_targetEnd$ = 20					; size = 4
_flags$ = 24						; size = 4
_ConvertUTF16toUTF32 PROC				; COMDAT
; Line 103
	push	ebp
	mov	ebp, esp
	sub	esp, 264				; 00000108H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-264]
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 104
	mov	DWORD PTR _result$[ebp], 0
; Line 105
	mov	eax, DWORD PTR _sourceStart$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _source$[ebp], ecx
; Line 106
	mov	eax, DWORD PTR _targetStart$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _target$[ebp], ecx
$LN12@ConvertUTF@2:
; Line 108
	mov	eax, DWORD PTR _source$[ebp]
	cmp	eax, DWORD PTR _sourceEnd$[ebp]
	jae	$LN11@ConvertUTF@2
; Line 109
	mov	eax, DWORD PTR _source$[ebp]
	mov	DWORD PTR _oldSource$33927[ebp], eax
; Line 110
	mov	eax, DWORD PTR _source$[ebp]
	movzx	ecx, WORD PTR [eax]
	mov	DWORD PTR _ch$[ebp], ecx
	mov	edx, DWORD PTR _source$[ebp]
	add	edx, 2
	mov	DWORD PTR _source$[ebp], edx
; Line 112
	cmp	DWORD PTR _ch$[ebp], 55296		; 0000d800H
	jb	SHORT $LN10@ConvertUTF@2
	cmp	DWORD PTR _ch$[ebp], 56319		; 0000dbffH
	ja	SHORT $LN10@ConvertUTF@2
; Line 114
	mov	eax, DWORD PTR _source$[ebp]
	cmp	eax, DWORD PTR _sourceEnd$[ebp]
	jae	SHORT $LN9@ConvertUTF@2
; Line 115
	mov	eax, DWORD PTR _source$[ebp]
	movzx	ecx, WORD PTR [eax]
	mov	DWORD PTR _ch2$[ebp], ecx
; Line 117
	cmp	DWORD PTR _ch2$[ebp], 56320		; 0000dc00H
	jb	SHORT $LN8@ConvertUTF@2
	cmp	DWORD PTR _ch2$[ebp], 57343		; 0000dfffH
	ja	SHORT $LN8@ConvertUTF@2
; Line 119
	mov	eax, DWORD PTR _ch$[ebp]
	sub	eax, 55296				; 0000d800H
	shl	eax, 10					; 0000000aH
	mov	ecx, DWORD PTR _ch2$[ebp]
	lea	edx, DWORD PTR [eax+ecx+9216]
	mov	DWORD PTR _ch$[ebp], edx
; Line 120
	mov	eax, DWORD PTR _source$[ebp]
	add	eax, 2
	mov	DWORD PTR _source$[ebp], eax
	jmp	SHORT $LN7@ConvertUTF@2
$LN8@ConvertUTF@2:
; Line 121
	cmp	DWORD PTR _flags$[ebp], 0
	jne	SHORT $LN7@ConvertUTF@2
; Line 122
	mov	eax, DWORD PTR _source$[ebp]
	sub	eax, 2
	mov	DWORD PTR _source$[ebp], eax
; Line 123
	mov	DWORD PTR _result$[ebp], 3
; Line 124
	jmp	SHORT $LN11@ConvertUTF@2
$LN7@ConvertUTF@2:
; Line 126
	jmp	SHORT $LN5@ConvertUTF@2
$LN9@ConvertUTF@2:
; Line 127
	mov	eax, DWORD PTR _source$[ebp]
	sub	eax, 2
	mov	DWORD PTR _source$[ebp], eax
; Line 128
	mov	DWORD PTR _result$[ebp], 1
; Line 129
	jmp	SHORT $LN11@ConvertUTF@2
$LN5@ConvertUTF@2:
; Line 130
	jmp	SHORT $LN4@ConvertUTF@2
$LN10@ConvertUTF@2:
; Line 131
	cmp	DWORD PTR _flags$[ebp], 0
	jne	SHORT $LN4@ConvertUTF@2
; Line 133
	cmp	DWORD PTR _ch$[ebp], 56320		; 0000dc00H
	jb	SHORT $LN4@ConvertUTF@2
	cmp	DWORD PTR _ch$[ebp], 57343		; 0000dfffH
	ja	SHORT $LN4@ConvertUTF@2
; Line 134
	mov	eax, DWORD PTR _source$[ebp]
	sub	eax, 2
	mov	DWORD PTR _source$[ebp], eax
; Line 135
	mov	DWORD PTR _result$[ebp], 3
; Line 136
	jmp	SHORT $LN11@ConvertUTF@2
$LN4@ConvertUTF@2:
; Line 139
	mov	eax, DWORD PTR _target$[ebp]
	cmp	eax, DWORD PTR _targetEnd$[ebp]
	jb	SHORT $LN1@ConvertUTF@2
; Line 140
	mov	eax, DWORD PTR _oldSource$33927[ebp]
	mov	DWORD PTR _source$[ebp], eax
; Line 141
	mov	DWORD PTR _result$[ebp], 2
	jmp	SHORT $LN11@ConvertUTF@2
$LN1@ConvertUTF@2:
; Line 143
	mov	eax, DWORD PTR _target$[ebp]
	mov	ecx, DWORD PTR _ch$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _target$[ebp]
	add	edx, 4
	mov	DWORD PTR _target$[ebp], edx
; Line 144
	jmp	$LN12@ConvertUTF@2
$LN11@ConvertUTF@2:
; Line 145
	mov	eax, DWORD PTR _sourceStart$[ebp]
	mov	ecx, DWORD PTR _source$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 146
	mov	eax, DWORD PTR _targetStart$[ebp]
	mov	ecx, DWORD PTR _target$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 153
	mov	eax, DWORD PTR _result$[ebp]
; Line 154
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_ConvertUTF16toUTF32 ENDP
_TEXT	ENDS
PUBLIC	_ConvertUTF16toUTF8
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _ConvertUTF16toUTF8
_TEXT	SEGMENT
tv128 = -304						; size = 4
_ch2$33977 = -104					; size = 4
_oldSource$33972 = -92					; size = 4
_byteMark$33971 = -80					; size = 4
_byteMask$33970 = -68					; size = 4
_bytesToWrite$33969 = -56				; size = 2
_ch$33968 = -44						; size = 4
_target$ = -32						; size = 4
_source$ = -20						; size = 4
_result$ = -8						; size = 4
_sourceStart$ = 8					; size = 4
_sourceEnd$ = 12					; size = 4
_targetStart$ = 16					; size = 4
_targetEnd$ = 20					; size = 4
_flags$ = 24						; size = 4
_ConvertUTF16toUTF8 PROC				; COMDAT
; Line 207
	push	ebp
	mov	ebp, esp
	sub	esp, 304				; 00000130H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-304]
	mov	ecx, 76					; 0000004cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 208
	mov	DWORD PTR _result$[ebp], 0
; Line 209
	mov	eax, DWORD PTR _sourceStart$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _source$[ebp], ecx
; Line 210
	mov	eax, DWORD PTR _targetStart$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _target$[ebp], ecx
$LN26@ConvertUTF@3:
; Line 211
	mov	eax, DWORD PTR _source$[ebp]
	cmp	eax, DWORD PTR _sourceEnd$[ebp]
	jae	$LN25@ConvertUTF@3
; Line 213
	xor	eax, eax
	mov	WORD PTR _bytesToWrite$33969[ebp], ax
; Line 214
	mov	DWORD PTR _byteMask$33970[ebp], 191	; 000000bfH
; Line 215
	mov	DWORD PTR _byteMark$33971[ebp], 128	; 00000080H
; Line 216
	mov	eax, DWORD PTR _source$[ebp]
	mov	DWORD PTR _oldSource$33972[ebp], eax
; Line 217
	mov	eax, DWORD PTR _source$[ebp]
	movzx	ecx, WORD PTR [eax]
	mov	DWORD PTR _ch$33968[ebp], ecx
	mov	edx, DWORD PTR _source$[ebp]
	add	edx, 2
	mov	DWORD PTR _source$[ebp], edx
; Line 219
	cmp	DWORD PTR _ch$33968[ebp], 55296		; 0000d800H
	jb	$LN24@ConvertUTF@3
	cmp	DWORD PTR _ch$33968[ebp], 56319		; 0000dbffH
	ja	SHORT $LN24@ConvertUTF@3
; Line 221
	mov	eax, DWORD PTR _source$[ebp]
	cmp	eax, DWORD PTR _sourceEnd$[ebp]
	jae	SHORT $LN23@ConvertUTF@3
; Line 222
	mov	eax, DWORD PTR _source$[ebp]
	movzx	ecx, WORD PTR [eax]
	mov	DWORD PTR _ch2$33977[ebp], ecx
; Line 224
	cmp	DWORD PTR _ch2$33977[ebp], 56320	; 0000dc00H
	jb	SHORT $LN22@ConvertUTF@3
	cmp	DWORD PTR _ch2$33977[ebp], 57343	; 0000dfffH
	ja	SHORT $LN22@ConvertUTF@3
; Line 226
	mov	eax, DWORD PTR _ch$33968[ebp]
	sub	eax, 55296				; 0000d800H
	shl	eax, 10					; 0000000aH
	mov	ecx, DWORD PTR _ch2$33977[ebp]
	lea	edx, DWORD PTR [eax+ecx+9216]
	mov	DWORD PTR _ch$33968[ebp], edx
; Line 227
	mov	eax, DWORD PTR _source$[ebp]
	add	eax, 2
	mov	DWORD PTR _source$[ebp], eax
	jmp	SHORT $LN21@ConvertUTF@3
$LN22@ConvertUTF@3:
; Line 228
	cmp	DWORD PTR _flags$[ebp], 0
	jne	SHORT $LN21@ConvertUTF@3
; Line 229
	mov	eax, DWORD PTR _source$[ebp]
	sub	eax, 2
	mov	DWORD PTR _source$[ebp], eax
; Line 230
	mov	DWORD PTR _result$[ebp], 3
; Line 231
	jmp	$LN25@ConvertUTF@3
$LN21@ConvertUTF@3:
; Line 233
	jmp	SHORT $LN19@ConvertUTF@3
$LN23@ConvertUTF@3:
; Line 234
	mov	eax, DWORD PTR _source$[ebp]
	sub	eax, 2
	mov	DWORD PTR _source$[ebp], eax
; Line 235
	mov	DWORD PTR _result$[ebp], 1
; Line 236
	jmp	$LN25@ConvertUTF@3
$LN19@ConvertUTF@3:
; Line 237
	jmp	SHORT $LN18@ConvertUTF@3
$LN24@ConvertUTF@3:
; Line 238
	cmp	DWORD PTR _flags$[ebp], 0
	jne	SHORT $LN18@ConvertUTF@3
; Line 240
	cmp	DWORD PTR _ch$33968[ebp], 56320		; 0000dc00H
	jb	SHORT $LN18@ConvertUTF@3
	cmp	DWORD PTR _ch$33968[ebp], 57343		; 0000dfffH
	ja	SHORT $LN18@ConvertUTF@3
; Line 241
	mov	eax, DWORD PTR _source$[ebp]
	sub	eax, 2
	mov	DWORD PTR _source$[ebp], eax
; Line 242
	mov	DWORD PTR _result$[ebp], 3
; Line 243
	jmp	$LN25@ConvertUTF@3
$LN18@ConvertUTF@3:
; Line 247
	cmp	DWORD PTR _ch$33968[ebp], 128		; 00000080H
	jae	SHORT $LN15@ConvertUTF@3
	mov	eax, 1
	mov	WORD PTR _bytesToWrite$33969[ebp], ax
	jmp	SHORT $LN14@ConvertUTF@3
$LN15@ConvertUTF@3:
; Line 248
	cmp	DWORD PTR _ch$33968[ebp], 2048		; 00000800H
	jae	SHORT $LN13@ConvertUTF@3
	mov	eax, 2
	mov	WORD PTR _bytesToWrite$33969[ebp], ax
	jmp	SHORT $LN14@ConvertUTF@3
$LN13@ConvertUTF@3:
; Line 249
	cmp	DWORD PTR _ch$33968[ebp], 65536		; 00010000H
	jae	SHORT $LN11@ConvertUTF@3
	mov	eax, 3
	mov	WORD PTR _bytesToWrite$33969[ebp], ax
	jmp	SHORT $LN14@ConvertUTF@3
$LN11@ConvertUTF@3:
; Line 250
	cmp	DWORD PTR _ch$33968[ebp], 1114112	; 00110000H
	jae	SHORT $LN9@ConvertUTF@3
	mov	eax, 4
	mov	WORD PTR _bytesToWrite$33969[ebp], ax
	jmp	SHORT $LN14@ConvertUTF@3
$LN9@ConvertUTF@3:
; Line 251
	mov	eax, 3
	mov	WORD PTR _bytesToWrite$33969[ebp], ax
; Line 252
	mov	DWORD PTR _ch$33968[ebp], 65533		; 0000fffdH
$LN14@ConvertUTF@3:
; Line 255
	movzx	eax, WORD PTR _bytesToWrite$33969[ebp]
	add	eax, DWORD PTR _target$[ebp]
	mov	DWORD PTR _target$[ebp], eax
; Line 256
	mov	eax, DWORD PTR _target$[ebp]
	cmp	eax, DWORD PTR _targetEnd$[ebp]
	jbe	SHORT $LN7@ConvertUTF@3
; Line 257
	mov	eax, DWORD PTR _oldSource$33972[ebp]
	mov	DWORD PTR _source$[ebp], eax
; Line 258
	movzx	eax, WORD PTR _bytesToWrite$33969[ebp]
	mov	ecx, DWORD PTR _target$[ebp]
	sub	ecx, eax
	mov	DWORD PTR _target$[ebp], ecx
	mov	DWORD PTR _result$[ebp], 2
	jmp	$LN25@ConvertUTF@3
$LN7@ConvertUTF@3:
; Line 260
	movzx	eax, WORD PTR _bytesToWrite$33969[ebp]
	mov	DWORD PTR tv128[ebp], eax
	mov	ecx, DWORD PTR tv128[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv128[ebp], ecx
	cmp	DWORD PTR tv128[ebp], 3
	ja	$LN5@ConvertUTF@3
	mov	edx, DWORD PTR tv128[ebp]
	jmp	DWORD PTR $LN29@ConvertUTF@3[edx*4]
$LN4@ConvertUTF@3:
; Line 261
	mov	eax, DWORD PTR _target$[ebp]
	sub	eax, 1
	mov	DWORD PTR _target$[ebp], eax
	mov	ecx, DWORD PTR _ch$33968[ebp]
	or	ecx, DWORD PTR _byteMark$33971[ebp]
	and	ecx, DWORD PTR _byteMask$33970[ebp]
	mov	edx, DWORD PTR _target$[ebp]
	mov	BYTE PTR [edx], cl
	mov	eax, DWORD PTR _ch$33968[ebp]
	shr	eax, 6
	mov	DWORD PTR _ch$33968[ebp], eax
$LN3@ConvertUTF@3:
; Line 262
	mov	eax, DWORD PTR _target$[ebp]
	sub	eax, 1
	mov	DWORD PTR _target$[ebp], eax
	mov	ecx, DWORD PTR _ch$33968[ebp]
	or	ecx, DWORD PTR _byteMark$33971[ebp]
	and	ecx, DWORD PTR _byteMask$33970[ebp]
	mov	edx, DWORD PTR _target$[ebp]
	mov	BYTE PTR [edx], cl
	mov	eax, DWORD PTR _ch$33968[ebp]
	shr	eax, 6
	mov	DWORD PTR _ch$33968[ebp], eax
$LN2@ConvertUTF@3:
; Line 263
	mov	eax, DWORD PTR _target$[ebp]
	sub	eax, 1
	mov	DWORD PTR _target$[ebp], eax
	mov	ecx, DWORD PTR _ch$33968[ebp]
	or	ecx, DWORD PTR _byteMark$33971[ebp]
	and	ecx, DWORD PTR _byteMask$33970[ebp]
	mov	edx, DWORD PTR _target$[ebp]
	mov	BYTE PTR [edx], cl
	mov	eax, DWORD PTR _ch$33968[ebp]
	shr	eax, 6
	mov	DWORD PTR _ch$33968[ebp], eax
$LN1@ConvertUTF@3:
; Line 264
	mov	eax, DWORD PTR _target$[ebp]
	sub	eax, 1
	mov	DWORD PTR _target$[ebp], eax
	movzx	ecx, WORD PTR _bytesToWrite$33969[ebp]
	movzx	edx, BYTE PTR _firstByteMark[ecx]
	or	edx, DWORD PTR _ch$33968[ebp]
	mov	eax, DWORD PTR _target$[ebp]
	mov	BYTE PTR [eax], dl
$LN5@ConvertUTF@3:
; Line 266
	movzx	eax, WORD PTR _bytesToWrite$33969[ebp]
	add	eax, DWORD PTR _target$[ebp]
	mov	DWORD PTR _target$[ebp], eax
; Line 267
	jmp	$LN26@ConvertUTF@3
$LN25@ConvertUTF@3:
; Line 268
	mov	eax, DWORD PTR _sourceStart$[ebp]
	mov	ecx, DWORD PTR _source$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 269
	mov	eax, DWORD PTR _targetStart$[ebp]
	mov	ecx, DWORD PTR _target$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 270
	mov	eax, DWORD PTR _result$[ebp]
; Line 271
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN29@ConvertUTF@3:
	DD	$LN1@ConvertUTF@3
	DD	$LN2@ConvertUTF@3
	DD	$LN3@ConvertUTF@3
	DD	$LN4@ConvertUTF@3
_ConvertUTF16toUTF8 ENDP
_TEXT	ENDS
PUBLIC	_isLegalUTF8Sequence
EXTRN	__RTC_CheckEsp:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _isLegalUTF8Sequence
_TEXT	SEGMENT
_length$ = -8						; size = 4
_source$ = 8						; size = 4
_sourceEnd$ = 12					; size = 4
_isLegalUTF8Sequence PROC				; COMDAT
; Line 319
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 320
	mov	eax, DWORD PTR _source$[ebp]
	movzx	ecx, BYTE PTR [eax]
	movsx	edx, BYTE PTR _trailingBytesForUTF8[ecx]
	add	edx, 1
	mov	DWORD PTR _length$[ebp], edx
; Line 321
	mov	eax, DWORD PTR _source$[ebp]
	add	eax, DWORD PTR _length$[ebp]
	cmp	eax, DWORD PTR _sourceEnd$[ebp]
	jbe	SHORT $LN1@isLegalUTF
; Line 322
	xor	al, al
	jmp	SHORT $LN2@isLegalUTF
$LN1@isLegalUTF:
; Line 324
	mov	eax, DWORD PTR _length$[ebp]
	push	eax
	mov	ecx, DWORD PTR _source$[ebp]
	push	ecx
	call	_isLegalUTF8
	add	esp, 8
$LN2@isLegalUTF:
; Line 325
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_isLegalUTF8Sequence ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _isLegalUTF8
_TEXT	SEGMENT
tv80 = -220						; size = 4
tv65 = -220						; size = 4
_srcptr$ = -20						; size = 4
_a$ = -5						; size = 1
_source$ = 8						; size = 4
_length$ = 12						; size = 4
_isLegalUTF8 PROC					; COMDAT
; Line 287
	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 289
	mov	eax, DWORD PTR _source$[ebp]
	add	eax, DWORD PTR _length$[ebp]
	mov	DWORD PTR _srcptr$[ebp], eax
; Line 290
	mov	eax, DWORD PTR _length$[ebp]
	mov	DWORD PTR tv65[ebp], eax
	mov	ecx, DWORD PTR tv65[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv65[ebp], ecx
	cmp	DWORD PTR tv65[ebp], 3
	ja	SHORT $LN24@isLegalUTF@2
	mov	edx, DWORD PTR tv65[ebp]
	jmp	DWORD PTR $LN30@isLegalUTF@2[edx*4]
$LN24@isLegalUTF@2:
; Line 291
	xor	al, al
	jmp	$LN27@isLegalUTF@2
$LN23@isLegalUTF@2:
; Line 293
	mov	eax, DWORD PTR _srcptr$[ebp]
	sub	eax, 1
	mov	DWORD PTR _srcptr$[ebp], eax
	mov	ecx, DWORD PTR _srcptr$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR _a$[ebp], dl
	movzx	eax, BYTE PTR _a$[ebp]
	cmp	eax, 128				; 00000080H
	jl	SHORT $LN21@isLegalUTF@2
	movzx	eax, BYTE PTR _a$[ebp]
	cmp	eax, 191				; 000000bfH
	jle	SHORT $LN20@isLegalUTF@2
$LN21@isLegalUTF@2:
	xor	al, al
	jmp	$LN27@isLegalUTF@2
$LN20@isLegalUTF@2:
; Line 294
	mov	eax, DWORD PTR _srcptr$[ebp]
	sub	eax, 1
	mov	DWORD PTR _srcptr$[ebp], eax
	mov	ecx, DWORD PTR _srcptr$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR _a$[ebp], dl
	movzx	eax, BYTE PTR _a$[ebp]
	cmp	eax, 128				; 00000080H
	jl	SHORT $LN18@isLegalUTF@2
	movzx	eax, BYTE PTR _a$[ebp]
	cmp	eax, 191				; 000000bfH
	jle	SHORT $LN17@isLegalUTF@2
$LN18@isLegalUTF@2:
	xor	al, al
	jmp	$LN27@isLegalUTF@2
$LN17@isLegalUTF@2:
; Line 295
	mov	eax, DWORD PTR _srcptr$[ebp]
	sub	eax, 1
	mov	DWORD PTR _srcptr$[ebp], eax
	mov	ecx, DWORD PTR _srcptr$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR _a$[ebp], dl
	movzx	eax, BYTE PTR _a$[ebp]
	cmp	eax, 191				; 000000bfH
	jle	SHORT $LN16@isLegalUTF@2
	xor	al, al
	jmp	$LN27@isLegalUTF@2
$LN16@isLegalUTF@2:
; Line 297
	mov	eax, DWORD PTR _source$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR tv80[ebp], ecx
	mov	edx, DWORD PTR tv80[ebp]
	sub	edx, 224				; 000000e0H
	mov	DWORD PTR tv80[ebp], edx
	cmp	DWORD PTR tv80[ebp], 20			; 00000014H
	ja	SHORT $LN5@isLegalUTF@2
	mov	eax, DWORD PTR tv80[ebp]
	movzx	ecx, BYTE PTR $LN29@isLegalUTF@2[eax]
	jmp	DWORD PTR $LN31@isLegalUTF@2[ecx*4]
$LN13@isLegalUTF@2:
; Line 299
	movzx	eax, BYTE PTR _a$[ebp]
	cmp	eax, 160				; 000000a0H
	jge	SHORT $LN12@isLegalUTF@2
	xor	al, al
	jmp	SHORT $LN27@isLegalUTF@2
$LN12@isLegalUTF@2:
	jmp	SHORT $LN3@isLegalUTF@2
$LN11@isLegalUTF@2:
; Line 300
	movzx	eax, BYTE PTR _a$[ebp]
	cmp	eax, 159				; 0000009fH
	jle	SHORT $LN10@isLegalUTF@2
	xor	al, al
	jmp	SHORT $LN27@isLegalUTF@2
$LN10@isLegalUTF@2:
	jmp	SHORT $LN3@isLegalUTF@2
$LN9@isLegalUTF@2:
; Line 301
	movzx	eax, BYTE PTR _a$[ebp]
	cmp	eax, 144				; 00000090H
	jge	SHORT $LN8@isLegalUTF@2
	xor	al, al
	jmp	SHORT $LN27@isLegalUTF@2
$LN8@isLegalUTF@2:
	jmp	SHORT $LN3@isLegalUTF@2
$LN7@isLegalUTF@2:
; Line 302
	movzx	eax, BYTE PTR _a$[ebp]
	cmp	eax, 143				; 0000008fH
	jle	SHORT $LN6@isLegalUTF@2
	xor	al, al
	jmp	SHORT $LN27@isLegalUTF@2
$LN6@isLegalUTF@2:
	jmp	SHORT $LN3@isLegalUTF@2
$LN5@isLegalUTF@2:
; Line 303
	movzx	eax, BYTE PTR _a$[ebp]
	cmp	eax, 128				; 00000080H
	jge	SHORT $LN3@isLegalUTF@2
	xor	al, al
	jmp	SHORT $LN27@isLegalUTF@2
$LN3@isLegalUTF@2:
; Line 306
	mov	eax, DWORD PTR _source$[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 128				; 00000080H
	jl	SHORT $LN25@isLegalUTF@2
	mov	eax, DWORD PTR _source$[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 194				; 000000c2H
	jge	SHORT $LN25@isLegalUTF@2
	xor	al, al
	jmp	SHORT $LN27@isLegalUTF@2
$LN25@isLegalUTF@2:
; Line 308
	mov	eax, DWORD PTR _source$[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 244				; 000000f4H
	jle	SHORT $LN1@isLegalUTF@2
	xor	al, al
	jmp	SHORT $LN27@isLegalUTF@2
$LN1@isLegalUTF@2:
; Line 309
	mov	al, 1
$LN27@isLegalUTF@2:
; Line 310
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN30@isLegalUTF@2:
	DD	$LN3@isLegalUTF@2
	DD	$LN17@isLegalUTF@2
	DD	$LN20@isLegalUTF@2
	DD	$LN23@isLegalUTF@2
$LN31@isLegalUTF@2:
	DD	$LN13@isLegalUTF@2
	DD	$LN11@isLegalUTF@2
	DD	$LN9@isLegalUTF@2
	DD	$LN7@isLegalUTF@2
	DD	$LN5@isLegalUTF@2
$LN29@isLegalUTF@2:
	DB	0
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	1
	DB	4
	DB	4
	DB	2
	DB	4
	DB	4
	DB	4
	DB	3
_isLegalUTF8 ENDP
_TEXT	ENDS
PUBLIC	_ConvertUTF8toUTF16
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _ConvertUTF8toUTF16
_TEXT	SEGMENT
tv79 = -256						; size = 4
_extraBytesToRead$34082 = -56				; size = 2
_ch$34081 = -44						; size = 4
_target$ = -32						; size = 4
_source$ = -20						; size = 4
_result$ = -8						; size = 4
_sourceStart$ = 8					; size = 4
_sourceEnd$ = 12					; size = 4
_targetStart$ = 16					; size = 4
_targetEnd$ = 20					; size = 4
_flags$ = 24						; size = 4
_ConvertUTF8toUTF16 PROC				; COMDAT
; Line 331
	push	ebp
	mov	ebp, esp
	sub	esp, 256				; 00000100H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-256]
	mov	ecx, 64					; 00000040H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 332
	mov	DWORD PTR _result$[ebp], 0
; Line 333
	mov	eax, DWORD PTR _sourceStart$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _source$[ebp], ecx
; Line 334
	mov	eax, DWORD PTR _targetStart$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _target$[ebp], ecx
$LN24@ConvertUTF@4:
; Line 335
	mov	eax, DWORD PTR _source$[ebp]
	cmp	eax, DWORD PTR _sourceEnd$[ebp]
	jae	$LN23@ConvertUTF@4
; Line 336
	mov	DWORD PTR _ch$34081[ebp], 0
; Line 337
	mov	eax, DWORD PTR _source$[ebp]
	movzx	ecx, BYTE PTR [eax]
	movsx	dx, BYTE PTR _trailingBytesForUTF8[ecx]
	mov	WORD PTR _extraBytesToRead$34082[ebp], dx
; Line 338
	movzx	eax, WORD PTR _extraBytesToRead$34082[ebp]
	add	eax, DWORD PTR _source$[ebp]
	cmp	eax, DWORD PTR _sourceEnd$[ebp]
	jb	SHORT $LN22@ConvertUTF@4
; Line 339
	mov	DWORD PTR _result$[ebp], 1
	jmp	$LN23@ConvertUTF@4
$LN22@ConvertUTF@4:
; Line 342
	movzx	eax, WORD PTR _extraBytesToRead$34082[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _source$[ebp]
	push	ecx
	call	_isLegalUTF8
	add	esp, 8
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN21@ConvertUTF@4
; Line 343
	mov	DWORD PTR _result$[ebp], 3
; Line 344
	jmp	$LN23@ConvertUTF@4
$LN21@ConvertUTF@4:
; Line 349
	movzx	eax, WORD PTR _extraBytesToRead$34082[ebp]
	mov	DWORD PTR tv79[ebp], eax
	cmp	DWORD PTR tv79[ebp], 5
	ja	$LN19@ConvertUTF@4
	mov	ecx, DWORD PTR tv79[ebp]
	jmp	DWORD PTR $LN27@ConvertUTF@4[ecx*4]
$LN18@ConvertUTF@4:
; Line 350
	mov	eax, DWORD PTR _source$[ebp]
	movzx	ecx, BYTE PTR [eax]
	add	ecx, DWORD PTR _ch$34081[ebp]
	mov	DWORD PTR _ch$34081[ebp], ecx
	mov	edx, DWORD PTR _source$[ebp]
	add	edx, 1
	mov	DWORD PTR _source$[ebp], edx
	mov	eax, DWORD PTR _ch$34081[ebp]
	shl	eax, 6
	mov	DWORD PTR _ch$34081[ebp], eax
$LN17@ConvertUTF@4:
; Line 351
	mov	eax, DWORD PTR _source$[ebp]
	movzx	ecx, BYTE PTR [eax]
	add	ecx, DWORD PTR _ch$34081[ebp]
	mov	DWORD PTR _ch$34081[ebp], ecx
	mov	edx, DWORD PTR _source$[ebp]
	add	edx, 1
	mov	DWORD PTR _source$[ebp], edx
	mov	eax, DWORD PTR _ch$34081[ebp]
	shl	eax, 6
	mov	DWORD PTR _ch$34081[ebp], eax
$LN16@ConvertUTF@4:
; Line 352
	mov	eax, DWORD PTR _source$[ebp]
	movzx	ecx, BYTE PTR [eax]
	add	ecx, DWORD PTR _ch$34081[ebp]
	mov	DWORD PTR _ch$34081[ebp], ecx
	mov	edx, DWORD PTR _source$[ebp]
	add	edx, 1
	mov	DWORD PTR _source$[ebp], edx
	mov	eax, DWORD PTR _ch$34081[ebp]
	shl	eax, 6
	mov	DWORD PTR _ch$34081[ebp], eax
$LN15@ConvertUTF@4:
; Line 353
	mov	eax, DWORD PTR _source$[ebp]
	movzx	ecx, BYTE PTR [eax]
	add	ecx, DWORD PTR _ch$34081[ebp]
	mov	DWORD PTR _ch$34081[ebp], ecx
	mov	edx, DWORD PTR _source$[ebp]
	add	edx, 1
	mov	DWORD PTR _source$[ebp], edx
	mov	eax, DWORD PTR _ch$34081[ebp]
	shl	eax, 6
	mov	DWORD PTR _ch$34081[ebp], eax
$LN14@ConvertUTF@4:
; Line 354
	mov	eax, DWORD PTR _source$[ebp]
	movzx	ecx, BYTE PTR [eax]
	add	ecx, DWORD PTR _ch$34081[ebp]
	mov	DWORD PTR _ch$34081[ebp], ecx
	mov	edx, DWORD PTR _source$[ebp]
	add	edx, 1
	mov	DWORD PTR _source$[ebp], edx
	mov	eax, DWORD PTR _ch$34081[ebp]
	shl	eax, 6
	mov	DWORD PTR _ch$34081[ebp], eax
$LN13@ConvertUTF@4:
; Line 355
	mov	eax, DWORD PTR _source$[ebp]
	movzx	ecx, BYTE PTR [eax]
	add	ecx, DWORD PTR _ch$34081[ebp]
	mov	DWORD PTR _ch$34081[ebp], ecx
	mov	edx, DWORD PTR _source$[ebp]
	add	edx, 1
	mov	DWORD PTR _source$[ebp], edx
$LN19@ConvertUTF@4:
; Line 357
	movzx	eax, WORD PTR _extraBytesToRead$34082[ebp]
	mov	ecx, DWORD PTR _ch$34081[ebp]
	sub	ecx, DWORD PTR _offsetsFromUTF8[eax*4]
	mov	DWORD PTR _ch$34081[ebp], ecx
; Line 359
	mov	eax, DWORD PTR _target$[ebp]
	cmp	eax, DWORD PTR _targetEnd$[ebp]
	jb	SHORT $LN12@ConvertUTF@4
; Line 360
	movzx	eax, WORD PTR _extraBytesToRead$34082[ebp]
	add	eax, 1
	mov	ecx, DWORD PTR _source$[ebp]
	sub	ecx, eax
	mov	DWORD PTR _source$[ebp], ecx
; Line 361
	mov	DWORD PTR _result$[ebp], 2
	jmp	$LN23@ConvertUTF@4
$LN12@ConvertUTF@4:
; Line 363
	cmp	DWORD PTR _ch$34081[ebp], 65535		; 0000ffffH
	ja	SHORT $LN11@ConvertUTF@4
; Line 365
	cmp	DWORD PTR _ch$34081[ebp], 55296		; 0000d800H
	jb	SHORT $LN10@ConvertUTF@4
	cmp	DWORD PTR _ch$34081[ebp], 57343		; 0000dfffH
	ja	SHORT $LN10@ConvertUTF@4
; Line 366
	cmp	DWORD PTR _flags$[ebp], 0
	jne	SHORT $LN9@ConvertUTF@4
; Line 367
	movzx	eax, WORD PTR _extraBytesToRead$34082[ebp]
	add	eax, 1
	mov	ecx, DWORD PTR _source$[ebp]
	sub	ecx, eax
	mov	DWORD PTR _source$[ebp], ecx
; Line 368
	mov	DWORD PTR _result$[ebp], 3
; Line 369
	jmp	$LN23@ConvertUTF@4
; Line 370
	jmp	SHORT $LN8@ConvertUTF@4
$LN9@ConvertUTF@4:
; Line 371
	mov	eax, 65533				; 0000fffdH
	mov	ecx, DWORD PTR _target$[ebp]
	mov	WORD PTR [ecx], ax
	mov	edx, DWORD PTR _target$[ebp]
	add	edx, 2
	mov	DWORD PTR _target$[ebp], edx
$LN8@ConvertUTF@4:
; Line 373
	jmp	SHORT $LN7@ConvertUTF@4
$LN10@ConvertUTF@4:
; Line 374
	mov	eax, DWORD PTR _target$[ebp]
	mov	cx, WORD PTR _ch$34081[ebp]
	mov	WORD PTR [eax], cx
	mov	edx, DWORD PTR _target$[ebp]
	add	edx, 2
	mov	DWORD PTR _target$[ebp], edx
$LN7@ConvertUTF@4:
; Line 375
	jmp	$LN6@ConvertUTF@4
$LN11@ConvertUTF@4:
; Line 376
	cmp	DWORD PTR _ch$34081[ebp], 1114111	; 0010ffffH
	jbe	SHORT $LN5@ConvertUTF@4
; Line 377
	cmp	DWORD PTR _flags$[ebp], 0
	jne	SHORT $LN4@ConvertUTF@4
; Line 378
	mov	DWORD PTR _result$[ebp], 3
; Line 379
	movzx	eax, WORD PTR _extraBytesToRead$34082[ebp]
	add	eax, 1
	mov	ecx, DWORD PTR _source$[ebp]
	sub	ecx, eax
	mov	DWORD PTR _source$[ebp], ecx
; Line 380
	jmp	$LN23@ConvertUTF@4
; Line 381
	jmp	SHORT $LN3@ConvertUTF@4
$LN4@ConvertUTF@4:
; Line 382
	mov	eax, 65533				; 0000fffdH
	mov	ecx, DWORD PTR _target$[ebp]
	mov	WORD PTR [ecx], ax
	mov	edx, DWORD PTR _target$[ebp]
	add	edx, 2
	mov	DWORD PTR _target$[ebp], edx
$LN3@ConvertUTF@4:
; Line 384
	jmp	SHORT $LN6@ConvertUTF@4
$LN5@ConvertUTF@4:
; Line 386
	mov	eax, DWORD PTR _target$[ebp]
	add	eax, 2
	cmp	eax, DWORD PTR _targetEnd$[ebp]
	jb	SHORT $LN1@ConvertUTF@4
; Line 387
	movzx	eax, WORD PTR _extraBytesToRead$34082[ebp]
	add	eax, 1
	mov	ecx, DWORD PTR _source$[ebp]
	sub	ecx, eax
	mov	DWORD PTR _source$[ebp], ecx
; Line 388
	mov	DWORD PTR _result$[ebp], 2
	jmp	SHORT $LN23@ConvertUTF@4
$LN1@ConvertUTF@4:
; Line 390
	mov	eax, DWORD PTR _ch$34081[ebp]
	sub	eax, 65536				; 00010000H
	mov	DWORD PTR _ch$34081[ebp], eax
; Line 391
	mov	eax, DWORD PTR _ch$34081[ebp]
	shr	eax, 10					; 0000000aH
	add	eax, 55296				; 0000d800H
	mov	ecx, DWORD PTR _target$[ebp]
	mov	WORD PTR [ecx], ax
	mov	edx, DWORD PTR _target$[ebp]
	add	edx, 2
	mov	DWORD PTR _target$[ebp], edx
; Line 392
	mov	eax, DWORD PTR _ch$34081[ebp]
	and	eax, 1023				; 000003ffH
	add	eax, 56320				; 0000dc00H
	mov	ecx, DWORD PTR _target$[ebp]
	mov	WORD PTR [ecx], ax
	mov	edx, DWORD PTR _target$[ebp]
	add	edx, 2
	mov	DWORD PTR _target$[ebp], edx
$LN6@ConvertUTF@4:
; Line 394
	jmp	$LN24@ConvertUTF@4
$LN23@ConvertUTF@4:
; Line 395
	mov	eax, DWORD PTR _sourceStart$[ebp]
	mov	ecx, DWORD PTR _source$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 396
	mov	eax, DWORD PTR _targetStart$[ebp]
	mov	ecx, DWORD PTR _target$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 397
	mov	eax, DWORD PTR _result$[ebp]
; Line 398
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 256				; 00000100H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN27@ConvertUTF@4:
	DD	$LN13@ConvertUTF@4
	DD	$LN14@ConvertUTF@4
	DD	$LN15@ConvertUTF@4
	DD	$LN16@ConvertUTF@4
	DD	$LN17@ConvertUTF@4
	DD	$LN18@ConvertUTF@4
_ConvertUTF8toUTF16 ENDP
_TEXT	ENDS
PUBLIC	_ConvertUTF32toUTF8
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _ConvertUTF32toUTF8
_TEXT	SEGMENT
tv81 = -280						; size = 4
_byteMark$34141 = -80					; size = 4
_byteMask$34140 = -68					; size = 4
_bytesToWrite$34139 = -56				; size = 2
_ch$34138 = -44						; size = 4
_target$ = -32						; size = 4
_source$ = -20						; size = 4
_result$ = -8						; size = 4
_sourceStart$ = 8					; size = 4
_sourceEnd$ = 12					; size = 4
_targetStart$ = 16					; size = 4
_targetEnd$ = 20					; size = 4
_flags$ = 24						; size = 4
_ConvertUTF32toUTF8 PROC				; COMDAT
; Line 404
	push	ebp
	mov	ebp, esp
	sub	esp, 280				; 00000118H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-280]
	mov	ecx, 70					; 00000046H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 405
	mov	DWORD PTR _result$[ebp], 0
; Line 406
	mov	eax, DWORD PTR _sourceStart$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _source$[ebp], ecx
; Line 407
	mov	eax, DWORD PTR _targetStart$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _target$[ebp], ecx
$LN19@ConvertUTF@5:
; Line 408
	mov	eax, DWORD PTR _source$[ebp]
	cmp	eax, DWORD PTR _sourceEnd$[ebp]
	jae	$LN18@ConvertUTF@5
; Line 410
	xor	eax, eax
	mov	WORD PTR _bytesToWrite$34139[ebp], ax
; Line 411
	mov	DWORD PTR _byteMask$34140[ebp], 191	; 000000bfH
; Line 412
	mov	DWORD PTR _byteMark$34141[ebp], 128	; 00000080H
; Line 413
	mov	eax, DWORD PTR _source$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _ch$34138[ebp], ecx
	mov	edx, DWORD PTR _source$[ebp]
	add	edx, 4
	mov	DWORD PTR _source$[ebp], edx
; Line 414
	cmp	DWORD PTR _flags$[ebp], 0
	jne	SHORT $LN17@ConvertUTF@5
; Line 416
	cmp	DWORD PTR _ch$34138[ebp], 55296		; 0000d800H
	jb	SHORT $LN17@ConvertUTF@5
	cmp	DWORD PTR _ch$34138[ebp], 57343		; 0000dfffH
	ja	SHORT $LN17@ConvertUTF@5
; Line 417
	mov	eax, DWORD PTR _source$[ebp]
	sub	eax, 4
	mov	DWORD PTR _source$[ebp], eax
; Line 418
	mov	DWORD PTR _result$[ebp], 3
; Line 419
	jmp	$LN18@ConvertUTF@5
$LN17@ConvertUTF@5:
; Line 426
	cmp	DWORD PTR _ch$34138[ebp], 128		; 00000080H
	jae	SHORT $LN15@ConvertUTF@5
	mov	eax, 1
	mov	WORD PTR _bytesToWrite$34139[ebp], ax
	jmp	SHORT $LN14@ConvertUTF@5
$LN15@ConvertUTF@5:
; Line 427
	cmp	DWORD PTR _ch$34138[ebp], 2048		; 00000800H
	jae	SHORT $LN13@ConvertUTF@5
	mov	eax, 2
	mov	WORD PTR _bytesToWrite$34139[ebp], ax
	jmp	SHORT $LN14@ConvertUTF@5
$LN13@ConvertUTF@5:
; Line 428
	cmp	DWORD PTR _ch$34138[ebp], 65536		; 00010000H
	jae	SHORT $LN11@ConvertUTF@5
	mov	eax, 3
	mov	WORD PTR _bytesToWrite$34139[ebp], ax
	jmp	SHORT $LN14@ConvertUTF@5
$LN11@ConvertUTF@5:
; Line 429
	cmp	DWORD PTR _ch$34138[ebp], 1114111	; 0010ffffH
	ja	SHORT $LN9@ConvertUTF@5
	mov	eax, 4
	mov	WORD PTR _bytesToWrite$34139[ebp], ax
	jmp	SHORT $LN14@ConvertUTF@5
$LN9@ConvertUTF@5:
; Line 430
	mov	eax, 3
	mov	WORD PTR _bytesToWrite$34139[ebp], ax
; Line 431
	mov	DWORD PTR _ch$34138[ebp], 65533		; 0000fffdH
; Line 432
	mov	DWORD PTR _result$[ebp], 3
$LN14@ConvertUTF@5:
; Line 435
	movzx	eax, WORD PTR _bytesToWrite$34139[ebp]
	add	eax, DWORD PTR _target$[ebp]
	mov	DWORD PTR _target$[ebp], eax
; Line 436
	mov	eax, DWORD PTR _target$[ebp]
	cmp	eax, DWORD PTR _targetEnd$[ebp]
	jbe	SHORT $LN7@ConvertUTF@5
; Line 437
	mov	eax, DWORD PTR _source$[ebp]
	sub	eax, 4
	mov	DWORD PTR _source$[ebp], eax
; Line 438
	movzx	eax, WORD PTR _bytesToWrite$34139[ebp]
	mov	ecx, DWORD PTR _target$[ebp]
	sub	ecx, eax
	mov	DWORD PTR _target$[ebp], ecx
	mov	DWORD PTR _result$[ebp], 2
	jmp	$LN18@ConvertUTF@5
$LN7@ConvertUTF@5:
; Line 440
	movzx	eax, WORD PTR _bytesToWrite$34139[ebp]
	mov	DWORD PTR tv81[ebp], eax
	mov	ecx, DWORD PTR tv81[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv81[ebp], ecx
	cmp	DWORD PTR tv81[ebp], 3
	ja	$LN5@ConvertUTF@5
	mov	edx, DWORD PTR tv81[ebp]
	jmp	DWORD PTR $LN22@ConvertUTF@5[edx*4]
$LN4@ConvertUTF@5:
; Line 441
	mov	eax, DWORD PTR _target$[ebp]
	sub	eax, 1
	mov	DWORD PTR _target$[ebp], eax
	mov	ecx, DWORD PTR _ch$34138[ebp]
	or	ecx, DWORD PTR _byteMark$34141[ebp]
	and	ecx, DWORD PTR _byteMask$34140[ebp]
	mov	edx, DWORD PTR _target$[ebp]
	mov	BYTE PTR [edx], cl
	mov	eax, DWORD PTR _ch$34138[ebp]
	shr	eax, 6
	mov	DWORD PTR _ch$34138[ebp], eax
$LN3@ConvertUTF@5:
; Line 442
	mov	eax, DWORD PTR _target$[ebp]
	sub	eax, 1
	mov	DWORD PTR _target$[ebp], eax
	mov	ecx, DWORD PTR _ch$34138[ebp]
	or	ecx, DWORD PTR _byteMark$34141[ebp]
	and	ecx, DWORD PTR _byteMask$34140[ebp]
	mov	edx, DWORD PTR _target$[ebp]
	mov	BYTE PTR [edx], cl
	mov	eax, DWORD PTR _ch$34138[ebp]
	shr	eax, 6
	mov	DWORD PTR _ch$34138[ebp], eax
$LN2@ConvertUTF@5:
; Line 443
	mov	eax, DWORD PTR _target$[ebp]
	sub	eax, 1
	mov	DWORD PTR _target$[ebp], eax
	mov	ecx, DWORD PTR _ch$34138[ebp]
	or	ecx, DWORD PTR _byteMark$34141[ebp]
	and	ecx, DWORD PTR _byteMask$34140[ebp]
	mov	edx, DWORD PTR _target$[ebp]
	mov	BYTE PTR [edx], cl
	mov	eax, DWORD PTR _ch$34138[ebp]
	shr	eax, 6
	mov	DWORD PTR _ch$34138[ebp], eax
$LN1@ConvertUTF@5:
; Line 444
	mov	eax, DWORD PTR _target$[ebp]
	sub	eax, 1
	mov	DWORD PTR _target$[ebp], eax
	movzx	ecx, WORD PTR _bytesToWrite$34139[ebp]
	movzx	edx, BYTE PTR _firstByteMark[ecx]
	or	edx, DWORD PTR _ch$34138[ebp]
	mov	eax, DWORD PTR _target$[ebp]
	mov	BYTE PTR [eax], dl
$LN5@ConvertUTF@5:
; Line 446
	movzx	eax, WORD PTR _bytesToWrite$34139[ebp]
	add	eax, DWORD PTR _target$[ebp]
	mov	DWORD PTR _target$[ebp], eax
; Line 447
	jmp	$LN19@ConvertUTF@5
$LN18@ConvertUTF@5:
; Line 448
	mov	eax, DWORD PTR _sourceStart$[ebp]
	mov	ecx, DWORD PTR _source$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 449
	mov	eax, DWORD PTR _targetStart$[ebp]
	mov	ecx, DWORD PTR _target$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 450
	mov	eax, DWORD PTR _result$[ebp]
; Line 451
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN22@ConvertUTF@5:
	DD	$LN1@ConvertUTF@5
	DD	$LN2@ConvertUTF@5
	DD	$LN3@ConvertUTF@5
	DD	$LN4@ConvertUTF@5
_ConvertUTF32toUTF8 ENDP
_TEXT	ENDS
PUBLIC	_ConvertUTF8toUTF32
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _ConvertUTF8toUTF32
_TEXT	SEGMENT
tv79 = -256						; size = 4
_extraBytesToRead$34190 = -56				; size = 2
_ch$34189 = -44						; size = 4
_target$ = -32						; size = 4
_source$ = -20						; size = 4
_result$ = -8						; size = 4
_sourceStart$ = 8					; size = 4
_sourceEnd$ = 12					; size = 4
_targetStart$ = 16					; size = 4
_targetEnd$ = 20					; size = 4
_flags$ = 24						; size = 4
_ConvertUTF8toUTF32 PROC				; COMDAT
; Line 457
	push	ebp
	mov	ebp, esp
	sub	esp, 256				; 00000100H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-256]
	mov	ecx, 64					; 00000040H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 458
	mov	DWORD PTR _result$[ebp], 0
; Line 459
	mov	eax, DWORD PTR _sourceStart$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _source$[ebp], ecx
; Line 460
	mov	eax, DWORD PTR _targetStart$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _target$[ebp], ecx
$LN19@ConvertUTF@6:
; Line 461
	mov	eax, DWORD PTR _source$[ebp]
	cmp	eax, DWORD PTR _sourceEnd$[ebp]
	jae	$LN18@ConvertUTF@6
; Line 462
	mov	DWORD PTR _ch$34189[ebp], 0
; Line 463
	mov	eax, DWORD PTR _source$[ebp]
	movzx	ecx, BYTE PTR [eax]
	movsx	dx, BYTE PTR _trailingBytesForUTF8[ecx]
	mov	WORD PTR _extraBytesToRead$34190[ebp], dx
; Line 464
	movzx	eax, WORD PTR _extraBytesToRead$34190[ebp]
	add	eax, DWORD PTR _source$[ebp]
	cmp	eax, DWORD PTR _sourceEnd$[ebp]
	jb	SHORT $LN17@ConvertUTF@6
; Line 465
	mov	DWORD PTR _result$[ebp], 1
	jmp	$LN18@ConvertUTF@6
$LN17@ConvertUTF@6:
; Line 468
	movzx	eax, WORD PTR _extraBytesToRead$34190[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _source$[ebp]
	push	ecx
	call	_isLegalUTF8
	add	esp, 8
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN16@ConvertUTF@6
; Line 469
	mov	DWORD PTR _result$[ebp], 3
; Line 470
	jmp	$LN18@ConvertUTF@6
$LN16@ConvertUTF@6:
; Line 475
	movzx	eax, WORD PTR _extraBytesToRead$34190[ebp]
	mov	DWORD PTR tv79[ebp], eax
	cmp	DWORD PTR tv79[ebp], 5
	ja	$LN14@ConvertUTF@6
	mov	ecx, DWORD PTR tv79[ebp]
	jmp	DWORD PTR $LN22@ConvertUTF@6[ecx*4]
$LN13@ConvertUTF@6:
; Line 476
	mov	eax, DWORD PTR _source$[ebp]
	movzx	ecx, BYTE PTR [eax]
	add	ecx, DWORD PTR _ch$34189[ebp]
	mov	DWORD PTR _ch$34189[ebp], ecx
	mov	edx, DWORD PTR _source$[ebp]
	add	edx, 1
	mov	DWORD PTR _source$[ebp], edx
	mov	eax, DWORD PTR _ch$34189[ebp]
	shl	eax, 6
	mov	DWORD PTR _ch$34189[ebp], eax
$LN12@ConvertUTF@6:
; Line 477
	mov	eax, DWORD PTR _source$[ebp]
	movzx	ecx, BYTE PTR [eax]
	add	ecx, DWORD PTR _ch$34189[ebp]
	mov	DWORD PTR _ch$34189[ebp], ecx
	mov	edx, DWORD PTR _source$[ebp]
	add	edx, 1
	mov	DWORD PTR _source$[ebp], edx
	mov	eax, DWORD PTR _ch$34189[ebp]
	shl	eax, 6
	mov	DWORD PTR _ch$34189[ebp], eax
$LN11@ConvertUTF@6:
; Line 478
	mov	eax, DWORD PTR _source$[ebp]
	movzx	ecx, BYTE PTR [eax]
	add	ecx, DWORD PTR _ch$34189[ebp]
	mov	DWORD PTR _ch$34189[ebp], ecx
	mov	edx, DWORD PTR _source$[ebp]
	add	edx, 1
	mov	DWORD PTR _source$[ebp], edx
	mov	eax, DWORD PTR _ch$34189[ebp]
	shl	eax, 6
	mov	DWORD PTR _ch$34189[ebp], eax
$LN10@ConvertUTF@6:
; Line 479
	mov	eax, DWORD PTR _source$[ebp]
	movzx	ecx, BYTE PTR [eax]
	add	ecx, DWORD PTR _ch$34189[ebp]
	mov	DWORD PTR _ch$34189[ebp], ecx
	mov	edx, DWORD PTR _source$[ebp]
	add	edx, 1
	mov	DWORD PTR _source$[ebp], edx
	mov	eax, DWORD PTR _ch$34189[ebp]
	shl	eax, 6
	mov	DWORD PTR _ch$34189[ebp], eax
$LN9@ConvertUTF@6:
; Line 480
	mov	eax, DWORD PTR _source$[ebp]
	movzx	ecx, BYTE PTR [eax]
	add	ecx, DWORD PTR _ch$34189[ebp]
	mov	DWORD PTR _ch$34189[ebp], ecx
	mov	edx, DWORD PTR _source$[ebp]
	add	edx, 1
	mov	DWORD PTR _source$[ebp], edx
	mov	eax, DWORD PTR _ch$34189[ebp]
	shl	eax, 6
	mov	DWORD PTR _ch$34189[ebp], eax
$LN8@ConvertUTF@6:
; Line 481
	mov	eax, DWORD PTR _source$[ebp]
	movzx	ecx, BYTE PTR [eax]
	add	ecx, DWORD PTR _ch$34189[ebp]
	mov	DWORD PTR _ch$34189[ebp], ecx
	mov	edx, DWORD PTR _source$[ebp]
	add	edx, 1
	mov	DWORD PTR _source$[ebp], edx
$LN14@ConvertUTF@6:
; Line 483
	movzx	eax, WORD PTR _extraBytesToRead$34190[ebp]
	mov	ecx, DWORD PTR _ch$34189[ebp]
	sub	ecx, DWORD PTR _offsetsFromUTF8[eax*4]
	mov	DWORD PTR _ch$34189[ebp], ecx
; Line 485
	mov	eax, DWORD PTR _target$[ebp]
	cmp	eax, DWORD PTR _targetEnd$[ebp]
	jb	SHORT $LN7@ConvertUTF@6
; Line 486
	movzx	eax, WORD PTR _extraBytesToRead$34190[ebp]
	add	eax, 1
	mov	ecx, DWORD PTR _source$[ebp]
	sub	ecx, eax
	mov	DWORD PTR _source$[ebp], ecx
; Line 487
	mov	DWORD PTR _result$[ebp], 2
	jmp	$LN18@ConvertUTF@6
$LN7@ConvertUTF@6:
; Line 489
	cmp	DWORD PTR _ch$34189[ebp], 1114111	; 0010ffffH
	ja	SHORT $LN6@ConvertUTF@6
; Line 494
	cmp	DWORD PTR _ch$34189[ebp], 55296		; 0000d800H
	jb	SHORT $LN5@ConvertUTF@6
	cmp	DWORD PTR _ch$34189[ebp], 57343		; 0000dfffH
	ja	SHORT $LN5@ConvertUTF@6
; Line 495
	cmp	DWORD PTR _flags$[ebp], 0
	jne	SHORT $LN4@ConvertUTF@6
; Line 496
	movzx	eax, WORD PTR _extraBytesToRead$34190[ebp]
	add	eax, 1
	mov	ecx, DWORD PTR _source$[ebp]
	sub	ecx, eax
	mov	DWORD PTR _source$[ebp], ecx
; Line 497
	mov	DWORD PTR _result$[ebp], 3
; Line 498
	jmp	SHORT $LN18@ConvertUTF@6
; Line 499
	jmp	SHORT $LN3@ConvertUTF@6
$LN4@ConvertUTF@6:
; Line 500
	mov	eax, DWORD PTR _target$[ebp]
	mov	DWORD PTR [eax], 65533			; 0000fffdH
	mov	ecx, DWORD PTR _target$[ebp]
	add	ecx, 4
	mov	DWORD PTR _target$[ebp], ecx
$LN3@ConvertUTF@6:
; Line 502
	jmp	SHORT $LN2@ConvertUTF@6
$LN5@ConvertUTF@6:
; Line 503
	mov	eax, DWORD PTR _target$[ebp]
	mov	ecx, DWORD PTR _ch$34189[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _target$[ebp]
	add	edx, 4
	mov	DWORD PTR _target$[ebp], edx
$LN2@ConvertUTF@6:
; Line 505
	jmp	SHORT $LN1@ConvertUTF@6
$LN6@ConvertUTF@6:
; Line 506
	mov	DWORD PTR _result$[ebp], 3
; Line 507
	mov	eax, DWORD PTR _target$[ebp]
	mov	DWORD PTR [eax], 65533			; 0000fffdH
	mov	ecx, DWORD PTR _target$[ebp]
	add	ecx, 4
	mov	DWORD PTR _target$[ebp], ecx
$LN1@ConvertUTF@6:
; Line 509
	jmp	$LN19@ConvertUTF@6
$LN18@ConvertUTF@6:
; Line 510
	mov	eax, DWORD PTR _sourceStart$[ebp]
	mov	ecx, DWORD PTR _source$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 511
	mov	eax, DWORD PTR _targetStart$[ebp]
	mov	ecx, DWORD PTR _target$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 512
	mov	eax, DWORD PTR _result$[ebp]
; Line 513
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 256				; 00000100H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN22@ConvertUTF@6:
	DD	$LN8@ConvertUTF@6
	DD	$LN9@ConvertUTF@6
	DD	$LN10@ConvertUTF@6
	DD	$LN11@ConvertUTF@6
	DD	$LN12@ConvertUTF@6
	DD	$LN13@ConvertUTF@6
_ConvertUTF8toUTF32 ENDP
_TEXT	ENDS
END
