; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\Users\Ken\Documents\GitHub\spengine\Antlr\antlr3basetreeadaptor.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_antlr3BaseTreeAdaptorInit
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\users\ken\documents\github\spengine\antlr\antlr3basetreeadaptor.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT _antlr3BaseTreeAdaptorInit
_TEXT	SEGMENT
_adaptor$ = 8						; size = 4
_debugger$ = 12						; size = 4
_antlr3BaseTreeAdaptorInit PROC				; COMDAT
; Line 81
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 84
	cmp	DWORD PTR _debugger$[ebp], 0
	jne	SHORT $LN2@antlr3Base
; Line 87
	mov	eax, DWORD PTR _adaptor$[ebp]
	mov	DWORD PTR [eax+16], OFFSET _nilNode
; Line 89
	mov	eax, DWORD PTR _adaptor$[ebp]
	mov	DWORD PTR [eax+28], OFFSET _addChild
; Line 91
	mov	eax, DWORD PTR _adaptor$[ebp]
	mov	DWORD PTR [eax+52], OFFSET _becomeRoot
; Line 93
	mov	eax, DWORD PTR _adaptor$[ebp]
	mov	DWORD PTR [eax+32], OFFSET _addChildToken
; Line 95
	mov	eax, DWORD PTR _adaptor$[ebp]
	mov	DWORD PTR [eax+60], OFFSET _becomeRootToken
; Line 97
	mov	eax, DWORD PTR _adaptor$[ebp]
	mov	DWORD PTR [eax+68], OFFSET _createTypeToken
; Line 99
	mov	eax, DWORD PTR _adaptor$[ebp]
	mov	DWORD PTR [eax+72], OFFSET _createTypeTokenText
; Line 101
	mov	eax, DWORD PTR _adaptor$[ebp]
	mov	DWORD PTR [eax+76], OFFSET _createTypeText
; Line 103
	mov	eax, DWORD PTR _adaptor$[ebp]
	mov	DWORD PTR [eax+20], OFFSET _dupTree
; Line 105
	jmp	SHORT $LN1@antlr3Base
$LN2@antlr3Base:
; Line 108
	mov	eax, DWORD PTR _adaptor$[ebp]
	mov	DWORD PTR [eax+16], OFFSET _dbgNil
; Line 110
	mov	eax, DWORD PTR _adaptor$[ebp]
	mov	DWORD PTR [eax+28], OFFSET _dbgAddChild
; Line 112
	mov	eax, DWORD PTR _adaptor$[ebp]
	mov	DWORD PTR [eax+52], OFFSET _dbgBecomeRoot
; Line 114
	mov	eax, DWORD PTR _adaptor$[ebp]
	mov	DWORD PTR [eax+32], OFFSET _dbgAddChildToken
; Line 116
	mov	eax, DWORD PTR _adaptor$[ebp]
	mov	DWORD PTR [eax+60], OFFSET _dbgBecomeRootToken
; Line 118
	mov	eax, DWORD PTR _adaptor$[ebp]
	mov	DWORD PTR [eax+68], OFFSET _dbgCreateTypeToken
; Line 120
	mov	eax, DWORD PTR _adaptor$[ebp]
	mov	DWORD PTR [eax+72], OFFSET _dbgCreateTypeTokenText
; Line 122
	mov	eax, DWORD PTR _adaptor$[ebp]
	mov	DWORD PTR [eax+76], OFFSET _dbgCreateTypeText
; Line 124
	mov	eax, DWORD PTR _adaptor$[ebp]
	mov	DWORD PTR [eax+20], OFFSET _dbgDupTree
; Line 125
	mov	eax, DWORD PTR _debugger$[ebp]
	mov	ecx, DWORD PTR _adaptor$[ebp]
	mov	DWORD PTR [eax+24], ecx
$LN1@antlr3Base:
; Line 129
	mov	eax, DWORD PTR _adaptor$[ebp]
	mov	DWORD PTR [eax+24], OFFSET _dupTreeTT
; Line 131
	mov	eax, DWORD PTR _adaptor$[ebp]
	mov	DWORD PTR [eax+56], OFFSET _rulePostProcessing
; Line 133
	mov	eax, DWORD PTR _adaptor$[ebp]
	mov	DWORD PTR [eax+84], OFFSET _getType
; Line 135
	mov	eax, DWORD PTR _adaptor$[ebp]
	mov	DWORD PTR [eax+88], OFFSET _setType
; Line 137
	mov	eax, DWORD PTR _adaptor$[ebp]
	mov	DWORD PTR [eax+92], OFFSET _getText
; Line 139
	mov	eax, DWORD PTR _adaptor$[ebp]
	mov	DWORD PTR [eax+100], OFFSET _setText8
; Line 141
	mov	eax, DWORD PTR _adaptor$[ebp]
	mov	DWORD PTR [eax+96], OFFSET _setText
; Line 143
	mov	eax, DWORD PTR _adaptor$[ebp]
	mov	DWORD PTR [eax+104], OFFSET _getChild
; Line 145
	mov	eax, DWORD PTR _adaptor$[ebp]
	mov	DWORD PTR [eax+124], OFFSET _getChildCount
; Line 147
	mov	eax, DWORD PTR _adaptor$[ebp]
	mov	DWORD PTR [eax+128], OFFSET _getUniqueID
; Line 149
	mov	eax, DWORD PTR _adaptor$[ebp]
	mov	DWORD PTR [eax+48], OFFSET _isNilNode
; Line 152
	mov	eax, DWORD PTR _adaptor$[ebp]
	mov	DWORD PTR [eax+160], OFFSET _makeDot
; Line 157
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_antlr3BaseTreeAdaptorInit ENDP
_TEXT	ENDS
PUBLIC	??_C@_02JHLIKEIA@?6?$HN?$AA@			; `string'
PUBLIC	??_C@_01EEMJAFIK@?6?$AA@			; `string'
PUBLIC	??_C@_03EKALBCDP@?$CC?$FN?6?$AA@		; `string'
PUBLIC	??_C@_02HIBBOKEN@?2r?$AA@			; `string'
PUBLIC	??_C@_02JOGGLHBA@?2n?$AA@			; `string'
PUBLIC	??_C@_02MCKKLHBJ@?2?$CC?$AA@			; `string'
PUBLIC	??_C@_0N@DGCKJLE@?7n?$CFp?$FLlabel?$DN?$CC?$AA@	; `string'
PUBLIC	??_C@_0BI@IPCNDJJ@n0?$FLlabel?$DN?$CCEMPTY?5TREE?$CC?$FN?6?$AA@ ; `string'
PUBLIC	??_C@_0BCG@JAAAKLG@digraph?5?$HL?6?6?7ordering?$DNout?$DL?6?7ranks@ ; `string'
PUBLIC	__$ArrayPad$
EXTRN	__imp__sprintf:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	__RTC_CheckEsp:PROC
;	COMDAT ??_C@_02JHLIKEIA@?6?$HN?$AA@
CONST	SEGMENT
??_C@_02JHLIKEIA@?6?$HN?$AA@ DB 0aH, '}', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01EEMJAFIK@?6?$AA@
CONST	SEGMENT
??_C@_01EEMJAFIK@?6?$AA@ DB 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03EKALBCDP@?$CC?$FN?6?$AA@
CONST	SEGMENT
??_C@_03EKALBCDP@?$CC?$FN?6?$AA@ DB '"]', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02HIBBOKEN@?2r?$AA@
CONST	SEGMENT
??_C@_02HIBBOKEN@?2r?$AA@ DB '\r', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02JOGGLHBA@?2n?$AA@
CONST	SEGMENT
??_C@_02JOGGLHBA@?2n?$AA@ DB '\n', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02MCKKLHBJ@?2?$CC?$AA@
CONST	SEGMENT
??_C@_02MCKKLHBJ@?2?$CC?$AA@ DB '\"', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@DGCKJLE@?7n?$CFp?$FLlabel?$DN?$CC?$AA@
CONST	SEGMENT
??_C@_0N@DGCKJLE@?7n?$CFp?$FLlabel?$DN?$CC?$AA@ DB 09H, 'n%p[label="', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@IPCNDJJ@n0?$FLlabel?$DN?$CCEMPTY?5TREE?$CC?$FN?6?$AA@
CONST	SEGMENT
??_C@_0BI@IPCNDJJ@n0?$FLlabel?$DN?$CCEMPTY?5TREE?$CC?$FN?6?$AA@ DB 'n0[la'
	DB	'bel="EMPTY TREE"]', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BCG@JAAAKLG@digraph?5?$HL?6?6?7ordering?$DNout?$DL?6?7ranks@
CONST	SEGMENT
??_C@_0BCG@JAAAKLG@digraph?5?$HL?6?6?7ordering?$DNout?$DL?6?7ranks@ DB 'd'
	DB	'igraph {', 0aH, 0aH, 09H, 'ordering=out;', 0aH, 09H, 'ranksep'
	DB	'=.4;', 0aH, 09H, 'bgcolor="lightgrey";  node [shape=box, fixe'
	DB	'dsize=false, fontsize=12, fontname="Helvetica-bold", fontcolo'
	DB	'r="blue"', 0aH, 09H, 'width=.25, height=.25, color="black", f'
	DB	'illcolor="white", style="filled, solid, bold"];', 0aH, 0aH, 09H
	DB	'edge [arrowsize=.5, color="black", style="bold"]', 0aH, 0aH, 00H ; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT _makeDot
_TEXT	SEGMENT
tv91 = -308						; size = 4
_j$ = -108						; size = 4
_text$ = -96						; size = 4
_buff$ = -84						; size = 64
_dotSpec$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_adaptor$ = 8						; size = 4
_theTree$ = 12						; size = 4
_makeDot PROC						; COMDAT
; Line 360
	push	ebp
	mov	ebp, esp
	sub	esp, 308				; 00000134H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-308]
	mov	ecx, 77					; 0000004dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 382
	mov	esi, esp
	push	OFFSET ??_C@_0BCG@JAAAKLG@digraph?5?$HL?6?6?7ordering?$DNout?$DL?6?7ranks@
	mov	eax, DWORD PTR _adaptor$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _adaptor$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [eax+28]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _dotSpec$[ebp], eax
; Line 384
	cmp	DWORD PTR _theTree$[ebp], 0
	jne	SHORT $LN10@makeDot
; Line 388
	mov	esi, esp
	push	OFFSET ??_C@_0BI@IPCNDJJ@n0?$FLlabel?$DN?$CCEMPTY?5TREE?$CC?$FN?6?$AA@
	mov	eax, DWORD PTR _dotSpec$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dotSpec$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 389
	mov	eax, DWORD PTR _dotSpec$[ebp]
	jmp	$LN11@makeDot
$LN10@makeDot:
; Line 392
	mov	esi, esp
	mov	eax, DWORD PTR _theTree$[ebp]
	push	eax
	push	OFFSET ??_C@_0N@DGCKJLE@?7n?$CFp?$FLlabel?$DN?$CC?$AA@
	lea	ecx, DWORD PTR _buff$[ebp]
	push	ecx
	call	DWORD PTR __imp__sprintf
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 393
	mov	esi, esp
	lea	eax, DWORD PTR _buff$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dotSpec$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dotSpec$[ebp]
	mov	eax, DWORD PTR [edx+36]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 394
	mov	esi, esp
	mov	eax, DWORD PTR _theTree$[ebp]
	push	eax
	mov	ecx, DWORD PTR _adaptor$[ebp]
	push	ecx
	mov	edx, DWORD PTR _adaptor$[ebp]
	mov	eax, DWORD PTR [edx+92]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _text$[ebp], eax
; Line 395
	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN9@makeDot
$LN8@makeDot:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN9@makeDot:
	mov	eax, DWORD PTR _text$[ebp]
	mov	ecx, DWORD PTR _j$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jge	$LN7@makeDot
; Line 397
	mov	esi, esp
	mov	eax, DWORD PTR _j$[ebp]
	push	eax
	mov	ecx, DWORD PTR _text$[ebp]
	push	ecx
	mov	edx, DWORD PTR _text$[ebp]
	mov	eax, DWORD PTR [edx+84]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv91[ebp], eax
	cmp	DWORD PTR tv91[ebp], 10			; 0000000aH
	je	SHORT $LN3@makeDot
	cmp	DWORD PTR tv91[ebp], 13			; 0000000dH
	je	SHORT $LN2@makeDot
	cmp	DWORD PTR tv91[ebp], 34			; 00000022H
	je	SHORT $LN4@makeDot
	jmp	SHORT $LN1@makeDot
$LN4@makeDot:
; Line 401
	mov	esi, esp
	push	OFFSET ??_C@_02MCKKLHBJ@?2?$CC?$AA@
	mov	eax, DWORD PTR _dotSpec$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dotSpec$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 402
	jmp	SHORT $LN5@makeDot
$LN3@makeDot:
; Line 406
	mov	esi, esp
	push	OFFSET ??_C@_02JOGGLHBA@?2n?$AA@
	mov	eax, DWORD PTR _dotSpec$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dotSpec$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 407
	jmp	SHORT $LN5@makeDot
$LN2@makeDot:
; Line 411
	mov	esi, esp
	push	OFFSET ??_C@_02HIBBOKEN@?2r?$AA@
	mov	eax, DWORD PTR _dotSpec$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dotSpec$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 412
	jmp	SHORT $LN5@makeDot
$LN1@makeDot:
; Line 416
	mov	esi, esp
	mov	eax, DWORD PTR _j$[ebp]
	push	eax
	mov	ecx, DWORD PTR _text$[ebp]
	push	ecx
	mov	edx, DWORD PTR _text$[ebp]
	mov	eax, DWORD PTR [edx+84]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _dotSpec$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dotSpec$[ebp]
	mov	eax, DWORD PTR [edx+64]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN5@makeDot:
; Line 419
	jmp	$LN8@makeDot
$LN7@makeDot:
; Line 420
	mov	esi, esp
	push	OFFSET ??_C@_03EKALBCDP@?$CC?$FN?6?$AA@
	mov	eax, DWORD PTR _dotSpec$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dotSpec$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 424
	mov	eax, DWORD PTR _dotSpec$[ebp]
	push	eax
	mov	ecx, DWORD PTR _theTree$[ebp]
	push	ecx
	mov	edx, DWORD PTR _adaptor$[ebp]
	push	edx
	call	_defineDotNodes
	add	esp, 12					; 0000000cH
; Line 425
	mov	esi, esp
	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	mov	eax, DWORD PTR _dotSpec$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dotSpec$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 426
	mov	eax, DWORD PTR _dotSpec$[ebp]
	push	eax
	mov	ecx, DWORD PTR _theTree$[ebp]
	push	ecx
	mov	edx, DWORD PTR _adaptor$[ebp]
	push	edx
	call	_defineDotEdges
	add	esp, 12					; 0000000cH
; Line 430
	mov	esi, esp
	push	OFFSET ??_C@_02JHLIKEIA@?6?$HN?$AA@
	mov	eax, DWORD PTR _dotSpec$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dotSpec$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 434
	mov	eax, DWORD PTR _dotSpec$[ebp]
$LN11@makeDot:
; Line 435
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN15@makeDot
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 308				; 00000134H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN15@makeDot:
	DD	1
	DD	$LN14@makeDot
$LN14@makeDot:
	DD	-84					; ffffffacH
	DD	64					; 00000040H
	DD	$LN13@makeDot
$LN13@makeDot:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	0
_makeDot ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _defineDotNodes
_TEXT	SEGMENT
tv93 = -332						; size = 4
_j$ = -132						; size = 4
_text$ = -120						; size = 4
_buff$ = -108						; size = 64
_child$ = -36						; size = 4
_i$ = -24						; size = 4
_nCount$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_adaptor$ = 8						; size = 4
_t$ = 12						; size = 4
_dotSpec$ = 16						; size = 4
_defineDotNodes PROC					; COMDAT
; Line 161
	push	ebp
	mov	ebp, esp
	sub	esp, 332				; 0000014cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-332]
	mov	ecx, 83					; 00000053H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 177
	mov	esi, esp
	mov	eax, DWORD PTR _t$[ebp]
	push	eax
	mov	ecx, DWORD PTR _adaptor$[ebp]
	push	ecx
	mov	edx, DWORD PTR _adaptor$[ebp]
	mov	eax, DWORD PTR [edx+124]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _nCount$[ebp], eax
; Line 179
	cmp	DWORD PTR _nCount$[ebp], 0
	jne	SHORT $LN13@defineDotN
; Line 184
	jmp	$LN14@defineDotN
$LN13@defineDotN:
; Line 190
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN12@defineDotN
$LN11@defineDotN:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN12@defineDotN:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _nCount$[ebp]
	jge	$LN14@defineDotN
; Line 195
	mov	esi, esp
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _adaptor$[ebp]
	push	edx
	mov	eax, DWORD PTR _adaptor$[ebp]
	mov	ecx, DWORD PTR [eax+104]
	call	ecx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _child$[ebp], eax
; Line 199
	mov	esi, esp
	mov	eax, DWORD PTR _child$[ebp]
	push	eax
	push	OFFSET ??_C@_0N@DGCKJLE@?7n?$CFp?$FLlabel?$DN?$CC?$AA@
	lea	ecx, DWORD PTR _buff$[ebp]
	push	ecx
	call	DWORD PTR __imp__sprintf
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 200
	mov	esi, esp
	lea	eax, DWORD PTR _buff$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dotSpec$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dotSpec$[ebp]
	mov	eax, DWORD PTR [edx+36]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 201
	mov	esi, esp
	mov	eax, DWORD PTR _child$[ebp]
	push	eax
	mov	ecx, DWORD PTR _adaptor$[ebp]
	push	ecx
	mov	edx, DWORD PTR _adaptor$[ebp]
	mov	eax, DWORD PTR [edx+92]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _text$[ebp], eax
; Line 202
	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN9@defineDotN
$LN8@defineDotN:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN9@defineDotN:
	mov	eax, DWORD PTR _text$[ebp]
	mov	ecx, DWORD PTR _j$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jge	$LN7@defineDotN
; Line 204
	mov	esi, esp
	mov	eax, DWORD PTR _j$[ebp]
	push	eax
	mov	ecx, DWORD PTR _text$[ebp]
	push	ecx
	mov	edx, DWORD PTR _text$[ebp]
	mov	eax, DWORD PTR [edx+84]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv93[ebp], eax
	cmp	DWORD PTR tv93[ebp], 10			; 0000000aH
	je	SHORT $LN3@defineDotN
	cmp	DWORD PTR tv93[ebp], 13			; 0000000dH
	je	SHORT $LN2@defineDotN
	cmp	DWORD PTR tv93[ebp], 34			; 00000022H
	je	SHORT $LN4@defineDotN
	jmp	SHORT $LN1@defineDotN
$LN4@defineDotN:
; Line 208
	mov	esi, esp
	push	OFFSET ??_C@_02MCKKLHBJ@?2?$CC?$AA@
	mov	eax, DWORD PTR _dotSpec$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dotSpec$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 209
	jmp	SHORT $LN5@defineDotN
$LN3@defineDotN:
; Line 213
	mov	esi, esp
	push	OFFSET ??_C@_02JOGGLHBA@?2n?$AA@
	mov	eax, DWORD PTR _dotSpec$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dotSpec$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 214
	jmp	SHORT $LN5@defineDotN
$LN2@defineDotN:
; Line 218
	mov	esi, esp
	push	OFFSET ??_C@_02HIBBOKEN@?2r?$AA@
	mov	eax, DWORD PTR _dotSpec$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dotSpec$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 219
	jmp	SHORT $LN5@defineDotN
$LN1@defineDotN:
; Line 223
	mov	esi, esp
	mov	eax, DWORD PTR _j$[ebp]
	push	eax
	mov	ecx, DWORD PTR _text$[ebp]
	push	ecx
	mov	edx, DWORD PTR _text$[ebp]
	mov	eax, DWORD PTR [edx+84]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _dotSpec$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dotSpec$[ebp]
	mov	eax, DWORD PTR [edx+64]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN5@defineDotN:
; Line 226
	jmp	$LN8@defineDotN
$LN7@defineDotN:
; Line 227
	mov	esi, esp
	push	OFFSET ??_C@_03EKALBCDP@?$CC?$FN?6?$AA@
	mov	eax, DWORD PTR _dotSpec$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dotSpec$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 231
	mov	eax, DWORD PTR _dotSpec$[ebp]
	push	eax
	mov	ecx, DWORD PTR _child$[ebp]
	push	ecx
	mov	edx, DWORD PTR _adaptor$[ebp]
	push	edx
	call	_defineDotNodes
	add	esp, 12					; 0000000cH
; Line 232
	jmp	$LN11@defineDotN
$LN14@defineDotN:
; Line 237
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN18@defineDotN
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 332				; 0000014cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN18@defineDotN:
	DD	1
	DD	$LN17@defineDotN
$LN17@defineDotN:
	DD	-108					; ffffff94H
	DD	64					; 00000040H
	DD	$LN16@defineDotN
$LN16@defineDotN:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	0
_defineDotNodes ENDP
_TEXT	ENDS
PUBLIC	??_C@_04BBDFLMDN@?5?9?$DO?5?$AA@		; `string'
PUBLIC	??_C@_0BC@PEJKFJFG@?7?7n?$CFp?5?9?$DO?5n?$CFp?7?7?1?1?5?$AA@ ; `string'
PUBLIC	__$ArrayPad$
;	COMDAT ??_C@_04BBDFLMDN@?5?9?$DO?5?$AA@
CONST	SEGMENT
??_C@_04BBDFLMDN@?5?9?$DO?5?$AA@ DB ' -> ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@PEJKFJFG@?7?7n?$CFp?5?9?$DO?5n?$CFp?7?7?1?1?5?$AA@
CONST	SEGMENT
??_C@_0BC@PEJKFJFG@?7?7n?$CFp?5?9?$DO?5n?$CFp?7?7?1?1?5?$AA@ DB 09H, 09H, 'n'
	DB	'%p -> n%p', 09H, 09H, '// ', 00H		; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT _defineDotEdges
_TEXT	SEGMENT
tv161 = -396						; size = 4
tv95 = -396						; size = 4
_j$35418 = -196						; size = 4
_text$35417 = -184					; size = 4
_buff$35416 = -172					; size = 128
_child$35415 = -36					; size = 4
_i$ = -24						; size = 4
_nCount$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_adaptor$ = 8						; size = 4
_t$ = 12						; size = 4
_dotSpec$ = 16						; size = 4
_defineDotEdges PROC					; COMDAT
; Line 241
	push	ebp
	mov	ebp, esp
	sub	esp, 396				; 0000018cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-396]
	mov	ecx, 99					; 00000063H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 247
	cmp	DWORD PTR _t$[ebp], 0
	jne	SHORT $LN23@defineDotE
; Line 251
	jmp	$LN24@defineDotE
$LN23@defineDotE:
; Line 256
	mov	esi, esp
	mov	eax, DWORD PTR _t$[ebp]
	push	eax
	mov	ecx, DWORD PTR _adaptor$[ebp]
	push	ecx
	mov	edx, DWORD PTR _adaptor$[ebp]
	mov	eax, DWORD PTR [edx+124]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _nCount$[ebp], eax
; Line 258
	cmp	DWORD PTR _nCount$[ebp], 0
	jne	SHORT $LN22@defineDotE
; Line 263
	jmp	$LN24@defineDotE
$LN22@defineDotE:
; Line 269
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN21@defineDotE
$LN20@defineDotE:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN21@defineDotE:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _nCount$[ebp]
	jge	$LN24@defineDotE
; Line 278
	mov	esi, esp
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _adaptor$[ebp]
	push	edx
	mov	eax, DWORD PTR _adaptor$[ebp]
	mov	ecx, DWORD PTR [eax+104]
	call	ecx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _child$35415[ebp], eax
; Line 282
	mov	esi, esp
	mov	eax, DWORD PTR _child$35415[ebp]
	push	eax
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	push	OFFSET ??_C@_0BC@PEJKFJFG@?7?7n?$CFp?5?9?$DO?5n?$CFp?7?7?1?1?5?$AA@
	lea	edx, DWORD PTR _buff$35416[ebp]
	push	edx
	call	DWORD PTR __imp__sprintf
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 284
	mov	esi, esp
	lea	eax, DWORD PTR _buff$35416[ebp]
	push	eax
	mov	ecx, DWORD PTR _dotSpec$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dotSpec$[ebp]
	mov	eax, DWORD PTR [edx+36]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 288
	mov	esi, esp
	mov	eax, DWORD PTR _t$[ebp]
	push	eax
	mov	ecx, DWORD PTR _adaptor$[ebp]
	push	ecx
	mov	edx, DWORD PTR _adaptor$[ebp]
	mov	eax, DWORD PTR [edx+92]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _text$35417[ebp], eax
; Line 289
	mov	DWORD PTR _j$35418[ebp], 0
	jmp	SHORT $LN18@defineDotE
$LN17@defineDotE:
	mov	eax, DWORD PTR _j$35418[ebp]
	add	eax, 1
	mov	DWORD PTR _j$35418[ebp], eax
$LN18@defineDotE:
	mov	eax, DWORD PTR _text$35417[ebp]
	mov	ecx, DWORD PTR _j$35418[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jge	$LN16@defineDotE
; Line 291
	mov	esi, esp
	mov	eax, DWORD PTR _j$35418[ebp]
	push	eax
	mov	ecx, DWORD PTR _text$35417[ebp]
	push	ecx
	mov	edx, DWORD PTR _text$35417[ebp]
	mov	eax, DWORD PTR [edx+84]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv95[ebp], eax
	cmp	DWORD PTR tv95[ebp], 10			; 0000000aH
	je	SHORT $LN12@defineDotE
	cmp	DWORD PTR tv95[ebp], 13			; 0000000dH
	je	SHORT $LN11@defineDotE
	cmp	DWORD PTR tv95[ebp], 34			; 00000022H
	je	SHORT $LN13@defineDotE
	jmp	SHORT $LN10@defineDotE
$LN13@defineDotE:
; Line 295
	mov	esi, esp
	push	OFFSET ??_C@_02MCKKLHBJ@?2?$CC?$AA@
	mov	eax, DWORD PTR _dotSpec$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dotSpec$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 296
	jmp	SHORT $LN14@defineDotE
$LN12@defineDotE:
; Line 300
	mov	esi, esp
	push	OFFSET ??_C@_02JOGGLHBA@?2n?$AA@
	mov	eax, DWORD PTR _dotSpec$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dotSpec$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 301
	jmp	SHORT $LN14@defineDotE
$LN11@defineDotE:
; Line 305
	mov	esi, esp
	push	OFFSET ??_C@_02HIBBOKEN@?2r?$AA@
	mov	eax, DWORD PTR _dotSpec$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dotSpec$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 306
	jmp	SHORT $LN14@defineDotE
$LN10@defineDotE:
; Line 310
	mov	esi, esp
	mov	eax, DWORD PTR _j$35418[ebp]
	push	eax
	mov	ecx, DWORD PTR _text$35417[ebp]
	push	ecx
	mov	edx, DWORD PTR _text$35417[ebp]
	mov	eax, DWORD PTR [edx+84]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _dotSpec$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dotSpec$[ebp]
	mov	eax, DWORD PTR [edx+64]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN14@defineDotE:
; Line 313
	jmp	$LN17@defineDotE
$LN16@defineDotE:
; Line 315
	mov	esi, esp
	push	OFFSET ??_C@_04BBDFLMDN@?5?9?$DO?5?$AA@
	mov	eax, DWORD PTR _dotSpec$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dotSpec$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 317
	mov	esi, esp
	mov	eax, DWORD PTR _child$35415[ebp]
	push	eax
	mov	ecx, DWORD PTR _adaptor$[ebp]
	push	ecx
	mov	edx, DWORD PTR _adaptor$[ebp]
	mov	eax, DWORD PTR [edx+92]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _text$35417[ebp], eax
; Line 318
	mov	DWORD PTR _j$35418[ebp], 0
	jmp	SHORT $LN9@defineDotE
$LN8@defineDotE:
	mov	eax, DWORD PTR _j$35418[ebp]
	add	eax, 1
	mov	DWORD PTR _j$35418[ebp], eax
$LN9@defineDotE:
	mov	eax, DWORD PTR _text$35417[ebp]
	mov	ecx, DWORD PTR _j$35418[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jge	$LN7@defineDotE
; Line 320
	mov	esi, esp
	mov	eax, DWORD PTR _j$35418[ebp]
	push	eax
	mov	ecx, DWORD PTR _text$35417[ebp]
	push	ecx
	mov	edx, DWORD PTR _text$35417[ebp]
	mov	eax, DWORD PTR [edx+84]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv161[ebp], eax
	cmp	DWORD PTR tv161[ebp], 10		; 0000000aH
	je	SHORT $LN3@defineDotE
	cmp	DWORD PTR tv161[ebp], 13		; 0000000dH
	je	SHORT $LN2@defineDotE
	cmp	DWORD PTR tv161[ebp], 34		; 00000022H
	je	SHORT $LN4@defineDotE
	jmp	SHORT $LN1@defineDotE
$LN4@defineDotE:
; Line 324
	mov	esi, esp
	push	OFFSET ??_C@_02MCKKLHBJ@?2?$CC?$AA@
	mov	eax, DWORD PTR _dotSpec$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dotSpec$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 325
	jmp	SHORT $LN5@defineDotE
$LN3@defineDotE:
; Line 329
	mov	esi, esp
	push	OFFSET ??_C@_02JOGGLHBA@?2n?$AA@
	mov	eax, DWORD PTR _dotSpec$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dotSpec$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 330
	jmp	SHORT $LN5@defineDotE
$LN2@defineDotE:
; Line 334
	mov	esi, esp
	push	OFFSET ??_C@_02HIBBOKEN@?2r?$AA@
	mov	eax, DWORD PTR _dotSpec$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dotSpec$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 335
	jmp	SHORT $LN5@defineDotE
$LN1@defineDotE:
; Line 339
	mov	esi, esp
	mov	eax, DWORD PTR _j$35418[ebp]
	push	eax
	mov	ecx, DWORD PTR _text$35417[ebp]
	push	ecx
	mov	edx, DWORD PTR _text$35417[ebp]
	mov	eax, DWORD PTR [edx+84]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _dotSpec$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dotSpec$[ebp]
	mov	eax, DWORD PTR [edx+64]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN5@defineDotE:
; Line 342
	jmp	$LN8@defineDotE
$LN7@defineDotE:
; Line 343
	mov	esi, esp
	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	mov	eax, DWORD PTR _dotSpec$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dotSpec$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 348
	mov	eax, DWORD PTR _dotSpec$[ebp]
	push	eax
	mov	ecx, DWORD PTR _child$35415[ebp]
	push	ecx
	mov	edx, DWORD PTR _adaptor$[ebp]
	push	edx
	call	_defineDotEdges
	add	esp, 12					; 0000000cH
; Line 349
	jmp	$LN20@defineDotE
$LN24@defineDotE:
; Line 354
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN28@defineDotE
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 396				; 0000018cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN28@defineDotE:
	DD	1
	DD	$LN27@defineDotE
$LN27@defineDotE:
	DD	-172					; ffffff54H
	DD	128					; 00000080H
	DD	$LN26@defineDotE
$LN26@defineDotE:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	0
_defineDotEdges ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _nilNode
_TEXT	SEGMENT
_adaptor$ = 8						; size = 4
_nilNode PROC						; COMDAT
; Line 442
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 443
	mov	esi, esp
	push	0
	mov	eax, DWORD PTR _adaptor$[ebp]
	push	eax
	mov	ecx, DWORD PTR _adaptor$[ebp]
	mov	edx, DWORD PTR [ecx+64]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 444
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nilNode ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _dbgNil
_TEXT	SEGMENT
_t$ = -8						; size = 4
_adaptor$ = 8						; size = 4
_dbgNil	PROC						; COMDAT
; Line 448
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 451
	mov	esi, esp
	push	0
	mov	eax, DWORD PTR _adaptor$[ebp]
	push	eax
	mov	ecx, DWORD PTR _adaptor$[ebp]
	mov	edx, DWORD PTR [ecx+64]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _t$[ebp], eax
; Line 452
	mov	esi, esp
	mov	eax, DWORD PTR _t$[ebp]
	push	eax
	mov	ecx, DWORD PTR _adaptor$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _adaptor$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+140]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 454
	mov	eax, DWORD PTR _t$[ebp]
; Line 455
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_dbgNil	ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _dupTree
_TEXT	SEGMENT
_adaptor$ = 8						; size = 4
_t$ = 12						; size = 4
_dupTree PROC						; COMDAT
; Line 462
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 463
	mov	esi, esp
	push	0
	mov	eax, DWORD PTR _t$[ebp]
	push	eax
	mov	ecx, DWORD PTR _adaptor$[ebp]
	push	ecx
	mov	edx, DWORD PTR _adaptor$[ebp]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 464
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_dupTree ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _dupTreeTT
_TEXT	SEGMENT
_i$ = -56						; size = 4
_n$ = -44						; size = 4
_newSubTree$ = -32					; size = 4
_child$ = -20						; size = 4
_newTree$ = -8						; size = 4
_adaptor$ = 8						; size = 4
_t$ = 12						; size = 4
_parent$ = 16						; size = 4
_dupTreeTT PROC						; COMDAT
; Line 468
	push	ebp
	mov	ebp, esp
	sub	esp, 252				; 000000fcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-252]
	mov	ecx, 63					; 0000003fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 475
	cmp	DWORD PTR _t$[ebp], 0
	jne	SHORT $LN4@dupTreeTT
; Line 477
	xor	eax, eax
	jmp	$LN5@dupTreeTT
$LN4@dupTreeTT:
; Line 479
	mov	esi, esp
	mov	eax, DWORD PTR _t$[ebp]
	push	eax
	mov	ecx, DWORD PTR _t$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _newTree$[ebp], eax
; Line 483
	mov	esi, esp
	mov	eax, DWORD PTR _t$[ebp]
	push	eax
	mov	ecx, DWORD PTR _t$[ebp]
	mov	edx, DWORD PTR [ecx+64]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	eax
	mov	eax, DWORD PTR _newTree$[ebp]
	push	eax
	mov	ecx, DWORD PTR _adaptor$[ebp]
	push	ecx
	mov	edx, DWORD PTR _adaptor$[ebp]
	mov	eax, DWORD PTR [edx+116]
	call	eax
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 484
	mov	esi, esp
	mov	eax, DWORD PTR _parent$[ebp]
	push	eax
	mov	ecx, DWORD PTR _newTree$[ebp]
	push	ecx
	mov	edx, DWORD PTR _adaptor$[ebp]
	push	edx
	mov	eax, DWORD PTR _adaptor$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	call	ecx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 485
	mov	esi, esp
	mov	eax, DWORD PTR _t$[ebp]
	push	eax
	mov	ecx, DWORD PTR _adaptor$[ebp]
	push	ecx
	mov	edx, DWORD PTR _adaptor$[ebp]
	mov	eax, DWORD PTR [edx+124]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _n$[ebp], eax
; Line 487
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@dupTreeTT
$LN2@dupTreeTT:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@dupTreeTT:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _n$[ebp]
	jae	SHORT $LN1@dupTreeTT
; Line 489
	mov	esi, esp
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _adaptor$[ebp]
	push	edx
	mov	eax, DWORD PTR _adaptor$[ebp]
	mov	ecx, DWORD PTR [eax+104]
	call	ecx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _child$[ebp], eax
; Line 490
	mov	esi, esp
	mov	eax, DWORD PTR _t$[ebp]
	push	eax
	mov	ecx, DWORD PTR _child$[ebp]
	push	ecx
	mov	edx, DWORD PTR _adaptor$[ebp]
	push	edx
	mov	eax, DWORD PTR _adaptor$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	call	ecx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _newSubTree$[ebp], eax
; Line 491
	mov	esi, esp
	mov	eax, DWORD PTR _newSubTree$[ebp]
	push	eax
	mov	ecx, DWORD PTR _newTree$[ebp]
	push	ecx
	mov	edx, DWORD PTR _adaptor$[ebp]
	push	edx
	mov	eax, DWORD PTR _adaptor$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	call	ecx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 492
	jmp	SHORT $LN2@dupTreeTT
$LN1@dupTreeTT:
; Line 493
	mov	eax, DWORD PTR _newTree$[ebp]
$LN5@dupTreeTT:
; Line 494
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 252				; 000000fcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_dupTreeTT ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _dbgDupTree
_TEXT	SEGMENT
_t$ = -8						; size = 4
_adaptor$ = 8						; size = 4
_tree$ = 12						; size = 4
_dbgDupTree PROC					; COMDAT
; Line 521
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 526
	mov	esi, esp
	push	0
	mov	eax, DWORD PTR _tree$[ebp]
	push	eax
	mov	ecx, DWORD PTR _adaptor$[ebp]
	push	ecx
	mov	edx, DWORD PTR _adaptor$[ebp]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _t$[ebp], eax
; Line 533
	mov	eax, DWORD PTR _t$[ebp]
	push	eax
	mov	ecx, DWORD PTR _adaptor$[ebp]
	push	ecx
	call	_simulateTreeConstruction
	add	esp, 8
; Line 535
	mov	eax, DWORD PTR _t$[ebp]
; Line 536
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_dbgDupTree ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _simulateTreeConstruction
_TEXT	SEGMENT
_child$ = -32						; size = 4
_i$ = -20						; size = 4
_n$ = -8						; size = 4
_adaptor$ = 8						; size = 4
_tree$ = 12						; size = 4
_simulateTreeConstruction PROC				; COMDAT
; Line 501
	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 508
	mov	esi, esp
	mov	eax, DWORD PTR _tree$[ebp]
	push	eax
	mov	ecx, DWORD PTR _adaptor$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _adaptor$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+140]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 510
	mov	esi, esp
	mov	eax, DWORD PTR _tree$[ebp]
	push	eax
	mov	ecx, DWORD PTR _adaptor$[ebp]
	push	ecx
	mov	edx, DWORD PTR _adaptor$[ebp]
	mov	eax, DWORD PTR [edx+124]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _n$[ebp], eax
; Line 511
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@simulateTr
$LN2@simulateTr:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@simulateTr:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _n$[ebp]
	jae	SHORT $LN4@simulateTr
; Line 513
	mov	esi, esp
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _tree$[ebp]
	push	ecx
	mov	edx, DWORD PTR _adaptor$[ebp]
	push	edx
	mov	eax, DWORD PTR _adaptor$[ebp]
	mov	ecx, DWORD PTR [eax+104]
	call	ecx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _child$[ebp], eax
; Line 514
	mov	eax, DWORD PTR _child$[ebp]
	push	eax
	mov	ecx, DWORD PTR _adaptor$[ebp]
	push	ecx
	call	_simulateTreeConstruction
	add	esp, 8
; Line 515
	mov	esi, esp
	mov	eax, DWORD PTR _child$[ebp]
	push	eax
	mov	ecx, DWORD PTR _tree$[ebp]
	push	ecx
	mov	edx, DWORD PTR _adaptor$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _adaptor$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx+152]
	call	eax
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 516
	jmp	SHORT $LN2@simulateTr
$LN4@simulateTr:
; Line 517
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_simulateTreeConstruction ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _addChild
_TEXT	SEGMENT
_adaptor$ = 8						; size = 4
_t$ = 12						; size = 4
_child$ = 16						; size = 4
_addChild PROC						; COMDAT
; Line 549
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 550
	cmp	DWORD PTR _t$[ebp], 0
	je	SHORT $LN2@addChild
	cmp	DWORD PTR _child$[ebp], 0
	je	SHORT $LN2@addChild
; Line 552
	mov	esi, esp
	mov	eax, DWORD PTR _child$[ebp]
	push	eax
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _t$[ebp]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@addChild:
; Line 554
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_addChild ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _dbgAddChild
_TEXT	SEGMENT
_adaptor$ = 8						; size = 4
_t$ = 12						; size = 4
_child$ = 16						; size = 4
_dbgAddChild PROC					; COMDAT
; Line 557
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 558
	cmp	DWORD PTR _t$[ebp], 0
	je	SHORT $LN2@dbgAddChil
	cmp	DWORD PTR _child$[ebp], 0
	je	SHORT $LN2@dbgAddChil
; Line 560
	mov	esi, esp
	mov	eax, DWORD PTR _child$[ebp]
	push	eax
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _t$[ebp]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 561
	mov	esi, esp
	mov	eax, DWORD PTR _child$[ebp]
	push	eax
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _adaptor$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _adaptor$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx+152]
	call	eax
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@dbgAddChil:
; Line 563
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_dbgAddChild ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _addChildToken
_TEXT	SEGMENT
_adaptor$ = 8						; size = 4
_t$ = 12						; size = 4
_child$ = 16						; size = 4
_addChildToken PROC					; COMDAT
; Line 568
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 569
	cmp	DWORD PTR _t$[ebp], 0
	je	SHORT $LN2@addChildTo
	cmp	DWORD PTR _child$[ebp], 0
	je	SHORT $LN2@addChildTo
; Line 571
	mov	esi, esp
	mov	eax, DWORD PTR _child$[ebp]
	push	eax
	mov	ecx, DWORD PTR _adaptor$[ebp]
	push	ecx
	mov	edx, DWORD PTR _adaptor$[ebp]
	mov	eax, DWORD PTR [edx+64]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _adaptor$[ebp]
	push	edx
	mov	eax, DWORD PTR _adaptor$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	call	ecx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@addChildTo:
; Line 573
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_addChildToken ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _dbgAddChildToken
_TEXT	SEGMENT
_tc$ = -8						; size = 4
_adaptor$ = 8						; size = 4
_t$ = 12						; size = 4
_child$ = 16						; size = 4
_dbgAddChildToken PROC					; COMDAT
; Line 576
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 579
	cmp	DWORD PTR _t$[ebp], 0
	je	SHORT $LN2@dbgAddChil@2
	cmp	DWORD PTR _child$[ebp], 0
	je	SHORT $LN2@dbgAddChil@2
; Line 581
	mov	esi, esp
	mov	eax, DWORD PTR _child$[ebp]
	push	eax
	mov	ecx, DWORD PTR _adaptor$[ebp]
	push	ecx
	mov	edx, DWORD PTR _adaptor$[ebp]
	mov	eax, DWORD PTR [edx+64]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _tc$[ebp], eax
; Line 582
	mov	esi, esp
	mov	eax, DWORD PTR _tc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _adaptor$[ebp]
	push	edx
	mov	eax, DWORD PTR _adaptor$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	call	ecx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 583
	mov	esi, esp
	mov	eax, DWORD PTR _tc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _adaptor$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _adaptor$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx+152]
	call	eax
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@dbgAddChil@2:
; Line 585
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_dbgAddChildToken ENDP
_TEXT	ENDS
PUBLIC	??_C@_0EC@GKDPFFCG@More?5than?5one?5node?5as?5root?$CB?5TODO@ ; `string'
EXTRN	__imp__fprintf:PROC
EXTRN	__imp____iob_func:PROC
;	COMDAT ??_C@_0EC@GKDPFFCG@More?5than?5one?5node?5as?5root?$CB?5TODO@
CONST	SEGMENT
??_C@_0EC@GKDPFFCG@More?5than?5one?5node?5as?5root?$CB?5TODO@ DB 'More th'
	DB	'an one node as root! TODO: Create tree exception handling', 0aH
	DB	00H						; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT _becomeRoot
_TEXT	SEGMENT
_saveRoot$ = -8						; size = 4
_adaptor$ = 8						; size = 4
_newRootTree$ = 12					; size = 4
_oldRootTree$ = 16					; size = 4
_becomeRoot PROC					; COMDAT
; Line 621
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 628
	cmp	DWORD PTR _newRootTree$[ebp], 0
	jne	SHORT $LN5@becomeRoot
; Line 630
	mov	eax, DWORD PTR _oldRootTree$[ebp]
	jmp	$LN6@becomeRoot
$LN5@becomeRoot:
; Line 636
	cmp	DWORD PTR _oldRootTree$[ebp], 0
	jne	SHORT $LN4@becomeRoot
; Line 638
	mov	eax, DWORD PTR _newRootTree$[ebp]
	jmp	$LN6@becomeRoot
$LN4@becomeRoot:
; Line 643
	mov	esi, esp
	mov	eax, DWORD PTR _newRootTree$[ebp]
	push	eax
	mov	ecx, DWORD PTR _newRootTree$[ebp]
	mov	edx, DWORD PTR [ecx+96]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	movzx	eax, al
	test	eax, eax
	je	$LN3@becomeRoot
; Line 645
	mov	esi, esp
	mov	eax, DWORD PTR _newRootTree$[ebp]
	push	eax
	mov	ecx, DWORD PTR _newRootTree$[ebp]
	mov	edx, DWORD PTR [ecx+68]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 1
	jbe	SHORT $LN2@becomeRoot
; Line 649
	mov	esi, esp
	push	OFFSET ??_C@_0EC@GKDPFFCG@More?5than?5one?5node?5as?5root?$CB?5TODO@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 650
	mov	eax, DWORD PTR _newRootTree$[ebp]
	jmp	$LN6@becomeRoot
$LN2@becomeRoot:
; Line 656
	mov	eax, DWORD PTR _newRootTree$[ebp]
	mov	DWORD PTR _saveRoot$[ebp], eax
; Line 657
	mov	esi, esp
	push	0
	mov	eax, DWORD PTR _newRootTree$[ebp]
	push	eax
	mov	ecx, DWORD PTR _newRootTree$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _newRootTree$[ebp], eax
; Line 661
	mov	esi, esp
	mov	eax, DWORD PTR _saveRoot$[ebp]
	push	eax
	mov	ecx, DWORD PTR _saveRoot$[ebp]
	mov	edx, DWORD PTR [ecx+120]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@becomeRoot:
; Line 668
	mov	esi, esp
	mov	eax, DWORD PTR _oldRootTree$[ebp]
	push	eax
	mov	ecx, DWORD PTR _newRootTree$[ebp]
	push	ecx
	mov	edx, DWORD PTR _newRootTree$[ebp]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 674
	mov	esi, esp
	mov	eax, DWORD PTR _oldRootTree$[ebp]
	push	eax
	mov	ecx, DWORD PTR _oldRootTree$[ebp]
	mov	edx, DWORD PTR [ecx+96]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN1@becomeRoot
; Line 683
	mov	esi, esp
	mov	eax, DWORD PTR _oldRootTree$[ebp]
	push	eax
	mov	ecx, DWORD PTR _oldRootTree$[ebp]
	mov	edx, DWORD PTR [ecx+120]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@becomeRoot:
; Line 687
	mov	eax, DWORD PTR _newRootTree$[ebp]
$LN6@becomeRoot:
; Line 689
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_becomeRoot ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _dbgBecomeRoot
_TEXT	SEGMENT
_t$ = -8						; size = 4
_adaptor$ = 8						; size = 4
_newRootTree$ = 12					; size = 4
_oldRootTree$ = 16					; size = 4
_dbgBecomeRoot PROC					; COMDAT
; Line 692
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 695
	mov	eax, DWORD PTR _oldRootTree$[ebp]
	push	eax
	mov	ecx, DWORD PTR _newRootTree$[ebp]
	push	ecx
	mov	edx, DWORD PTR _adaptor$[ebp]
	push	edx
	call	_becomeRoot
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _t$[ebp], eax
; Line 697
	mov	esi, esp
	mov	eax, DWORD PTR _oldRootTree$[ebp]
	push	eax
	mov	ecx, DWORD PTR _newRootTree$[ebp]
	push	ecx
	mov	edx, DWORD PTR _adaptor$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _adaptor$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx+148]
	call	eax
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 699
	mov	eax, DWORD PTR _t$[ebp]
; Line 700
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_dbgBecomeRoot ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _rulePostProcessing
_TEXT	SEGMENT
_saveRoot$ = -8						; size = 4
_adaptor$ = 8						; size = 4
_root$ = 12						; size = 4
_rulePostProcessing PROC				; COMDAT
; Line 705
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 711
	mov	eax, DWORD PTR _root$[ebp]
	mov	DWORD PTR _saveRoot$[ebp], eax
; Line 713
	cmp	DWORD PTR _root$[ebp], 0
	je	$LN4@rulePostPr
	mov	esi, esp
	mov	eax, DWORD PTR _root$[ebp]
	push	eax
	mov	ecx, DWORD PTR _root$[ebp]
	mov	edx, DWORD PTR [ecx+96]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	movzx	eax, al
	test	eax, eax
	je	$LN4@rulePostPr
; Line 715
	mov	esi, esp
	mov	eax, DWORD PTR _root$[ebp]
	push	eax
	mov	ecx, DWORD PTR _root$[ebp]
	mov	edx, DWORD PTR [ecx+68]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN3@rulePostPr
; Line 717
	mov	DWORD PTR _root$[ebp], 0
	jmp	$LN4@rulePostPr
$LN3@rulePostPr:
; Line 719
	mov	esi, esp
	mov	eax, DWORD PTR _root$[ebp]
	push	eax
	mov	ecx, DWORD PTR _root$[ebp]
	mov	edx, DWORD PTR [ecx+68]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 1
	jne	SHORT $LN4@rulePostPr
; Line 721
	mov	esi, esp
	push	0
	mov	eax, DWORD PTR _root$[ebp]
	push	eax
	mov	ecx, DWORD PTR _root$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _root$[ebp], eax
; Line 722
	mov	esi, esp
	push	0
	mov	eax, DWORD PTR _root$[ebp]
	push	eax
	mov	ecx, DWORD PTR _root$[ebp]
	mov	edx, DWORD PTR [ecx+76]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 723
	mov	esi, esp
	push	-1
	mov	eax, DWORD PTR _root$[ebp]
	push	eax
	mov	ecx, DWORD PTR _root$[ebp]
	mov	edx, DWORD PTR [ecx+60]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 729
	mov	esi, esp
	mov	eax, DWORD PTR _saveRoot$[ebp]
	push	eax
	mov	ecx, DWORD PTR _saveRoot$[ebp]
	mov	edx, DWORD PTR [ecx+120]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN4@rulePostPr:
; Line 733
	mov	eax, DWORD PTR _root$[ebp]
; Line 734
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_rulePostProcessing ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _becomeRootToken
_TEXT	SEGMENT
_adaptor$ = 8						; size = 4
_newRoot$ = 12						; size = 4
_oldRoot$ = 16						; size = 4
_becomeRootToken PROC					; COMDAT
; Line 741
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 742
	mov	esi, esp
	mov	eax, DWORD PTR _oldRoot$[ebp]
	push	eax
	mov	edi, esp
	mov	ecx, DWORD PTR _newRoot$[ebp]
	push	ecx
	mov	edx, DWORD PTR _adaptor$[ebp]
	push	edx
	mov	eax, DWORD PTR _adaptor$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	call	ecx
	add	esp, 8
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	mov	edx, DWORD PTR _adaptor$[ebp]
	push	edx
	mov	eax, DWORD PTR _adaptor$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	call	ecx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 743
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_becomeRootToken ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _dbgBecomeRootToken
_TEXT	SEGMENT
_t$ = -8						; size = 4
_adaptor$ = 8						; size = 4
_newRoot$ = 12						; size = 4
_oldRoot$ = 16						; size = 4
_dbgBecomeRootToken PROC				; COMDAT
; Line 746
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 749
	mov	esi, esp
	mov	eax, DWORD PTR _oldRoot$[ebp]
	push	eax
	mov	edi, esp
	mov	ecx, DWORD PTR _newRoot$[ebp]
	push	ecx
	mov	edx, DWORD PTR _adaptor$[ebp]
	push	edx
	mov	eax, DWORD PTR _adaptor$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	call	ecx
	add	esp, 8
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	mov	edx, DWORD PTR _adaptor$[ebp]
	push	edx
	mov	eax, DWORD PTR _adaptor$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	call	ecx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _t$[ebp], eax
; Line 751
	mov	esi, esp
	mov	eax, DWORD PTR _oldRoot$[ebp]
	push	eax
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _adaptor$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _adaptor$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx+148]
	call	eax
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 753
	mov	eax, DWORD PTR _t$[ebp]
; Line 754
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_dbgBecomeRootToken ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _createTypeToken
_TEXT	SEGMENT
_adaptor$ = 8						; size = 4
_tokenType$ = 12					; size = 4
_fromToken$ = 16					; size = 4
_createTypeToken PROC					; COMDAT
; Line 761
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 764
	mov	esi, esp
	mov	eax, DWORD PTR _fromToken$[ebp]
	push	eax
	mov	ecx, DWORD PTR _adaptor$[ebp]
	push	ecx
	mov	edx, DWORD PTR _adaptor$[ebp]
	mov	eax, DWORD PTR [edx+136]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _fromToken$[ebp], eax
; Line 768
	mov	esi, esp
	mov	eax, DWORD PTR _tokenType$[ebp]
	push	eax
	mov	ecx, DWORD PTR _fromToken$[ebp]
	push	ecx
	mov	edx, DWORD PTR _fromToken$[ebp]
	mov	eax, DWORD PTR [edx+88]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 772
	mov	esi, esp
	mov	eax, DWORD PTR _fromToken$[ebp]
	push	eax
	mov	ecx, DWORD PTR _adaptor$[ebp]
	push	ecx
	mov	edx, DWORD PTR _adaptor$[ebp]
	mov	eax, DWORD PTR [edx+64]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 773
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_createTypeToken ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _dbgCreateTypeToken
_TEXT	SEGMENT
_t$ = -8						; size = 4
_adaptor$ = 8						; size = 4
_tokenType$ = 12					; size = 4
_fromToken$ = 16					; size = 4
_dbgCreateTypeToken PROC				; COMDAT
; Line 776
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 779
	mov	eax, DWORD PTR _fromToken$[ebp]
	push	eax
	mov	ecx, DWORD PTR _tokenType$[ebp]
	push	ecx
	mov	edx, DWORD PTR _adaptor$[ebp]
	push	edx
	call	_createTypeToken
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _t$[ebp], eax
; Line 781
	mov	esi, esp
	mov	eax, DWORD PTR _t$[ebp]
	push	eax
	mov	ecx, DWORD PTR _adaptor$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _adaptor$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+140]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 783
	mov	eax, DWORD PTR _t$[ebp]
; Line 784
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_dbgCreateTypeToken ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _createTypeTokenText
_TEXT	SEGMENT
_adaptor$ = 8						; size = 4
_tokenType$ = 12					; size = 4
_fromToken$ = 16					; size = 4
_text$ = 20						; size = 4
_createTypeTokenText PROC				; COMDAT
; Line 788
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 791
	mov	esi, esp
	mov	eax, DWORD PTR _fromToken$[ebp]
	push	eax
	mov	ecx, DWORD PTR _adaptor$[ebp]
	push	ecx
	mov	edx, DWORD PTR _adaptor$[ebp]
	mov	eax, DWORD PTR [edx+136]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _fromToken$[ebp], eax
; Line 795
	mov	esi, esp
	mov	eax, DWORD PTR _tokenType$[ebp]
	push	eax
	mov	ecx, DWORD PTR _fromToken$[ebp]
	push	ecx
	mov	edx, DWORD PTR _fromToken$[ebp]
	mov	eax, DWORD PTR [edx+88]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 799
	mov	esi, esp
	mov	eax, DWORD PTR _text$[ebp]
	push	eax
	mov	ecx, DWORD PTR _fromToken$[ebp]
	push	ecx
	mov	edx, DWORD PTR _fromToken$[ebp]
	mov	eax, DWORD PTR [edx+80]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 803
	mov	esi, esp
	mov	eax, DWORD PTR _fromToken$[ebp]
	push	eax
	mov	ecx, DWORD PTR _adaptor$[ebp]
	push	ecx
	mov	edx, DWORD PTR _adaptor$[ebp]
	mov	eax, DWORD PTR [edx+64]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 804
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_createTypeTokenText ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _dbgCreateTypeTokenText
_TEXT	SEGMENT
_t$ = -8						; size = 4
_adaptor$ = 8						; size = 4
_tokenType$ = 12					; size = 4
_fromToken$ = 16					; size = 4
_text$ = 20						; size = 4
_dbgCreateTypeTokenText PROC				; COMDAT
; Line 807
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 810
	mov	eax, DWORD PTR _text$[ebp]
	push	eax
	mov	ecx, DWORD PTR _fromToken$[ebp]
	push	ecx
	mov	edx, DWORD PTR _tokenType$[ebp]
	push	edx
	mov	eax, DWORD PTR _adaptor$[ebp]
	push	eax
	call	_createTypeTokenText
	add	esp, 16					; 00000010H
	mov	DWORD PTR _t$[ebp], eax
; Line 812
	mov	esi, esp
	mov	eax, DWORD PTR _t$[ebp]
	push	eax
	mov	ecx, DWORD PTR _adaptor$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _adaptor$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+140]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 814
	mov	eax, DWORD PTR _t$[ebp]
; Line 815
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_dbgCreateTypeTokenText ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _createTypeText
_TEXT	SEGMENT
_fromToken$ = -8					; size = 4
_adaptor$ = 8						; size = 4
_tokenType$ = 12					; size = 4
_text$ = 16						; size = 4
_createTypeText PROC					; COMDAT
; Line 819
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 824
	mov	esi, esp
	mov	eax, DWORD PTR _text$[ebp]
	push	eax
	mov	ecx, DWORD PTR _tokenType$[ebp]
	push	ecx
	mov	edx, DWORD PTR _adaptor$[ebp]
	push	edx
	mov	eax, DWORD PTR _adaptor$[ebp]
	mov	ecx, DWORD PTR [eax+132]
	call	ecx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _fromToken$[ebp], eax
; Line 828
	mov	esi, esp
	mov	eax, DWORD PTR _fromToken$[ebp]
	push	eax
	mov	ecx, DWORD PTR _adaptor$[ebp]
	push	ecx
	mov	edx, DWORD PTR _adaptor$[ebp]
	mov	eax, DWORD PTR [edx+64]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 829
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_createTypeText ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _dbgCreateTypeText
_TEXT	SEGMENT
_t$ = -8						; size = 4
_adaptor$ = 8						; size = 4
_tokenType$ = 12					; size = 4
_text$ = 16						; size = 4
_dbgCreateTypeText PROC					; COMDAT
; Line 832
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 835
	mov	eax, DWORD PTR _text$[ebp]
	push	eax
	mov	ecx, DWORD PTR _tokenType$[ebp]
	push	ecx
	mov	edx, DWORD PTR _adaptor$[ebp]
	push	edx
	call	_createTypeText
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _t$[ebp], eax
; Line 837
	mov	esi, esp
	mov	eax, DWORD PTR _t$[ebp]
	push	eax
	mov	ecx, DWORD PTR _adaptor$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _adaptor$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+140]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 839
	mov	eax, DWORD PTR _t$[ebp]
; Line 841
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_dbgCreateTypeText ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _getType
_TEXT	SEGMENT
_adaptor$ = 8						; size = 4
_t$ = 12						; size = 4
_getType PROC						; COMDAT
; Line 846
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 847
	xor	eax, eax
; Line 848
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_getType ENDP
_TEXT	ENDS
PUBLIC	??_C@_0GH@GODAJKHB@Internal?5error?5?9?5implementor?5of?5@ ; `string'
;	COMDAT ??_C@_0GH@GODAJKHB@Internal?5error?5?9?5implementor?5of?5@
CONST	SEGMENT
??_C@_0GH@GODAJKHB@Internal?5error?5?9?5implementor?5of?5@ DB 'Internal e'
	DB	'rror - implementor of superclass containing ANTLR3_TREE_ADAPT'
	DB	'OR did not implement setType()', 0aH, 00H	; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT _setType
_TEXT	SEGMENT
_adaptor$ = 8						; size = 4
_t$ = 12						; size = 4
_type$ = 16						; size = 4
_setType PROC						; COMDAT
; Line 854
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 855
	mov	esi, esp
	push	OFFSET ??_C@_0GH@GODAJKHB@Internal?5error?5?9?5implementor?5of?5@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 856
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_setType ENDP
_TEXT	ENDS
PUBLIC	??_C@_0GH@GBLCOHNN@Internal?5error?5?9?5implementor?5of?5@ ; `string'
;	COMDAT ??_C@_0GH@GBLCOHNN@Internal?5error?5?9?5implementor?5of?5@
CONST	SEGMENT
??_C@_0GH@GBLCOHNN@Internal?5error?5?9?5implementor?5of?5@ DB 'Internal e'
	DB	'rror - implementor of superclass containing ANTLR3_TREE_ADAPT'
	DB	'OR did not implement getText()', 0aH, 00H	; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT _getText
_TEXT	SEGMENT
_adaptor$ = 8						; size = 4
_t$ = 12						; size = 4
_getText PROC						; COMDAT
; Line 862
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 863
	mov	esi, esp
	push	OFFSET ??_C@_0GH@GBLCOHNN@Internal?5error?5?9?5implementor?5of?5@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 864
	xor	eax, eax
; Line 865
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_getText ENDP
_TEXT	ENDS
PUBLIC	??_C@_0GH@HPJNFAJE@Internal?5error?5?9?5implementor?5of?5@ ; `string'
;	COMDAT ??_C@_0GH@HPJNFAJE@Internal?5error?5?9?5implementor?5of?5@
CONST	SEGMENT
??_C@_0GH@HPJNFAJE@Internal?5error?5?9?5implementor?5of?5@ DB 'Internal e'
	DB	'rror - implementor of superclass containing ANTLR3_TREE_ADAPT'
	DB	'OR did not implement setText()', 0aH, 00H	; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT _setText
_TEXT	SEGMENT
_adaptor$ = 8						; size = 4
_t$ = 12						; size = 4
_setText PROC						; COMDAT
; Line 871
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 872
	mov	esi, esp
	push	OFFSET ??_C@_0GH@HPJNFAJE@Internal?5error?5?9?5implementor?5of?5@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 873
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_setText ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _setText8
_TEXT	SEGMENT
_adaptor$ = 8						; size = 4
_t$ = 12						; size = 4
_setText8 PROC						; COMDAT
; Line 878
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 879
	mov	esi, esp
	push	OFFSET ??_C@_0GH@HPJNFAJE@Internal?5error?5?9?5implementor?5of?5@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 880
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_setText8 ENDP
_TEXT	ENDS
PUBLIC	??_C@_0GI@GANAPDHF@Internal?5error?5?9?5implementor?5of?5@ ; `string'
;	COMDAT ??_C@_0GI@GANAPDHF@Internal?5error?5?9?5implementor?5of?5@
CONST	SEGMENT
??_C@_0GI@GANAPDHF@Internal?5error?5?9?5implementor?5of?5@ DB 'Internal e'
	DB	'rror - implementor of superclass containing ANTLR3_TREE_ADAPT'
	DB	'OR did not implement getChild()', 0aH, 00H	; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT _getChild
_TEXT	SEGMENT
_adaptor$ = 8						; size = 4
_tree$ = 12						; size = 4
_i$ = 16						; size = 4
_getChild PROC						; COMDAT
; Line 884
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 885
	mov	esi, esp
	push	OFFSET ??_C@_0GI@GANAPDHF@Internal?5error?5?9?5implementor?5of?5@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 886
	xor	eax, eax
; Line 887
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_getChild ENDP
_TEXT	ENDS
PUBLIC	??_C@_0GN@PACIMGKB@Internal?5error?5?9?5implementor?5of?5@ ; `string'
;	COMDAT ??_C@_0GN@PACIMGKB@Internal?5error?5?9?5implementor?5of?5@
CONST	SEGMENT
??_C@_0GN@PACIMGKB@Internal?5error?5?9?5implementor?5of?5@ DB 'Internal e'
	DB	'rror - implementor of superclass containing ANTLR3_TREE_ADAPT'
	DB	'OR did not implement getChildCount()', 0aH, 00H ; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT _getChildCount
_TEXT	SEGMENT
_adaptor$ = 8						; size = 4
_tree$ = 12						; size = 4
_getChildCount PROC					; COMDAT
; Line 891
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 892
	mov	esi, esp
	push	OFFSET ??_C@_0GN@PACIMGKB@Internal?5error?5?9?5implementor?5of?5@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 893
	xor	eax, eax
; Line 894
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_getChildCount ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _getUniqueID
_TEXT	SEGMENT
_adaptor$ = 8						; size = 4
_node$ = 12						; size = 4
_getUniqueID PROC					; COMDAT
; Line 901
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 902
	mov	eax, DWORD PTR _node$[ebp]
; Line 903
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_getUniqueID ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _isNilNode
_TEXT	SEGMENT
_adaptor$ = 8						; size = 4
_t$ = 12						; size = 4
_isNilNode PROC						; COMDAT
; Line 907
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 908
	mov	esi, esp
	mov	eax, DWORD PTR _t$[ebp]
	push	eax
	mov	ecx, DWORD PTR _t$[ebp]
	mov	edx, DWORD PTR [ecx+96]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 909
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_isNilNode ENDP
_TEXT	ENDS
END
