; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\Users\Ken\Documents\GitHub\spengine\Antlr\antlr3treeparser.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_antlr3MTNExceptionNew
PUBLIC	_antlr3TreeParserNewStream
EXTRN	_antlr3BaseRecognizerNew:PROC
EXTRN	__imp__malloc:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\users\ken\documents\github\spengine\antlr\antlr3treeparser.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT _antlr3TreeParserNewStream
_TEXT	SEGMENT
_parser$ = -8						; size = 4
_sizeHint$ = 8						; size = 4
_ctnstream$ = 12					; size = 4
_state$ = 16						; size = 4
_antlr3TreeParserNewStream PROC				; COMDAT
; Line 53
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 58
	mov	esi, esp
	push	24					; 00000018H
	call	DWORD PTR __imp__malloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _parser$[ebp], eax
; Line 60
	cmp	DWORD PTR _parser$[ebp], 0
	jne	SHORT $LN2@antlr3Tree
; Line 62
	xor	eax, eax
	jmp	$LN3@antlr3Tree
$LN2@antlr3Tree:
; Line 67
	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	mov	ecx, DWORD PTR _sizeHint$[ebp]
	push	ecx
	push	2
	call	_antlr3BaseRecognizerNew
	add	esp, 12					; 0000000cH
	mov	edx, DWORD PTR _parser$[ebp]
	mov	DWORD PTR [edx+4], eax
; Line 69
	mov	eax, DWORD PTR _parser$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN1@antlr3Tree
; Line 71
	mov	esi, esp
	mov	eax, DWORD PTR _parser$[ebp]
	push	eax
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 72
	xor	eax, eax
	jmp	$LN3@antlr3Tree
$LN1@antlr3Tree:
; Line 78
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _parser$[ebp]
	mov	DWORD PTR [ecx], edx
; Line 79
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], 4
; Line 83
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+32], OFFSET _mismatch
; Line 84
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+136], OFFSET _antlr3MTNExceptionNew
; Line 85
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+124], OFFSET _getCurrentInputSymbol
; Line 86
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+128], OFFSET _getMissingSymbol
; Line 90
	mov	eax, DWORD PTR _parser$[ebp]
	mov	DWORD PTR [eax+16], OFFSET _getTreeNodeStream
; Line 91
	mov	eax, DWORD PTR _parser$[ebp]
	mov	DWORD PTR [eax+12], OFFSET _setTreeNodeStream
; Line 92
	mov	eax, DWORD PTR _parser$[ebp]
	mov	DWORD PTR [eax+20], OFFSET _freeParser
; Line 96
	mov	esi, esp
	mov	eax, DWORD PTR _ctnstream$[ebp]
	push	eax
	mov	ecx, DWORD PTR _parser$[ebp]
	push	ecx
	mov	edx, DWORD PTR _parser$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 98
	mov	eax, DWORD PTR _parser$[ebp]
$LN3@antlr3Tree:
; Line 99
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_antlr3TreeParserNewStream ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CO@BHFJHLHM@org?4antlr?4runtime?4MismatchedTree@ ; `string'
EXTRN	_antlr3RecognitionExceptionNew:PROC
;	COMDAT ??_C@_0CO@BHFJHLHM@org?4antlr?4runtime?4MismatchedTree@
CONST	SEGMENT
??_C@_0CO@BHFJHLHM@org?4antlr?4runtime?4MismatchedTree@ DB 'org.antlr.run'
	DB	'time.MismatchedTreeNodeException', 00H	; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT _antlr3MTNExceptionNew
_TEXT	SEGMENT
_recognizer$ = 8					; size = 4
_antlr3MTNExceptionNew PROC				; COMDAT
; Line 112
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 115
	mov	eax, DWORD PTR _recognizer$[ebp]
	push	eax
	call	_antlr3RecognitionExceptionNew
	add	esp, 4
; Line 119
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], OFFSET ??_C@_0CO@BHFJHLHM@org?4antlr?4runtime?4MismatchedTree@
; Line 120
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx], 7
; Line 123
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_antlr3MTNExceptionNew ENDP
_TEXT	ENDS
EXTRN	__imp__free:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _freeParser
_TEXT	SEGMENT
_parser$ = 8						; size = 4
_freeParser PROC					; COMDAT
; Line 128
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 129
	mov	eax, DWORD PTR _parser$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	$LN3@freeParser
; Line 135
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cmp	DWORD PTR [ecx+8], 0
	je	SHORT $LN2@freeParser
; Line 137
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+8]
	cmp	DWORD PTR [edx+12], 0
	je	SHORT $LN2@freeParser
; Line 139
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+8]
	mov	esi, esp
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _parser$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+8]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 140
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+12], 0
$LN2@freeParser:
; Line 143
	mov	esi, esp
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _parser$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [eax+144]
	call	ecx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 144
	mov	eax, DWORD PTR _parser$[ebp]
	mov	DWORD PTR [eax+4], 0
$LN3@freeParser:
; Line 147
	mov	esi, esp
	mov	eax, DWORD PTR _parser$[ebp]
	push	eax
	call	DWORD PTR __imp__free
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 148
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_freeParser ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _setTreeNodeStream
_TEXT	SEGMENT
_parser$ = 8						; size = 4
_input$ = 12						; size = 4
_setTreeNodeStream PROC					; COMDAT
; Line 154
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 155
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR _input$[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 156
	mov	esi, esp
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _parser$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [eax+140]
	call	ecx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 157
	mov	esi, esp
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _parser$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [eax+752]
	call	ecx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 158
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_setTreeNodeStream ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _getTreeNodeStream
_TEXT	SEGMENT
_parser$ = 8						; size = 4
_getTreeNodeStream PROC					; COMDAT
; Line 164
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 165
	mov	eax, DWORD PTR _parser$[ebp]
	mov	eax, DWORD PTR [eax+8]
; Line 166
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_getTreeNodeStream ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _mismatch
_TEXT	SEGMENT
_recognizer$ = 8					; size = 4
_ttype$ = 12						; size = 4
_follow$ = 16						; size = 4
_mismatch PROC						; COMDAT
; Line 175
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 176
	mov	esi, esp
	mov	eax, DWORD PTR _recognizer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _recognizer$[ebp]
	mov	edx, DWORD PTR [ecx+136]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 177
	mov	esi, esp
	mov	eax, DWORD PTR _follow$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ttype$[ebp]
	push	ecx
	mov	edx, DWORD PTR _recognizer$[ebp]
	push	edx
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	ecx, DWORD PTR [eax+80]
	call	ecx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 178
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_mismatch ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _getCurrentInputSymbol
_TEXT	SEGMENT
_ctns$ = -20						; size = 4
_tns$ = -8						; size = 4
_recognizer$ = 8					; size = 4
_istream$ = 12						; size = 4
_getCurrentInputSymbol PROC				; COMDAT
; Line 190
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 194
	mov	eax, DWORD PTR _istream$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _tns$[ebp], ecx
; Line 195
	mov	eax, DWORD PTR _tns$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _ctns$[ebp], ecx
; Line 196
	mov	esi, esp
	push	1
	mov	eax, DWORD PTR _tns$[ebp]
	push	eax
	mov	ecx, DWORD PTR _tns$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 197
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_getCurrentInputSymbol ENDP
_TEXT	ENDS
PUBLIC	??_C@_01PPODPGHN@?$DO?$AA@			; `string'
PUBLIC	??_C@_09MLMDPBIO@?$DMmissing?5?$AA@		; `string'
;	COMDAT ??_C@_01PPODPGHN@?$DO?$AA@
CONST	SEGMENT
??_C@_01PPODPGHN@?$DO?$AA@ DB '>', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_09MLMDPBIO@?$DMmissing?5?$AA@
CONST	SEGMENT
??_C@_09MLMDPBIO@?$DMmissing?5?$AA@ DB '<missing ', 00H	; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT _getMissingSymbol
_TEXT	SEGMENT
tv81 = -280						; size = 4
_i$ = -80						; size = 4
_text$ = -68						; size = 4
_token$ = -56						; size = 4
_current$ = -44						; size = 4
_node$ = -32						; size = 4
_ctns$ = -20						; size = 4
_tns$ = -8						; size = 4
_recognizer$ = 8					; size = 4
_istream$ = 12						; size = 4
_e$ = 16						; size = 4
_expectedTokenType$ = 20				; size = 4
_follow$ = 24						; size = 4
_getMissingSymbol PROC					; COMDAT
; Line 206
	push	ebp
	mov	ebp, esp
	sub	esp, 280				; 00000118H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-280]
	mov	ecx, 70					; 00000046H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 217
	mov	eax, DWORD PTR _istream$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _tns$[ebp], ecx
; Line 218
	mov	eax, DWORD PTR _tns$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _ctns$[ebp], ecx
; Line 222
	mov	esi, esp
	push	1
	mov	eax, DWORD PTR _tns$[ebp]
	push	eax
	mov	ecx, DWORD PTR _tns$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _current$[ebp], eax
; Line 223
	mov	DWORD PTR _i$[ebp], -1
; Line 225
	mov	eax, DWORD PTR _ctns$[ebp]
	add	eax, 352				; 00000160H
	cmp	DWORD PTR _current$[ebp], eax
	jne	SHORT $LN2@getMissing
; Line 227
	mov	esi, esp
	push	-1
	mov	eax, DWORD PTR _tns$[ebp]
	push	eax
	mov	ecx, DWORD PTR _tns$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _current$[ebp], eax
; Line 228
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN2@getMissing:
; Line 230
	mov	eax, DWORD PTR _current$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx+24], 0
	jne	SHORT $LN1@getMissing
; Line 232
	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR tv81[ebp], eax
	mov	ecx, DWORD PTR _i$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
	mov	esi, esp
	mov	edx, DWORD PTR tv81[ebp]
	push	edx
	mov	eax, DWORD PTR _tns$[ebp]
	push	eax
	mov	ecx, DWORD PTR _tns$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _current$[ebp], eax
; Line 233
	jmp	SHORT $LN2@getMissing
$LN1@getMissing:
; Line 235
	mov	esi, esp
	mov	eax, DWORD PTR _current$[ebp]
	push	eax
	mov	ecx, DWORD PTR _current$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _node$[ebp], eax
; Line 239
	mov	esi, esp
	mov	eax, DWORD PTR _node$[ebp]
	push	eax
	mov	ecx, DWORD PTR _node$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _token$[ebp], eax
; Line 243
	mov	esi, esp
	push	OFFSET ??_C@_09MLMDPBIO@?$DMmissing?5?$AA@
	mov	eax, DWORD PTR _token$[ebp]
	push	eax
	mov	ecx, DWORD PTR _token$[ebp]
	mov	edx, DWORD PTR [ecx+80]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 244
	mov	esi, esp
	mov	eax, DWORD PTR _token$[ebp]
	push	eax
	mov	ecx, DWORD PTR _token$[ebp]
	mov	edx, DWORD PTR [ecx+72]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _text$[ebp], eax
; Line 245
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+40]
	mov	esi, esp
	mov	eax, DWORD PTR _expectedTokenType$[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	push	ecx
	mov	edx, DWORD PTR _text$[ebp]
	push	edx
	mov	eax, DWORD PTR _text$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 246
	mov	esi, esp
	push	OFFSET ??_C@_01PPODPGHN@?$DO?$AA@
	mov	eax, DWORD PTR _text$[ebp]
	push	eax
	mov	ecx, DWORD PTR _text$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 250
	mov	eax, DWORD PTR _node$[ebp]
; Line 251
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 280				; 00000118H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_getMissingSymbol ENDP
_TEXT	ENDS
END
