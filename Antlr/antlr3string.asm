; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\Users\Ken\Documents\GitHub\spengine\Antlr\antlr3string.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_antlr3StringFactoryNew
EXTRN	__imp__free:PROC
EXTRN	_antlr3VectorNew:PROC
EXTRN	__imp__calloc:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\users\ken\documents\github\spengine\antlr\antlr3string.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT _antlr3StringFactoryNew
_TEXT	SEGMENT
tv73 = -208						; size = 4
_factory$ = -8						; size = 4
_encoding$ = 8						; size = 4
_antlr3StringFactoryNew PROC				; COMDAT
; Line 99
	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 104
	mov	esi, esp
	push	44					; 0000002cH
	push	1
	call	DWORD PTR __imp__calloc
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _factory$[ebp], eax
; Line 106
	cmp	DWORD PTR _factory$[ebp], 0
	jne	SHORT $LN9@antlr3Stri
; Line 108
	xor	eax, eax
	jmp	$LN10@antlr3Stri
$LN9@antlr3Stri:
; Line 113
	push	0
	call	_antlr3VectorNew
	add	esp, 4
	mov	ecx, DWORD PTR _factory$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 114
	mov	eax, DWORD PTR _factory$[ebp]
	mov	DWORD PTR [eax+4], 0
; Line 116
	mov	eax, DWORD PTR _factory$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN8@antlr3Stri
; Line 118
	mov	esi, esp
	mov	eax, DWORD PTR _factory$[ebp]
	push	eax
	call	DWORD PTR __imp__free
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 119
	xor	eax, eax
	jmp	$LN10@antlr3Stri
$LN8@antlr3Stri:
; Line 134
	mov	eax, DWORD PTR _encoding$[ebp]
	mov	DWORD PTR tv73[ebp], eax
	mov	ecx, DWORD PTR tv73[ebp]
	sub	ecx, 16					; 00000010H
	mov	DWORD PTR tv73[ebp], ecx
	cmp	DWORD PTR tv73[ebp], 18			; 00000012H
	ja	SHORT $LN1@antlr3Stri
	mov	edx, DWORD PTR tv73[ebp]
	movzx	eax, BYTE PTR $LN12@antlr3Stri[edx]
	jmp	DWORD PTR $LN13@antlr3Stri[eax*4]
$LN5@antlr3Stri:
; Line 137
	jmp	$LN6@antlr3Stri
$LN4@antlr3Stri:
; Line 140
	jmp	$LN6@antlr3Stri
$LN3@antlr3Stri:
; Line 143
	jmp	$LN6@antlr3Stri
$LN2@antlr3Stri:
; Line 149
	mov	eax, DWORD PTR _factory$[ebp]
	mov	DWORD PTR [eax+8], OFFSET _newRawUTF16
; Line 150
	mov	eax, DWORD PTR _factory$[ebp]
	mov	DWORD PTR [eax+12], OFFSET _newSizeUTF16
; Line 151
	mov	eax, DWORD PTR _factory$[ebp]
	mov	DWORD PTR [eax+16], OFFSET _newPtrUTF16_UTF16
; Line 152
	mov	eax, DWORD PTR _factory$[ebp]
	mov	DWORD PTR [eax+20], OFFSET _newPtrUTF16_8
; Line 153
	mov	eax, DWORD PTR _factory$[ebp]
	mov	DWORD PTR [eax+24], OFFSET _newStrUTF16_UTF16
; Line 154
	mov	eax, DWORD PTR _factory$[ebp]
	mov	DWORD PTR [eax+28], OFFSET _newStrUTF16_8
; Line 155
	mov	eax, DWORD PTR _factory$[ebp]
	mov	DWORD PTR [eax+36], OFFSET _printableUTF16
; Line 156
	mov	eax, DWORD PTR _factory$[ebp]
	mov	DWORD PTR [eax+32], OFFSET _destroy
; Line 157
	mov	eax, DWORD PTR _factory$[ebp]
	mov	DWORD PTR [eax+40], OFFSET _closeFactory
; Line 158
	jmp	SHORT $LN6@antlr3Stri
$LN1@antlr3Stri:
; Line 165
	mov	eax, DWORD PTR _factory$[ebp]
	mov	DWORD PTR [eax+8], OFFSET _newRaw8
; Line 166
	mov	eax, DWORD PTR _factory$[ebp]
	mov	DWORD PTR [eax+12], OFFSET _newSize8
; Line 167
	mov	eax, DWORD PTR _factory$[ebp]
	mov	DWORD PTR [eax+16], OFFSET _newPtr8
; Line 168
	mov	eax, DWORD PTR _factory$[ebp]
	mov	DWORD PTR [eax+20], OFFSET _newPtr8
; Line 169
	mov	eax, DWORD PTR _factory$[ebp]
	mov	DWORD PTR [eax+24], OFFSET _newStr8
; Line 170
	mov	eax, DWORD PTR _factory$[ebp]
	mov	DWORD PTR [eax+28], OFFSET _newStr8
; Line 171
	mov	eax, DWORD PTR _factory$[ebp]
	mov	DWORD PTR [eax+36], OFFSET _printable8
; Line 172
	mov	eax, DWORD PTR _factory$[ebp]
	mov	DWORD PTR [eax+32], OFFSET _destroy
; Line 173
	mov	eax, DWORD PTR _factory$[ebp]
	mov	DWORD PTR [eax+40], OFFSET _closeFactory
$LN6@antlr3Stri:
; Line 176
	mov	eax, DWORD PTR _factory$[ebp]
$LN10@antlr3Stri:
; Line 177
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN13@antlr3Stri:
	DD	$LN2@antlr3Stri
	DD	$LN5@antlr3Stri
	DD	$LN4@antlr3Stri
	DD	$LN3@antlr3Stri
	DD	$LN1@antlr3Stri
$LN12@antlr3Stri:
	DB	0
	DB	0
	DB	0
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	1
	DB	2
	DB	3
_antlr3StringFactoryNew ENDP
_TEXT	ENDS
EXTRN	__imp__malloc:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _newRaw8
_TEXT	SEGMENT
_string$ = -8						; size = 4
_factory$ = 8						; size = 4
_newRaw8 PROC						; COMDAT
; Line 187
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 190
	mov	esi, esp
	push	104					; 00000068H
	call	DWORD PTR __imp__malloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _string$[ebp], eax
; Line 192
	cmp	DWORD PTR _string$[ebp], 0
	jne	SHORT $LN1@newRaw8
; Line 194
	xor	eax, eax
	jmp	SHORT $LN2@newRaw8
$LN1@newRaw8:
; Line 199
	mov	eax, DWORD PTR _string$[ebp]
	push	eax
	call	_stringInit8
	add	esp, 4
; Line 200
	mov	eax, DWORD PTR _string$[ebp]
	mov	ecx, DWORD PTR _factory$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 204
	mov	esi, esp
	push	1
	push	OFFSET _stringFree
	mov	eax, DWORD PTR _string$[ebp]
	push	eax
	mov	ecx, DWORD PTR _factory$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _factory$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _factory$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+172]
	call	ecx
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 205
	mov	eax, DWORD PTR _string$[ebp]
	mov	ecx, DWORD PTR _factory$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+16], edx
	mov	eax, DWORD PTR _factory$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _factory$[ebp]
	mov	DWORD PTR [edx+4], ecx
; Line 207
	mov	eax, DWORD PTR _string$[ebp]
$LN2@newRaw8:
; Line 208
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_newRaw8 ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _newRawUTF16
_TEXT	SEGMENT
_string$ = -8						; size = 4
_factory$ = 8						; size = 4
_newRawUTF16 PROC					; COMDAT
; Line 216
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 219
	mov	esi, esp
	push	104					; 00000068H
	call	DWORD PTR __imp__malloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _string$[ebp], eax
; Line 221
	cmp	DWORD PTR _string$[ebp], 0
	jne	SHORT $LN1@newRawUTF1
; Line 223
	xor	eax, eax
	jmp	SHORT $LN2@newRawUTF1
$LN1@newRawUTF1:
; Line 228
	mov	eax, DWORD PTR _string$[ebp]
	push	eax
	call	_stringInitUTF16
	add	esp, 4
; Line 229
	mov	eax, DWORD PTR _string$[ebp]
	mov	ecx, DWORD PTR _factory$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 233
	mov	esi, esp
	push	1
	push	OFFSET _stringFree
	mov	eax, DWORD PTR _string$[ebp]
	push	eax
	mov	ecx, DWORD PTR _factory$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _factory$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _factory$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+172]
	call	ecx
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 234
	mov	eax, DWORD PTR _string$[ebp]
	mov	ecx, DWORD PTR _factory$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+16], edx
	mov	eax, DWORD PTR _factory$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _factory$[ebp]
	mov	DWORD PTR [edx+4], ecx
; Line 236
	mov	eax, DWORD PTR _string$[ebp]
$LN2@newRawUTF1:
; Line 237
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_newRawUTF16 ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _stringFree
_TEXT	SEGMENT
_string$ = 8						; size = 4
_stringFree PROC					; COMDAT
; Line 240
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 243
	mov	eax, DWORD PTR _string$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN1@stringFree
; Line 245
	mov	esi, esp
	mov	eax, DWORD PTR _string$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	DWORD PTR __imp__free
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@stringFree:
; Line 250
	mov	esi, esp
	mov	eax, DWORD PTR _string$[ebp]
	push	eax
	call	DWORD PTR __imp__free
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 253
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_stringFree ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _stringInit8
_TEXT	SEGMENT
_string$ = 8						; size = 4
_stringInit8 PROC					; COMDAT
; Line 261
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 262
	mov	eax, DWORD PTR _string$[ebp]
	mov	DWORD PTR [eax+8], 0
; Line 263
	mov	eax, DWORD PTR _string$[ebp]
	mov	DWORD PTR [eax+12], 0
; Line 264
	mov	eax, DWORD PTR _string$[ebp]
	mov	DWORD PTR [eax+4], 0
; Line 265
	mov	eax, DWORD PTR _string$[ebp]
	mov	BYTE PTR [eax+20], 4
; Line 269
	mov	eax, DWORD PTR _string$[ebp]
	mov	DWORD PTR [eax+24], OFFSET _set8
; Line 270
	mov	eax, DWORD PTR _string$[ebp]
	mov	DWORD PTR [eax+28], OFFSET _set8
; Line 271
	mov	eax, DWORD PTR _string$[ebp]
	mov	DWORD PTR [eax+32], OFFSET _append8
; Line 272
	mov	eax, DWORD PTR _string$[ebp]
	mov	DWORD PTR [eax+36], OFFSET _append8
; Line 273
	mov	eax, DWORD PTR _string$[ebp]
	mov	DWORD PTR [eax+40], OFFSET _insert8
; Line 274
	mov	eax, DWORD PTR _string$[ebp]
	mov	DWORD PTR [eax+44], OFFSET _insert8
; Line 275
	mov	eax, DWORD PTR _string$[ebp]
	mov	DWORD PTR [eax+68], OFFSET _addi8
; Line 276
	mov	eax, DWORD PTR _string$[ebp]
	mov	DWORD PTR [eax+60], OFFSET _inserti8
; Line 277
	mov	eax, DWORD PTR _string$[ebp]
	mov	DWORD PTR [eax+64], OFFSET _addc8
; Line 278
	mov	eax, DWORD PTR _string$[ebp]
	mov	DWORD PTR [eax+84], OFFSET _charAt8
; Line 279
	mov	eax, DWORD PTR _string$[ebp]
	mov	DWORD PTR [eax+76], OFFSET _compare8
; Line 280
	mov	eax, DWORD PTR _string$[ebp]
	mov	DWORD PTR [eax+72], OFFSET _compare8
; Line 281
	mov	eax, DWORD PTR _string$[ebp]
	mov	DWORD PTR [eax+88], OFFSET _subString8
; Line 282
	mov	eax, DWORD PTR _string$[ebp]
	mov	DWORD PTR [eax+92], OFFSET _toInt32_8
; Line 283
	mov	eax, DWORD PTR _string$[ebp]
	mov	DWORD PTR [eax+96], OFFSET _to8_8
; Line 284
	mov	eax, DWORD PTR _string$[ebp]
	mov	DWORD PTR [eax+100], OFFSET _toUTF8_8
; Line 285
	mov	eax, DWORD PTR _string$[ebp]
	mov	DWORD PTR [eax+80], OFFSET _compareS
; Line 286
	mov	eax, DWORD PTR _string$[ebp]
	mov	DWORD PTR [eax+48], OFFSET _setS
; Line 287
	mov	eax, DWORD PTR _string$[ebp]
	mov	DWORD PTR [eax+52], OFFSET _appendS
; Line 288
	mov	eax, DWORD PTR _string$[ebp]
	mov	DWORD PTR [eax+56], OFFSET _insertS
; Line 290
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_stringInit8 ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _stringInitUTF16
_TEXT	SEGMENT
_string$ = 8						; size = 4
_stringInitUTF16 PROC					; COMDAT
; Line 298
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 299
	mov	eax, DWORD PTR _string$[ebp]
	mov	DWORD PTR [eax+8], 0
; Line 300
	mov	eax, DWORD PTR _string$[ebp]
	mov	DWORD PTR [eax+12], 0
; Line 301
	mov	eax, DWORD PTR _string$[ebp]
	mov	DWORD PTR [eax+4], 0
; Line 302
	mov	eax, DWORD PTR _string$[ebp]
	mov	BYTE PTR [eax+20], 4
; Line 306
	mov	eax, DWORD PTR _string$[ebp]
	mov	DWORD PTR [eax+24], OFFSET _setUTF16_UTF16
; Line 307
	mov	eax, DWORD PTR _string$[ebp]
	mov	DWORD PTR [eax+28], OFFSET _setUTF16_8
; Line 308
	mov	eax, DWORD PTR _string$[ebp]
	mov	DWORD PTR [eax+32], OFFSET _appendUTF16_UTF16
; Line 309
	mov	eax, DWORD PTR _string$[ebp]
	mov	DWORD PTR [eax+36], OFFSET _appendUTF16_8
; Line 310
	mov	eax, DWORD PTR _string$[ebp]
	mov	DWORD PTR [eax+40], OFFSET _insertUTF16_UTF16
; Line 311
	mov	eax, DWORD PTR _string$[ebp]
	mov	DWORD PTR [eax+44], OFFSET _insertUTF16_8
; Line 312
	mov	eax, DWORD PTR _string$[ebp]
	mov	DWORD PTR [eax+68], OFFSET _addiUTF16
; Line 313
	mov	eax, DWORD PTR _string$[ebp]
	mov	DWORD PTR [eax+60], OFFSET _insertiUTF16
; Line 314
	mov	eax, DWORD PTR _string$[ebp]
	mov	DWORD PTR [eax+64], OFFSET _addcUTF16
; Line 315
	mov	eax, DWORD PTR _string$[ebp]
	mov	DWORD PTR [eax+84], OFFSET _charAtUTF16
; Line 316
	mov	eax, DWORD PTR _string$[ebp]
	mov	DWORD PTR [eax+76], OFFSET _compareUTF16_UTF16
; Line 317
	mov	eax, DWORD PTR _string$[ebp]
	mov	DWORD PTR [eax+72], OFFSET _compareUTF16_8
; Line 318
	mov	eax, DWORD PTR _string$[ebp]
	mov	DWORD PTR [eax+88], OFFSET _subStringUTF16
; Line 319
	mov	eax, DWORD PTR _string$[ebp]
	mov	DWORD PTR [eax+92], OFFSET _toInt32_UTF16
; Line 320
	mov	eax, DWORD PTR _string$[ebp]
	mov	DWORD PTR [eax+96], OFFSET _to8_UTF16
; Line 321
	mov	eax, DWORD PTR _string$[ebp]
	mov	DWORD PTR [eax+100], OFFSET _toUTF8_UTF16
; Line 323
	mov	eax, DWORD PTR _string$[ebp]
	mov	DWORD PTR [eax+80], OFFSET _compareS
; Line 324
	mov	eax, DWORD PTR _string$[ebp]
	mov	DWORD PTR [eax+48], OFFSET _setS
; Line 325
	mov	eax, DWORD PTR _string$[ebp]
	mov	DWORD PTR [eax+52], OFFSET _appendS
; Line 326
	mov	eax, DWORD PTR _string$[ebp]
	mov	DWORD PTR [eax+56], OFFSET _insertS
; Line 327
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_stringInitUTF16 ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _toUTF8_8
_TEXT	SEGMENT
_string$ = 8						; size = 4
_toUTF8_8 PROC						; COMDAT
; Line 350
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 351
	mov	esi, esp
	mov	eax, DWORD PTR _string$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _string$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _string$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _string$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+16]
	call	edx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 352
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_toUTF8_8 ENDP
_TEXT	ENDS
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
EXTRN	_ConvertUTF16toUTF8:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT _toUTF8_UTF16
_TEXT	SEGMENT
_cResult$ = -44						; size = 4
_utf8String$ = -32					; size = 4
_inputEnd$ = -20					; size = 4
_outputEnd$ = -8					; size = 4
_string$ = 8						; size = 4
_toUTF8_UTF16 PROC					; COMDAT
; Line 361
	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 372
	mov	esi, esp
	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	mov	eax, DWORD PTR _string$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _string$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+28]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _utf8String$[ebp], eax
; Line 374
	cmp	DWORD PTR _utf8String$[ebp], 0
	je	$LN2@toUTF8_UTF
; Line 378
	mov	esi, esp
	mov	eax, DWORD PTR _utf8String$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	DWORD PTR __imp__free
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 382
	mov	eax, DWORD PTR _string$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	imul	ecx, 3
	mov	edx, DWORD PTR _utf8String$[ebp]
	mov	DWORD PTR [edx+12], ecx
; Line 383
	mov	eax, DWORD PTR _utf8String$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	add	ecx, 1
	mov	esi, esp
	push	ecx
	call	DWORD PTR __imp__malloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	edx, DWORD PTR _utf8String$[ebp]
	mov	DWORD PTR [edx+4], eax
; Line 385
	mov	eax, DWORD PTR _utf8String$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN2@toUTF8_UTF
; Line 387
	mov	eax, DWORD PTR _string$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _inputEnd$[ebp], ecx
; Line 388
	mov	eax, DWORD PTR _utf8String$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _outputEnd$[ebp], ecx
; Line 399
	push	1
	mov	eax, DWORD PTR _utf8String$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _outputEnd$[ebp]
	lea	eax, DWORD PTR [edx+ecx-1]
	push	eax
	lea	ecx, DWORD PTR _outputEnd$[ebp]
	push	ecx
	mov	edx, DWORD PTR _string$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR _string$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	lea	eax, DWORD PTR [edx+eax*2]
	push	eax
	lea	ecx, DWORD PTR _inputEnd$[ebp]
	push	ecx
	call	_ConvertUTF16toUTF8
	add	esp, 20					; 00000014H
	mov	DWORD PTR _cResult$[ebp], eax
; Line 405
	mov	eax, DWORD PTR _utf8String$[ebp]
	mov	ecx, DWORD PTR _outputEnd$[ebp]
	sub	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _utf8String$[ebp]
	mov	DWORD PTR [edx+8], ecx
; Line 407
	mov	eax, DWORD PTR _outputEnd$[ebp]
	mov	BYTE PTR [eax+1], 0
$LN2@toUTF8_UTF:
; Line 410
	mov	eax, DWORD PTR _utf8String$[ebp]
; Line 411
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@toUTF8_UTF
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN8@toUTF8_UTF:
	DD	2
	DD	$LN7@toUTF8_UTF
$LN7@toUTF8_UTF:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN5@toUTF8_UTF
	DD	-20					; ffffffecH
	DD	4
	DD	$LN6@toUTF8_UTF
$LN6@toUTF8_UTF:
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	112					; 00000070H
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	69					; 00000045H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	0
$LN5@toUTF8_UTF:
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	112					; 00000070H
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	69					; 00000045H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	0
_toUTF8_UTF16 ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _newSize8
_TEXT	SEGMENT
_string$ = -8						; size = 4
_factory$ = 8						; size = 4
_size$ = 12						; size = 4
_newSize8 PROC						; COMDAT
; Line 422
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 425
	mov	esi, esp
	mov	eax, DWORD PTR _factory$[ebp]
	push	eax
	mov	ecx, DWORD PTR _factory$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _string$[ebp], eax
; Line 427
	cmp	DWORD PTR _string$[ebp], 0
	jne	SHORT $LN1@newSize8
; Line 429
	mov	eax, DWORD PTR _string$[ebp]
	jmp	SHORT $LN2@newSize8
$LN1@newSize8:
; Line 434
	mov	eax, DWORD PTR _size$[ebp]
	add	eax, 1
	mov	esi, esp
	push	eax
	call	DWORD PTR __imp__malloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _string$[ebp]
	mov	DWORD PTR [ecx+4], eax
; Line 435
	mov	eax, DWORD PTR _string$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 0
; Line 436
	mov	eax, DWORD PTR _size$[ebp]
	add	eax, 1
	mov	ecx, DWORD PTR _string$[ebp]
	mov	DWORD PTR [ecx+12], eax
; Line 439
	mov	eax, DWORD PTR _string$[ebp]
$LN2@newSize8:
; Line 440
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_newSize8 ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _newSizeUTF16
_TEXT	SEGMENT
_string$ = -8						; size = 4
_factory$ = 8						; size = 4
_size$ = 12						; size = 4
_newSizeUTF16 PROC					; COMDAT
; Line 450
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 453
	mov	esi, esp
	mov	eax, DWORD PTR _factory$[ebp]
	push	eax
	mov	ecx, DWORD PTR _factory$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _string$[ebp], eax
; Line 455
	cmp	DWORD PTR _string$[ebp], 0
	jne	SHORT $LN1@newSizeUTF
; Line 457
	mov	eax, DWORD PTR _string$[ebp]
	jmp	SHORT $LN2@newSizeUTF
$LN1@newSizeUTF:
; Line 462
	mov	eax, DWORD PTR _size$[ebp]
	lea	ecx, DWORD PTR [eax+eax+2]
	mov	esi, esp
	push	ecx
	call	DWORD PTR __imp__malloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	edx, DWORD PTR _string$[ebp]
	mov	DWORD PTR [edx+4], eax
; Line 463
	mov	eax, DWORD PTR _string$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 0
; Line 464
	mov	eax, DWORD PTR _size$[ebp]
	add	eax, 1
	mov	ecx, DWORD PTR _string$[ebp]
	mov	DWORD PTR [ecx+12], eax
; Line 466
	mov	eax, DWORD PTR _string$[ebp]
$LN2@newSizeUTF:
; Line 467
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_newSizeUTF16 ENDP
_TEXT	ENDS
EXTRN	__imp__memmove:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _newPtr8
_TEXT	SEGMENT
_string$ = -8						; size = 4
_factory$ = 8						; size = 4
_ptr$ = 12						; size = 4
_size$ = 16						; size = 4
_newPtr8 PROC						; COMDAT
; Line 477
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 480
	mov	esi, esp
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _factory$[ebp]
	push	ecx
	mov	edx, DWORD PTR _factory$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _string$[ebp], eax
; Line 482
	cmp	DWORD PTR _string$[ebp], 0
	jne	SHORT $LN3@newPtr8
; Line 484
	xor	eax, eax
	jmp	SHORT $LN4@newPtr8
$LN3@newPtr8:
; Line 487
	cmp	DWORD PTR _size$[ebp], 0
	ja	SHORT $LN2@newPtr8
; Line 489
	mov	eax, DWORD PTR _string$[ebp]
	jmp	SHORT $LN4@newPtr8
$LN2@newPtr8:
; Line 492
	cmp	DWORD PTR _ptr$[ebp], 0
	je	SHORT $LN1@newPtr8
; Line 494
	mov	esi, esp
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _string$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 495
	mov	eax, DWORD PTR _string$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _size$[ebp]
	mov	BYTE PTR [ecx+edx], 0
; Line 496
	mov	eax, DWORD PTR _string$[ebp]
	mov	ecx, DWORD PTR _size$[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN1@newPtr8:
; Line 499
	mov	eax, DWORD PTR _string$[ebp]
$LN4@newPtr8:
; Line 500
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_newPtr8 ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _newPtrUTF16_8
_TEXT	SEGMENT
tv74 = -232						; size = 4
_inSize$34796 = -32					; size = 4
_out$34795 = -20					; size = 4
_string$ = -8						; size = 4
_factory$ = 8						; size = 4
_ptr$ = 12						; size = 4
_size$ = 16						; size = 4
_newPtrUTF16_8 PROC					; COMDAT
; Line 510
	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 515
	mov	esi, esp
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _factory$[ebp]
	push	ecx
	mov	edx, DWORD PTR _factory$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _string$[ebp], eax
; Line 517
	cmp	DWORD PTR _string$[ebp], 0
	jne	SHORT $LN5@newPtrUTF1
; Line 519
	xor	eax, eax
	jmp	$LN6@newPtrUTF1
$LN5@newPtrUTF1:
; Line 522
	cmp	DWORD PTR _size$[ebp], 0
	ja	SHORT $LN4@newPtrUTF1
; Line 524
	mov	eax, DWORD PTR _string$[ebp]
	jmp	$LN6@newPtrUTF1
$LN4@newPtrUTF1:
; Line 527
	cmp	DWORD PTR _ptr$[ebp], 0
	je	SHORT $LN3@newPtrUTF1
; Line 532
	mov	eax, DWORD PTR _string$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _out$34795[ebp], ecx
; Line 533
	mov	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR _inSize$34796[ebp], eax
$LN2@newPtrUTF1:
; Line 535
	mov	eax, DWORD PTR _inSize$34796[ebp]
	mov	ecx, DWORD PTR _inSize$34796[ebp]
	sub	ecx, 1
	mov	DWORD PTR _inSize$34796[ebp], ecx
	test	eax, eax
	jle	SHORT $LN8@newPtrUTF1
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN9@newPtrUTF1
$LN8@newPtrUTF1:
	mov	DWORD PTR tv74[ebp], 0
$LN9@newPtrUTF1:
	cmp	DWORD PTR tv74[ebp], 0
	je	SHORT $LN1@newPtrUTF1
; Line 537
	mov	eax, DWORD PTR _ptr$[ebp]
	movzx	cx, BYTE PTR [eax]
	mov	edx, DWORD PTR _out$34795[ebp]
	mov	WORD PTR [edx], cx
	mov	eax, DWORD PTR _out$34795[ebp]
	add	eax, 2
	mov	DWORD PTR _out$34795[ebp], eax
	mov	ecx, DWORD PTR _ptr$[ebp]
	add	ecx, 1
	mov	DWORD PTR _ptr$[ebp], ecx
; Line 538
	jmp	SHORT $LN2@newPtrUTF1
$LN1@newPtrUTF1:
; Line 542
	mov	eax, DWORD PTR _string$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	xor	edx, edx
	mov	eax, DWORD PTR _size$[ebp]
	mov	WORD PTR [ecx+eax*2], dx
; Line 544
	mov	eax, DWORD PTR _string$[ebp]
	mov	ecx, DWORD PTR _size$[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN3@newPtrUTF1:
; Line 547
	mov	eax, DWORD PTR _string$[ebp]
$LN6@newPtrUTF1:
; Line 548
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 232				; 000000e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_newPtrUTF16_8 ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _newPtrUTF16_UTF16
_TEXT	SEGMENT
_string$ = -8						; size = 4
_factory$ = 8						; size = 4
_ptr$ = 12						; size = 4
_size$ = 16						; size = 4
_newPtrUTF16_UTF16 PROC					; COMDAT
; Line 558
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 561
	mov	esi, esp
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _factory$[ebp]
	push	ecx
	mov	edx, DWORD PTR _factory$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _string$[ebp], eax
; Line 563
	cmp	DWORD PTR _string$[ebp], 0
	jne	SHORT $LN3@newPtrUTF1@2
; Line 565
	xor	eax, eax
	jmp	SHORT $LN4@newPtrUTF1@2
$LN3@newPtrUTF1@2:
; Line 568
	cmp	DWORD PTR _size$[ebp], 0
	ja	SHORT $LN2@newPtrUTF1@2
; Line 570
	mov	eax, DWORD PTR _string$[ebp]
	jmp	SHORT $LN4@newPtrUTF1@2
$LN2@newPtrUTF1@2:
; Line 573
	cmp	DWORD PTR _ptr$[ebp], 0
	je	SHORT $LN1@newPtrUTF1@2
; Line 575
	mov	eax, DWORD PTR _size$[ebp]
	shl	eax, 1
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _string$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 579
	mov	eax, DWORD PTR _string$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	xor	edx, edx
	mov	eax, DWORD PTR _size$[ebp]
	mov	WORD PTR [ecx+eax*2], dx
; Line 580
	mov	eax, DWORD PTR _string$[ebp]
	mov	ecx, DWORD PTR _size$[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN1@newPtrUTF1@2:
; Line 583
	mov	eax, DWORD PTR _string$[ebp]
$LN4@newPtrUTF1@2:
; Line 584
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_newPtrUTF16_UTF16 ENDP
_TEXT	ENDS
EXTRN	_strlen:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _newStr8
_TEXT	SEGMENT
_factory$ = 8						; size = 4
_ptr$ = 12						; size = 4
_newStr8 PROC						; COMDAT
; Line 593
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 594
	mov	eax, DWORD PTR _ptr$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _factory$[ebp]
	push	edx
	mov	eax, DWORD PTR _factory$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	call	ecx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 595
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_newStr8 ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _newStrUTF16_8
_TEXT	SEGMENT
_factory$ = 8						; size = 4
_ptr$ = 12						; size = 4
_newStrUTF16_8 PROC					; COMDAT
; Line 604
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 605
	mov	eax, DWORD PTR _ptr$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _factory$[ebp]
	push	edx
	mov	eax, DWORD PTR _factory$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	call	ecx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 606
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_newStrUTF16_8 ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _newStrUTF16_UTF16
_TEXT	SEGMENT
tv67 = -220						; size = 4
_count$ = -20						; size = 4
_in$ = -8						; size = 4
_factory$ = 8						; size = 4
_ptr$ = 12						; size = 4
_newStrUTF16_UTF16 PROC					; COMDAT
; Line 615
	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 621
	mov	eax, DWORD PTR _ptr$[ebp]
	mov	DWORD PTR _in$[ebp], eax
; Line 622
	mov	DWORD PTR _count$[ebp], 0
$LN2@newStrUTF1:
; Line 624
	mov	eax, DWORD PTR _in$[ebp]
	movzx	ecx, WORD PTR [eax]
	mov	edx, DWORD PTR _in$[ebp]
	add	edx, 2
	mov	DWORD PTR _in$[ebp], edx
	test	ecx, ecx
	je	SHORT $LN5@newStrUTF1
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN6@newStrUTF1
$LN5@newStrUTF1:
	mov	DWORD PTR tv67[ebp], 0
$LN6@newStrUTF1:
	cmp	DWORD PTR tv67[ebp], 0
	je	SHORT $LN1@newStrUTF1
; Line 626
	mov	eax, DWORD PTR _count$[ebp]
	add	eax, 1
	mov	DWORD PTR _count$[ebp], eax
; Line 627
	jmp	SHORT $LN2@newStrUTF1
$LN1@newStrUTF1:
; Line 628
	mov	esi, esp
	mov	eax, DWORD PTR _count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _factory$[ebp]
	push	edx
	mov	eax, DWORD PTR _factory$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	call	ecx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 629
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_newStrUTF16_UTF16 ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _destroy
_TEXT	SEGMENT
_i$34855 = -20						; size = 4
_strIndex$ = -8						; size = 4
_factory$ = 8						; size = 4
_string$ = 12						; size = 4
_destroy PROC						; COMDAT
; Line 633
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 636
	mov	eax, DWORD PTR _string$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _strIndex$[ebp], ecx
; Line 643
	mov	esi, esp
	mov	eax, DWORD PTR _strIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _factory$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _factory$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+148]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 649
	mov	eax, DWORD PTR _factory$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 1
	mov	edx, DWORD PTR _factory$[ebp]
	mov	DWORD PTR [edx+4], ecx
; Line 655
	mov	eax, DWORD PTR _factory$[ebp]
	mov	ecx, DWORD PTR _strIndex$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jae	SHORT $LN5@destroy
; Line 663
	mov	eax, DWORD PTR _strIndex$[ebp]
	mov	DWORD PTR _i$34855[ebp], eax
	jmp	SHORT $LN3@destroy
$LN2@destroy:
	mov	eax, DWORD PTR _i$34855[ebp]
	add	eax, 1
	mov	DWORD PTR _i$34855[ebp], eax
$LN3@destroy:
	mov	eax, DWORD PTR _factory$[ebp]
	mov	ecx, DWORD PTR _i$34855[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jae	SHORT $LN5@destroy
; Line 667
	mov	eax, DWORD PTR _factory$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _i$34855[ebp]
	mov	ecx, DWORD PTR [edx+eax*8]
	mov	edx, DWORD PTR _i$34855[ebp]
	mov	DWORD PTR [ecx+16], edx
; Line 668
	jmp	SHORT $LN2@destroy
$LN5@destroy:
; Line 674
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_destroy ENDP
_TEXT	ENDS
EXTRN	__imp__isprint:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _printable8
_TEXT	SEGMENT
_i$ = -32						; size = 4
_scannedText$ = -20					; size = 4
_string$ = -8						; size = 4
_factory$ = 8						; size = 4
_instr$ = 12						; size = 4
_printable8 PROC					; COMDAT
; Line 678
	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 688
	mov	eax, DWORD PTR _instr$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	lea	edx, DWORD PTR [ecx+ecx+1]
	mov	esi, esp
	push	edx
	mov	eax, DWORD PTR _factory$[ebp]
	push	eax
	mov	ecx, DWORD PTR _factory$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _string$[ebp], eax
; Line 693
	mov	eax, DWORD PTR _string$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _scannedText$[ebp], ecx
; Line 695
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN9@printable8
$LN8@printable8:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN9@printable8:
	mov	eax, DWORD PTR _instr$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jae	$LN7@printable8
; Line 697
	mov	eax, DWORD PTR _instr$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _i$[ebp]
	movzx	eax, BYTE PTR [ecx+edx]
	cmp	eax, 10					; 0000000aH
	jne	SHORT $LN6@printable8
; Line 699
	mov	eax, DWORD PTR _scannedText$[ebp]
	mov	BYTE PTR [eax], 92			; 0000005cH
	mov	ecx, DWORD PTR _scannedText$[ebp]
	add	ecx, 1
	mov	DWORD PTR _scannedText$[ebp], ecx
; Line 700
	mov	eax, DWORD PTR _scannedText$[ebp]
	mov	BYTE PTR [eax], 110			; 0000006eH
	mov	ecx, DWORD PTR _scannedText$[ebp]
	add	ecx, 1
	mov	DWORD PTR _scannedText$[ebp], ecx
	jmp	$LN5@printable8
$LN6@printable8:
; Line 702
	mov	eax, DWORD PTR _instr$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _i$[ebp]
	movzx	eax, BYTE PTR [ecx+edx]
	cmp	eax, 13					; 0000000dH
	jne	SHORT $LN4@printable8
; Line 704
	mov	eax, DWORD PTR _scannedText$[ebp]
	mov	BYTE PTR [eax], 92			; 0000005cH
	mov	ecx, DWORD PTR _scannedText$[ebp]
	add	ecx, 1
	mov	DWORD PTR _scannedText$[ebp], ecx
; Line 705
	mov	eax, DWORD PTR _scannedText$[ebp]
	mov	BYTE PTR [eax], 114			; 00000072H
	mov	ecx, DWORD PTR _scannedText$[ebp]
	add	ecx, 1
	mov	DWORD PTR _scannedText$[ebp], ecx
	jmp	SHORT $LN5@printable8
$LN4@printable8:
; Line 707
	mov	eax, DWORD PTR _instr$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _i$[ebp]
	movzx	eax, BYTE PTR [ecx+edx]
	mov	esi, esp
	push	eax
	call	DWORD PTR __imp__isprint
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN2@printable8
; Line 709
	mov	eax, DWORD PTR _scannedText$[ebp]
	mov	BYTE PTR [eax], 63			; 0000003fH
	mov	ecx, DWORD PTR _scannedText$[ebp]
	add	ecx, 1
	mov	DWORD PTR _scannedText$[ebp], ecx
; Line 711
	jmp	SHORT $LN5@printable8
$LN2@printable8:
; Line 713
	mov	eax, DWORD PTR _instr$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _scannedText$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	mov	cl, BYTE PTR [ecx+eax]
	mov	BYTE PTR [edx], cl
	mov	edx, DWORD PTR _scannedText$[ebp]
	add	edx, 1
	mov	DWORD PTR _scannedText$[ebp], edx
$LN5@printable8:
; Line 715
	jmp	$LN8@printable8
$LN7@printable8:
; Line 716
	mov	eax, DWORD PTR _scannedText$[ebp]
	mov	BYTE PTR [eax], 0
; Line 718
	mov	eax, DWORD PTR _string$[ebp]
	mov	ecx, DWORD PTR _scannedText$[ebp]
	sub	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _string$[ebp]
	mov	DWORD PTR [edx+8], ecx
; Line 720
	mov	eax, DWORD PTR _string$[ebp]
; Line 721
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_printable8 ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _printableUTF16
_TEXT	SEGMENT
_outLen$ = -56						; size = 4
_i$ = -44						; size = 4
_inText$ = -32						; size = 4
_scannedText$ = -20					; size = 4
_string$ = -8						; size = 4
_factory$ = 8						; size = 4
_instr$ = 12						; size = 4
_printableUTF16 PROC					; COMDAT
; Line 725
	push	ebp
	mov	ebp, esp
	sub	esp, 252				; 000000fcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-252]
	mov	ecx, 63					; 0000003fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 737
	mov	eax, DWORD PTR _instr$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	lea	edx, DWORD PTR [ecx+ecx+1]
	mov	esi, esp
	push	edx
	mov	eax, DWORD PTR _factory$[ebp]
	push	eax
	mov	ecx, DWORD PTR _factory$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _string$[ebp], eax
; Line 742
	mov	eax, DWORD PTR _string$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _scannedText$[ebp], ecx
; Line 743
	mov	eax, DWORD PTR _instr$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _inText$[ebp], ecx
; Line 744
	mov	DWORD PTR _outLen$[ebp], 0
; Line 746
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN9@printableU
$LN8@printableU:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN9@printableU:
	mov	eax, DWORD PTR _instr$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jae	$LN7@printableU
; Line 748
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _inText$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	cmp	edx, 10					; 0000000aH
	jne	SHORT $LN6@printableU
; Line 750
	mov	eax, 92					; 0000005cH
	mov	ecx, DWORD PTR _scannedText$[ebp]
	mov	WORD PTR [ecx], ax
	mov	edx, DWORD PTR _scannedText$[ebp]
	add	edx, 2
	mov	DWORD PTR _scannedText$[ebp], edx
; Line 751
	mov	eax, 110				; 0000006eH
	mov	ecx, DWORD PTR _scannedText$[ebp]
	mov	WORD PTR [ecx], ax
	mov	edx, DWORD PTR _scannedText$[ebp]
	add	edx, 2
	mov	DWORD PTR _scannedText$[ebp], edx
; Line 752
	mov	eax, DWORD PTR _outLen$[ebp]
	add	eax, 2
	mov	DWORD PTR _outLen$[ebp], eax
	jmp	$LN5@printableU
$LN6@printableU:
; Line 754
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _inText$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	cmp	edx, 13					; 0000000dH
	jne	SHORT $LN4@printableU
; Line 756
	mov	eax, 92					; 0000005cH
	mov	ecx, DWORD PTR _scannedText$[ebp]
	mov	WORD PTR [ecx], ax
	mov	edx, DWORD PTR _scannedText$[ebp]
	add	edx, 2
	mov	DWORD PTR _scannedText$[ebp], edx
; Line 757
	mov	eax, 114				; 00000072H
	mov	ecx, DWORD PTR _scannedText$[ebp]
	mov	WORD PTR [ecx], ax
	mov	edx, DWORD PTR _scannedText$[ebp]
	add	edx, 2
	mov	DWORD PTR _scannedText$[ebp], edx
; Line 758
	mov	eax, DWORD PTR _outLen$[ebp]
	add	eax, 2
	mov	DWORD PTR _outLen$[ebp], eax
	jmp	SHORT $LN5@printableU
$LN4@printableU:
; Line 760
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _inText$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	mov	esi, esp
	push	edx
	call	DWORD PTR __imp__isprint
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN2@printableU
; Line 762
	mov	eax, 63					; 0000003fH
	mov	ecx, DWORD PTR _scannedText$[ebp]
	mov	WORD PTR [ecx], ax
	mov	edx, DWORD PTR _scannedText$[ebp]
	add	edx, 2
	mov	DWORD PTR _scannedText$[ebp], edx
; Line 763
	mov	eax, DWORD PTR _outLen$[ebp]
	add	eax, 1
	mov	DWORD PTR _outLen$[ebp], eax
; Line 765
	jmp	SHORT $LN5@printableU
$LN2@printableU:
; Line 767
	mov	eax, DWORD PTR _scannedText$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _inText$[ebp]
	mov	cx, WORD PTR [edx+ecx*2]
	mov	WORD PTR [eax], cx
	mov	edx, DWORD PTR _scannedText$[ebp]
	add	edx, 2
	mov	DWORD PTR _scannedText$[ebp], edx
; Line 768
	mov	eax, DWORD PTR _outLen$[ebp]
	add	eax, 1
	mov	DWORD PTR _outLen$[ebp], eax
$LN5@printableU:
; Line 770
	jmp	$LN8@printableU
$LN7@printableU:
; Line 771
	xor	eax, eax
	mov	ecx, DWORD PTR _scannedText$[ebp]
	mov	WORD PTR [ecx], ax
; Line 773
	mov	eax, DWORD PTR _string$[ebp]
	mov	ecx, DWORD PTR _outLen$[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 775
	mov	eax, DWORD PTR _string$[ebp]
; Line 776
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 252				; 000000fcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_printableUTF16 ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _closeFactory
_TEXT	SEGMENT
_factory$ = 8						; size = 4
_closeFactory PROC					; COMDAT
; Line 783
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 787
	mov	esi, esp
	mov	eax, DWORD PTR _factory$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _factory$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+144]
	call	ecx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 791
	mov	esi, esp
	mov	eax, DWORD PTR _factory$[ebp]
	push	eax
	call	DWORD PTR __imp__free
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 792
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_closeFactory ENDP
_TEXT	ENDS
EXTRN	__imp__realloc:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _append8
_TEXT	SEGMENT
_len$ = -8						; size = 4
_string$ = 8						; size = 4
_newbit$ = 12						; size = 4
_append8 PROC						; COMDAT
; Line 796
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 799
	mov	eax, DWORD PTR _newbit$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	mov	DWORD PTR _len$[ebp], eax
; Line 801
	mov	eax, DWORD PTR _string$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _len$[ebp]
	lea	eax, DWORD PTR [ecx+edx+1]
	mov	ecx, DWORD PTR _string$[ebp]
	cmp	DWORD PTR [ecx+12], eax
	jae	SHORT $LN1@append8
; Line 803
	mov	eax, DWORD PTR _string$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _len$[ebp]
	lea	eax, DWORD PTR [ecx+edx+1]
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _string$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	DWORD PTR __imp__realloc
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _string$[ebp]
	mov	DWORD PTR [ecx+4], eax
; Line 804
	mov	eax, DWORD PTR _string$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _len$[ebp]
	lea	eax, DWORD PTR [ecx+edx+1]
	mov	ecx, DWORD PTR _string$[ebp]
	mov	DWORD PTR [ecx+12], eax
$LN1@append8:
; Line 809
	mov	eax, DWORD PTR _len$[ebp]
	add	eax, 1
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _newbit$[ebp]
	push	ecx
	mov	edx, DWORD PTR _string$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _string$[ebp]
	add	eax, DWORD PTR [ecx+8]
	push	eax
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 810
	mov	eax, DWORD PTR _string$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, DWORD PTR _len$[ebp]
	mov	edx, DWORD PTR _string$[ebp]
	mov	DWORD PTR [edx+8], ecx
; Line 812
	mov	eax, DWORD PTR _string$[ebp]
	mov	eax, DWORD PTR [eax+4]
; Line 813
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_append8 ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _appendUTF16_8
_TEXT	SEGMENT
_count$ = -32						; size = 4
_apPoint$ = -20						; size = 4
_len$ = -8						; size = 4
_string$ = 8						; size = 4
_newbit$ = 12						; size = 4
_appendUTF16_8 PROC					; COMDAT
; Line 817
	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 822
	mov	eax, DWORD PTR _newbit$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	mov	DWORD PTR _len$[ebp], eax
; Line 824
	mov	eax, DWORD PTR _string$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _len$[ebp]
	lea	eax, DWORD PTR [ecx+edx+1]
	mov	ecx, DWORD PTR _string$[ebp]
	cmp	DWORD PTR [ecx+12], eax
	jae	SHORT $LN4@appendUTF1
; Line 826
	mov	eax, DWORD PTR _string$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, DWORD PTR _len$[ebp]
	lea	edx, DWORD PTR [ecx+ecx+2]
	mov	esi, esp
	push	edx
	mov	eax, DWORD PTR _string$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	DWORD PTR __imp__realloc
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	edx, DWORD PTR _string$[ebp]
	mov	DWORD PTR [edx+4], eax
; Line 827
	mov	eax, DWORD PTR _string$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _len$[ebp]
	lea	eax, DWORD PTR [ecx+edx+1]
	mov	ecx, DWORD PTR _string$[ebp]
	mov	DWORD PTR [ecx+12], eax
$LN4@appendUTF1:
; Line 830
	mov	eax, DWORD PTR _string$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _string$[ebp]
	mov	eax, DWORD PTR [edx+4]
	lea	ecx, DWORD PTR [eax+ecx*2]
	mov	DWORD PTR _apPoint$[ebp], ecx
; Line 831
	mov	eax, DWORD PTR _string$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, DWORD PTR _len$[ebp]
	mov	edx, DWORD PTR _string$[ebp]
	mov	DWORD PTR [edx+8], ecx
; Line 833
	mov	DWORD PTR _count$[ebp], 0
	jmp	SHORT $LN3@appendUTF1
$LN2@appendUTF1:
	mov	eax, DWORD PTR _count$[ebp]
	add	eax, 1
	mov	DWORD PTR _count$[ebp], eax
$LN3@appendUTF1:
	mov	eax, DWORD PTR _count$[ebp]
	cmp	eax, DWORD PTR _len$[ebp]
	jae	SHORT $LN1@appendUTF1
; Line 835
	mov	eax, DWORD PTR _newbit$[ebp]
	add	eax, DWORD PTR _count$[ebp]
	movsx	cx, BYTE PTR [eax]
	mov	edx, DWORD PTR _apPoint$[ebp]
	mov	WORD PTR [edx], cx
	mov	eax, DWORD PTR _apPoint$[ebp]
	add	eax, 2
	mov	DWORD PTR _apPoint$[ebp], eax
; Line 836
	jmp	SHORT $LN2@appendUTF1
$LN1@appendUTF1:
; Line 837
	xor	eax, eax
	mov	ecx, DWORD PTR _apPoint$[ebp]
	mov	WORD PTR [ecx], ax
; Line 839
	mov	eax, DWORD PTR _string$[ebp]
	mov	eax, DWORD PTR [eax+4]
; Line 840
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_appendUTF16_8 ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _appendUTF16_UTF16
_TEXT	SEGMENT
tv67 = -220						; size = 4
_in$ = -20						; size = 4
_len$ = -8						; size = 4
_string$ = 8						; size = 4
_newbit$ = 12						; size = 4
_appendUTF16_UTF16 PROC					; COMDAT
; Line 844
	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 850
	mov	eax, DWORD PTR _newbit$[ebp]
	mov	DWORD PTR _in$[ebp], eax
; Line 851
	mov	DWORD PTR _len$[ebp], 0
$LN3@appendUTF1@2:
; Line 853
	mov	eax, DWORD PTR _in$[ebp]
	movzx	ecx, WORD PTR [eax]
	mov	edx, DWORD PTR _in$[ebp]
	add	edx, 2
	mov	DWORD PTR _in$[ebp], edx
	test	ecx, ecx
	je	SHORT $LN6@appendUTF1@2
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN7@appendUTF1@2
$LN6@appendUTF1@2:
	mov	DWORD PTR tv67[ebp], 0
$LN7@appendUTF1@2:
	cmp	DWORD PTR tv67[ebp], 0
	je	SHORT $LN2@appendUTF1@2
; Line 855
	mov	eax, DWORD PTR _len$[ebp]
	add	eax, 1
	mov	DWORD PTR _len$[ebp], eax
; Line 856
	jmp	SHORT $LN3@appendUTF1@2
$LN2@appendUTF1@2:
; Line 858
	mov	eax, DWORD PTR _string$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _len$[ebp]
	lea	eax, DWORD PTR [ecx+edx+1]
	mov	ecx, DWORD PTR _string$[ebp]
	cmp	DWORD PTR [ecx+12], eax
	jae	SHORT $LN1@appendUTF1@2
; Line 860
	mov	eax, DWORD PTR _string$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, DWORD PTR _len$[ebp]
	lea	edx, DWORD PTR [ecx+ecx+2]
	mov	esi, esp
	push	edx
	mov	eax, DWORD PTR _string$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	DWORD PTR __imp__realloc
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	edx, DWORD PTR _string$[ebp]
	mov	DWORD PTR [edx+4], eax
; Line 861
	mov	eax, DWORD PTR _string$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _len$[ebp]
	lea	eax, DWORD PTR [ecx+edx+1]
	mov	ecx, DWORD PTR _string$[ebp]
	mov	DWORD PTR [ecx+12], eax
$LN1@appendUTF1@2:
; Line 866
	mov	eax, DWORD PTR _len$[ebp]
	lea	ecx, DWORD PTR [eax+eax+2]
	mov	esi, esp
	push	ecx
	mov	edx, DWORD PTR _newbit$[ebp]
	push	edx
	mov	eax, DWORD PTR _string$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _string$[ebp]
	mov	eax, DWORD PTR [edx+4]
	lea	ecx, DWORD PTR [eax+ecx*2]
	push	ecx
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 867
	mov	eax, DWORD PTR _string$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, DWORD PTR _len$[ebp]
	mov	edx, DWORD PTR _string$[ebp]
	mov	DWORD PTR [edx+8], ecx
; Line 869
	mov	eax, DWORD PTR _string$[ebp]
	mov	eax, DWORD PTR [eax+4]
; Line 870
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_appendUTF16_UTF16 ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _set8
_TEXT	SEGMENT
_len$ = -8						; size = 4
_string$ = 8						; size = 4
_chars$ = 12						; size = 4
_set8	PROC						; COMDAT
; Line 874
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 877
	mov	eax, DWORD PTR _chars$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	mov	DWORD PTR _len$[ebp], eax
; Line 878
	mov	eax, DWORD PTR _len$[ebp]
	add	eax, 1
	mov	ecx, DWORD PTR _string$[ebp]
	cmp	DWORD PTR [ecx+12], eax
	jae	SHORT $LN1@set8
; Line 880
	mov	eax, DWORD PTR _len$[ebp]
	add	eax, 1
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _string$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	DWORD PTR __imp__realloc
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _string$[ebp]
	mov	DWORD PTR [ecx+4], eax
; Line 881
	mov	eax, DWORD PTR _len$[ebp]
	add	eax, 1
	mov	ecx, DWORD PTR _string$[ebp]
	mov	DWORD PTR [ecx+12], eax
$LN1@set8:
; Line 886
	mov	eax, DWORD PTR _len$[ebp]
	add	eax, 1
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _chars$[ebp]
	push	ecx
	mov	edx, DWORD PTR _string$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 887
	mov	eax, DWORD PTR _string$[ebp]
	mov	ecx, DWORD PTR _len$[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 889
	mov	eax, DWORD PTR _string$[ebp]
	mov	eax, DWORD PTR [eax+4]
; Line 891
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_set8	ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _setUTF16_8
_TEXT	SEGMENT
_apPoint$ = -32						; size = 4
_count$ = -20						; size = 4
_len$ = -8						; size = 4
_string$ = 8						; size = 4
_chars$ = 12						; size = 4
_setUTF16_8 PROC					; COMDAT
; Line 895
	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 900
	mov	eax, DWORD PTR _chars$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	mov	DWORD PTR _len$[ebp], eax
; Line 901
	mov	eax, DWORD PTR _len$[ebp]
	add	eax, 1
	mov	ecx, DWORD PTR _string$[ebp]
	cmp	DWORD PTR [ecx+12], eax
	jae	SHORT $LN4@setUTF16_8
; Line 903
	mov	eax, DWORD PTR _len$[ebp]
	lea	ecx, DWORD PTR [eax+eax+2]
	mov	esi, esp
	push	ecx
	mov	edx, DWORD PTR _string$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	DWORD PTR __imp__realloc
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _string$[ebp]
	mov	DWORD PTR [ecx+4], eax
; Line 904
	mov	eax, DWORD PTR _len$[ebp]
	add	eax, 1
	mov	ecx, DWORD PTR _string$[ebp]
	mov	DWORD PTR [ecx+12], eax
$LN4@setUTF16_8:
; Line 906
	mov	eax, DWORD PTR _string$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _apPoint$[ebp], ecx
; Line 907
	mov	eax, DWORD PTR _string$[ebp]
	mov	ecx, DWORD PTR _len$[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 909
	mov	DWORD PTR _count$[ebp], 0
	jmp	SHORT $LN3@setUTF16_8
$LN2@setUTF16_8:
	mov	eax, DWORD PTR _count$[ebp]
	add	eax, 1
	mov	DWORD PTR _count$[ebp], eax
$LN3@setUTF16_8:
	mov	eax, DWORD PTR _string$[ebp]
	mov	ecx, DWORD PTR _count$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jae	SHORT $LN1@setUTF16_8
; Line 911
	mov	eax, DWORD PTR _chars$[ebp]
	add	eax, DWORD PTR _count$[ebp]
	movsx	cx, BYTE PTR [eax]
	mov	edx, DWORD PTR _apPoint$[ebp]
	mov	WORD PTR [edx], cx
	mov	eax, DWORD PTR _apPoint$[ebp]
	add	eax, 2
	mov	DWORD PTR _apPoint$[ebp], eax
; Line 912
	jmp	SHORT $LN2@setUTF16_8
$LN1@setUTF16_8:
; Line 913
	xor	eax, eax
	mov	ecx, DWORD PTR _apPoint$[ebp]
	mov	WORD PTR [ecx], ax
; Line 915
	mov	eax, DWORD PTR _string$[ebp]
	mov	eax, DWORD PTR [eax+4]
; Line 916
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_setUTF16_8 ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _setUTF16_UTF16
_TEXT	SEGMENT
tv67 = -220						; size = 4
_in$ = -20						; size = 4
_len$ = -8						; size = 4
_string$ = 8						; size = 4
_chars$ = 12						; size = 4
_setUTF16_UTF16 PROC					; COMDAT
; Line 920
	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 926
	mov	eax, DWORD PTR _chars$[ebp]
	mov	DWORD PTR _in$[ebp], eax
; Line 927
	mov	DWORD PTR _len$[ebp], 0
$LN3@setUTF16_U:
; Line 929
	mov	eax, DWORD PTR _in$[ebp]
	movzx	ecx, WORD PTR [eax]
	mov	edx, DWORD PTR _in$[ebp]
	add	edx, 2
	mov	DWORD PTR _in$[ebp], edx
	test	ecx, ecx
	je	SHORT $LN6@setUTF16_U
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN7@setUTF16_U
$LN6@setUTF16_U:
	mov	DWORD PTR tv67[ebp], 0
$LN7@setUTF16_U:
	cmp	DWORD PTR tv67[ebp], 0
	je	SHORT $LN2@setUTF16_U
; Line 931
	mov	eax, DWORD PTR _len$[ebp]
	add	eax, 1
	mov	DWORD PTR _len$[ebp], eax
; Line 932
	jmp	SHORT $LN3@setUTF16_U
$LN2@setUTF16_U:
; Line 934
	mov	eax, DWORD PTR _len$[ebp]
	add	eax, 1
	mov	ecx, DWORD PTR _string$[ebp]
	cmp	DWORD PTR [ecx+12], eax
	jae	SHORT $LN1@setUTF16_U
; Line 936
	mov	eax, DWORD PTR _len$[ebp]
	lea	ecx, DWORD PTR [eax+eax+2]
	mov	esi, esp
	push	ecx
	mov	edx, DWORD PTR _string$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	DWORD PTR __imp__realloc
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _string$[ebp]
	mov	DWORD PTR [ecx+4], eax
; Line 937
	mov	eax, DWORD PTR _len$[ebp]
	add	eax, 1
	mov	ecx, DWORD PTR _string$[ebp]
	mov	DWORD PTR [ecx+12], eax
$LN1@setUTF16_U:
; Line 942
	mov	eax, DWORD PTR _len$[ebp]
	lea	ecx, DWORD PTR [eax+eax+2]
	mov	esi, esp
	push	ecx
	mov	edx, DWORD PTR _chars$[ebp]
	push	edx
	mov	eax, DWORD PTR _string$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 943
	mov	eax, DWORD PTR _string$[ebp]
	mov	ecx, DWORD PTR _len$[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 945
	mov	eax, DWORD PTR _string$[ebp]
	mov	eax, DWORD PTR [eax+4]
; Line 947
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_setUTF16_UTF16 ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _addc8
_TEXT	SEGMENT
_string$ = 8						; size = 4
_c$ = 12						; size = 4
_addc8	PROC						; COMDAT
; Line 951
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 952
	mov	eax, DWORD PTR _string$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 2
	mov	edx, DWORD PTR _string$[ebp]
	cmp	DWORD PTR [edx+12], ecx
	jae	SHORT $LN1@addc8
; Line 954
	mov	eax, DWORD PTR _string$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 2
	mov	esi, esp
	push	ecx
	mov	edx, DWORD PTR _string$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	DWORD PTR __imp__realloc
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _string$[ebp]
	mov	DWORD PTR [ecx+4], eax
; Line 955
	mov	eax, DWORD PTR _string$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 2
	mov	edx, DWORD PTR _string$[ebp]
	mov	DWORD PTR [edx+12], ecx
$LN1@addc8:
; Line 957
	mov	eax, DWORD PTR _string$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _string$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	dl, BYTE PTR _c$[ebp]
	mov	BYTE PTR [ecx+eax], dl
; Line 958
	mov	eax, DWORD PTR _string$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _string$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	BYTE PTR [ecx+eax+1], 0
; Line 959
	mov	eax, DWORD PTR _string$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 1
	mov	edx, DWORD PTR _string$[ebp]
	mov	DWORD PTR [edx+8], ecx
; Line 961
	mov	eax, DWORD PTR _string$[ebp]
	mov	eax, DWORD PTR [eax+4]
; Line 962
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_addc8	ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _addcUTF16
_TEXT	SEGMENT
_ptr$ = -8						; size = 4
_string$ = 8						; size = 4
_c$ = 12						; size = 4
_addcUTF16 PROC						; COMDAT
; Line 966
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 969
	mov	eax, DWORD PTR _string$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 2
	mov	edx, DWORD PTR _string$[ebp]
	cmp	DWORD PTR [edx+12], ecx
	jae	SHORT $LN1@addcUTF16
; Line 971
	mov	eax, DWORD PTR _string$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	lea	edx, DWORD PTR [ecx+ecx+4]
	mov	esi, esp
	push	edx
	mov	eax, DWORD PTR _string$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	DWORD PTR __imp__realloc
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	edx, DWORD PTR _string$[ebp]
	mov	DWORD PTR [edx+4], eax
; Line 972
	mov	eax, DWORD PTR _string$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 2
	mov	edx, DWORD PTR _string$[ebp]
	mov	DWORD PTR [edx+12], ecx
$LN1@addcUTF16:
; Line 974
	mov	eax, DWORD PTR _string$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _ptr$[ebp], ecx
; Line 976
	mov	eax, DWORD PTR _string$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _ptr$[ebp]
	mov	ax, WORD PTR _c$[ebp]
	mov	WORD PTR [edx+ecx*2], ax
; Line 977
	mov	eax, DWORD PTR _string$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	xor	edx, edx
	mov	eax, DWORD PTR _ptr$[ebp]
	mov	WORD PTR [eax+ecx*2+2], dx
; Line 978
	mov	eax, DWORD PTR _string$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 1
	mov	edx, DWORD PTR _string$[ebp]
	mov	DWORD PTR [edx+8], ecx
; Line 980
	mov	eax, DWORD PTR _string$[ebp]
	mov	eax, DWORD PTR [eax+4]
; Line 981
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_addcUTF16 ENDP
_TEXT	ENDS
PUBLIC	??_C@_02DPKJAMEF@?$CFd?$AA@			; `string'
PUBLIC	__$ArrayPad$
EXTRN	__imp__sprintf:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
;	COMDAT ??_C@_02DPKJAMEF@?$CFd?$AA@
CONST	SEGMENT
??_C@_02DPKJAMEF@?$CFd?$AA@ DB '%d', 00H		; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT _addi8
_TEXT	SEGMENT
_newbit$ = -40						; size = 32
__$ArrayPad$ = -4					; size = 4
_string$ = 8						; size = 4
_i$ = 12						; size = 4
_addi8	PROC						; COMDAT
; Line 985
	push	ebp
	mov	ebp, esp
	sub	esp, 236				; 000000ecH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-236]
	mov	ecx, 59					; 0000003bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 988
	mov	esi, esp
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	lea	ecx, DWORD PTR _newbit$[ebp]
	push	ecx
	call	DWORD PTR __imp__sprintf
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 990
	mov	esi, esp
	lea	eax, DWORD PTR _newbit$[ebp]
	push	eax
	mov	ecx, DWORD PTR _string$[ebp]
	push	ecx
	mov	edx, DWORD PTR _string$[ebp]
	mov	eax, DWORD PTR [edx+36]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 991
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@addi8
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 236				; 000000ecH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN5@addi8:
	DD	1
	DD	$LN4@addi8
$LN4@addi8:
	DD	-40					; ffffffd8H
	DD	32					; 00000020H
	DD	$LN3@addi8
$LN3@addi8:
	DB	110					; 0000006eH
	DB	101					; 00000065H
	DB	119					; 00000077H
	DB	98					; 00000062H
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	0
_addi8	ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _addiUTF16
_TEXT	SEGMENT
_newbit$ = -40						; size = 32
__$ArrayPad$ = -4					; size = 4
_string$ = 8						; size = 4
_i$ = 12						; size = 4
_addiUTF16 PROC						; COMDAT
; Line 994
	push	ebp
	mov	ebp, esp
	sub	esp, 236				; 000000ecH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-236]
	mov	ecx, 59					; 0000003bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 997
	mov	esi, esp
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	lea	ecx, DWORD PTR _newbit$[ebp]
	push	ecx
	call	DWORD PTR __imp__sprintf
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 999
	mov	esi, esp
	lea	eax, DWORD PTR _newbit$[ebp]
	push	eax
	mov	ecx, DWORD PTR _string$[ebp]
	push	ecx
	mov	edx, DWORD PTR _string$[ebp]
	mov	eax, DWORD PTR [edx+36]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1000
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@addiUTF16
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 236				; 000000ecH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN5@addiUTF16:
	DD	1
	DD	$LN4@addiUTF16
$LN4@addiUTF16:
	DD	-40					; ffffffd8H
	DD	32					; 00000020H
	DD	$LN3@addiUTF16
$LN3@addiUTF16:
	DB	110					; 0000006eH
	DB	101					; 00000065H
	DB	119					; 00000077H
	DB	98					; 00000062H
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	0
_addiUTF16 ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _inserti8
_TEXT	SEGMENT
_newbit$ = -40						; size = 32
__$ArrayPad$ = -4					; size = 4
_string$ = 8						; size = 4
_point$ = 12						; size = 4
_i$ = 16						; size = 4
_inserti8 PROC						; COMDAT
; Line 1004
	push	ebp
	mov	ebp, esp
	sub	esp, 236				; 000000ecH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-236]
	mov	ecx, 59					; 0000003bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 1007
	mov	esi, esp
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	lea	ecx, DWORD PTR _newbit$[ebp]
	push	ecx
	call	DWORD PTR __imp__sprintf
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1008
	mov	esi, esp
	lea	eax, DWORD PTR _newbit$[ebp]
	push	eax
	mov	ecx, DWORD PTR _point$[ebp]
	push	ecx
	mov	edx, DWORD PTR _string$[ebp]
	push	edx
	mov	eax, DWORD PTR _string$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	call	ecx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1009
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@inserti8
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 236				; 000000ecH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN5@inserti8:
	DD	1
	DD	$LN4@inserti8
$LN4@inserti8:
	DD	-40					; ffffffd8H
	DD	32					; 00000020H
	DD	$LN3@inserti8
$LN3@inserti8:
	DB	110					; 0000006eH
	DB	101					; 00000065H
	DB	119					; 00000077H
	DB	98					; 00000062H
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	0
_inserti8 ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _insertiUTF16
_TEXT	SEGMENT
_newbit$ = -40						; size = 32
__$ArrayPad$ = -4					; size = 4
_string$ = 8						; size = 4
_point$ = 12						; size = 4
_i$ = 16						; size = 4
_insertiUTF16 PROC					; COMDAT
; Line 1012
	push	ebp
	mov	ebp, esp
	sub	esp, 236				; 000000ecH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-236]
	mov	ecx, 59					; 0000003bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 1015
	mov	esi, esp
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	lea	ecx, DWORD PTR _newbit$[ebp]
	push	ecx
	call	DWORD PTR __imp__sprintf
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1016
	mov	esi, esp
	lea	eax, DWORD PTR _newbit$[ebp]
	push	eax
	mov	ecx, DWORD PTR _point$[ebp]
	push	ecx
	mov	edx, DWORD PTR _string$[ebp]
	push	edx
	mov	eax, DWORD PTR _string$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	call	ecx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1017
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@insertiUTF
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 236				; 000000ecH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN5@insertiUTF:
	DD	1
	DD	$LN4@insertiUTF
$LN4@insertiUTF:
	DD	-40					; ffffffd8H
	DD	32					; 00000020H
	DD	$LN3@insertiUTF
$LN3@insertiUTF:
	DB	110					; 0000006eH
	DB	101					; 00000065H
	DB	119					; 00000077H
	DB	98					; 00000062H
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	0
_insertiUTF16 ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _insert8
_TEXT	SEGMENT
_len$ = -8						; size = 4
_string$ = 8						; size = 4
_point$ = 12						; size = 4
_newbit$ = 16						; size = 4
_insert8 PROC						; COMDAT
; Line 1021
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1024
	mov	eax, DWORD PTR _string$[ebp]
	mov	ecx, DWORD PTR _point$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jb	SHORT $LN3@insert8
; Line 1026
	mov	esi, esp
	mov	eax, DWORD PTR _newbit$[ebp]
	push	eax
	mov	ecx, DWORD PTR _string$[ebp]
	push	ecx
	mov	edx, DWORD PTR _string$[ebp]
	mov	eax, DWORD PTR [edx+32]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	$LN4@insert8
$LN3@insert8:
; Line 1029
	mov	eax, DWORD PTR _newbit$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	mov	DWORD PTR _len$[ebp], eax
; Line 1031
	cmp	DWORD PTR _len$[ebp], 0
	jne	SHORT $LN2@insert8
; Line 1033
	mov	eax, DWORD PTR _string$[ebp]
	mov	eax, DWORD PTR [eax+4]
	jmp	$LN4@insert8
$LN2@insert8:
; Line 1036
	mov	eax, DWORD PTR _string$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _len$[ebp]
	lea	eax, DWORD PTR [ecx+edx+1]
	mov	ecx, DWORD PTR _string$[ebp]
	cmp	DWORD PTR [ecx+12], eax
	jae	SHORT $LN1@insert8
; Line 1038
	mov	eax, DWORD PTR _string$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _len$[ebp]
	lea	eax, DWORD PTR [ecx+edx+1]
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _string$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	DWORD PTR __imp__realloc
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _string$[ebp]
	mov	DWORD PTR [ecx+4], eax
; Line 1039
	mov	eax, DWORD PTR _string$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _len$[ebp]
	lea	eax, DWORD PTR [ecx+edx+1]
	mov	ecx, DWORD PTR _string$[ebp]
	mov	DWORD PTR [ecx+12], eax
$LN1@insert8:
; Line 1044
	mov	eax, DWORD PTR _string$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	sub	ecx, DWORD PTR _point$[ebp]
	add	ecx, 1
	mov	esi, esp
	push	ecx
	mov	edx, DWORD PTR _string$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, DWORD PTR _point$[ebp]
	push	eax
	mov	ecx, DWORD PTR _string$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, DWORD PTR _point$[ebp]
	add	edx, DWORD PTR _len$[ebp]
	push	edx
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1048
	mov	esi, esp
	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _newbit$[ebp]
	push	ecx
	mov	edx, DWORD PTR _string$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, DWORD PTR _point$[ebp]
	push	eax
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1050
	mov	eax, DWORD PTR _string$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, DWORD PTR _len$[ebp]
	mov	edx, DWORD PTR _string$[ebp]
	mov	DWORD PTR [edx+8], ecx
; Line 1052
	mov	eax, DWORD PTR _string$[ebp]
	mov	eax, DWORD PTR [eax+4]
$LN4@insert8:
; Line 1053
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_insert8 ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _insertUTF16_8
_TEXT	SEGMENT
_inPoint$ = -32						; size = 4
_count$ = -20						; size = 4
_len$ = -8						; size = 4
_string$ = 8						; size = 4
_point$ = 12						; size = 4
_newbit$ = 16						; size = 4
_insertUTF16_8 PROC					; COMDAT
; Line 1057
	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1062
	mov	eax, DWORD PTR _string$[ebp]
	mov	ecx, DWORD PTR _point$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jb	SHORT $LN6@insertUTF1
; Line 1064
	mov	esi, esp
	mov	eax, DWORD PTR _newbit$[ebp]
	push	eax
	mov	ecx, DWORD PTR _string$[ebp]
	push	ecx
	mov	edx, DWORD PTR _string$[ebp]
	mov	eax, DWORD PTR [edx+36]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	$LN7@insertUTF1
$LN6@insertUTF1:
; Line 1067
	mov	eax, DWORD PTR _newbit$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	mov	DWORD PTR _len$[ebp], eax
; Line 1069
	cmp	DWORD PTR _len$[ebp], 0
	jne	SHORT $LN5@insertUTF1
; Line 1071
	mov	eax, DWORD PTR _string$[ebp]
	mov	eax, DWORD PTR [eax+4]
	jmp	$LN7@insertUTF1
$LN5@insertUTF1:
; Line 1074
	mov	eax, DWORD PTR _string$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _len$[ebp]
	lea	eax, DWORD PTR [ecx+edx+1]
	mov	ecx, DWORD PTR _string$[ebp]
	cmp	DWORD PTR [ecx+12], eax
	jae	SHORT $LN4@insertUTF1
; Line 1076
	mov	eax, DWORD PTR _string$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, DWORD PTR _len$[ebp]
	lea	edx, DWORD PTR [ecx+ecx+2]
	mov	esi, esp
	push	edx
	mov	eax, DWORD PTR _string$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	DWORD PTR __imp__realloc
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	edx, DWORD PTR _string$[ebp]
	mov	DWORD PTR [edx+4], eax
; Line 1077
	mov	eax, DWORD PTR _string$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _len$[ebp]
	lea	eax, DWORD PTR [ecx+edx+1]
	mov	ecx, DWORD PTR _string$[ebp]
	mov	DWORD PTR [ecx+12], eax
$LN4@insertUTF1:
; Line 1082
	mov	eax, DWORD PTR _string$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	sub	ecx, DWORD PTR _point$[ebp]
	lea	edx, DWORD PTR [ecx+ecx+2]
	mov	esi, esp
	push	edx
	mov	eax, DWORD PTR _string$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _point$[ebp]
	lea	eax, DWORD PTR [ecx+edx*2]
	push	eax
	mov	ecx, DWORD PTR _string$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _point$[ebp]
	lea	ecx, DWORD PTR [edx+eax*2]
	mov	edx, DWORD PTR _len$[ebp]
	lea	eax, DWORD PTR [ecx+edx*2]
	push	eax
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1084
	mov	eax, DWORD PTR _string$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, DWORD PTR _len$[ebp]
	mov	edx, DWORD PTR _string$[ebp]
	mov	DWORD PTR [edx+8], ecx
; Line 1086
	mov	eax, DWORD PTR _string$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _point$[ebp]
	lea	eax, DWORD PTR [ecx+edx*2]
	mov	DWORD PTR _inPoint$[ebp], eax
; Line 1087
	mov	DWORD PTR _count$[ebp], 0
	jmp	SHORT $LN3@insertUTF1
$LN2@insertUTF1:
	mov	eax, DWORD PTR _count$[ebp]
	add	eax, 1
	mov	DWORD PTR _count$[ebp], eax
$LN3@insertUTF1:
	mov	eax, DWORD PTR _count$[ebp]
	cmp	eax, DWORD PTR _len$[ebp]
	jae	SHORT $LN1@insertUTF1
; Line 1089
	mov	eax, DWORD PTR _newbit$[ebp]
	add	eax, DWORD PTR _count$[ebp]
	movsx	cx, BYTE PTR [eax]
	mov	edx, DWORD PTR _count$[ebp]
	mov	eax, DWORD PTR _inPoint$[ebp]
	mov	WORD PTR [eax+edx*2], cx
; Line 1090
	jmp	SHORT $LN2@insertUTF1
$LN1@insertUTF1:
; Line 1092
	mov	eax, DWORD PTR _string$[ebp]
	mov	eax, DWORD PTR [eax+4]
$LN7@insertUTF1:
; Line 1093
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_insertUTF16_8 ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _insertUTF16_UTF16
_TEXT	SEGMENT
tv73 = -220						; size = 4
_in$ = -20						; size = 4
_len$ = -8						; size = 4
_string$ = 8						; size = 4
_point$ = 12						; size = 4
_newbit$ = 16						; size = 4
_insertUTF16_UTF16 PROC					; COMDAT
; Line 1097
	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1101
	mov	eax, DWORD PTR _string$[ebp]
	mov	ecx, DWORD PTR _point$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jb	SHORT $LN5@insertUTF1@2
; Line 1103
	mov	esi, esp
	mov	eax, DWORD PTR _newbit$[ebp]
	push	eax
	mov	ecx, DWORD PTR _string$[ebp]
	push	ecx
	mov	edx, DWORD PTR _string$[ebp]
	mov	eax, DWORD PTR [edx+32]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	$LN6@insertUTF1@2
$LN5@insertUTF1@2:
; Line 1108
	mov	eax, DWORD PTR _newbit$[ebp]
	mov	DWORD PTR _in$[ebp], eax
; Line 1109
	mov	DWORD PTR _len$[ebp], 0
$LN4@insertUTF1@2:
; Line 1111
	mov	eax, DWORD PTR _in$[ebp]
	movzx	ecx, WORD PTR [eax]
	mov	edx, DWORD PTR _in$[ebp]
	add	edx, 2
	mov	DWORD PTR _in$[ebp], edx
	test	ecx, ecx
	je	SHORT $LN8@insertUTF1@2
	mov	DWORD PTR tv73[ebp], 1
	jmp	SHORT $LN9@insertUTF1@2
$LN8@insertUTF1@2:
	mov	DWORD PTR tv73[ebp], 0
$LN9@insertUTF1@2:
	cmp	DWORD PTR tv73[ebp], 0
	je	SHORT $LN3@insertUTF1@2
; Line 1113
	mov	eax, DWORD PTR _len$[ebp]
	add	eax, 1
	mov	DWORD PTR _len$[ebp], eax
; Line 1114
	jmp	SHORT $LN4@insertUTF1@2
$LN3@insertUTF1@2:
; Line 1116
	cmp	DWORD PTR _len$[ebp], 0
	jne	SHORT $LN2@insertUTF1@2
; Line 1118
	mov	eax, DWORD PTR _string$[ebp]
	mov	eax, DWORD PTR [eax+4]
	jmp	$LN6@insertUTF1@2
$LN2@insertUTF1@2:
; Line 1121
	mov	eax, DWORD PTR _string$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _len$[ebp]
	lea	eax, DWORD PTR [ecx+edx+1]
	mov	ecx, DWORD PTR _string$[ebp]
	cmp	DWORD PTR [ecx+12], eax
	jae	SHORT $LN1@insertUTF1@2
; Line 1123
	mov	eax, DWORD PTR _string$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, DWORD PTR _len$[ebp]
	lea	edx, DWORD PTR [ecx+ecx+2]
	mov	esi, esp
	push	edx
	mov	eax, DWORD PTR _string$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	DWORD PTR __imp__realloc
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	edx, DWORD PTR _string$[ebp]
	mov	DWORD PTR [edx+4], eax
; Line 1124
	mov	eax, DWORD PTR _string$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _len$[ebp]
	lea	eax, DWORD PTR [ecx+edx+1]
	mov	ecx, DWORD PTR _string$[ebp]
	mov	DWORD PTR [ecx+12], eax
$LN1@insertUTF1@2:
; Line 1129
	mov	eax, DWORD PTR _string$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	sub	ecx, DWORD PTR _point$[ebp]
	lea	edx, DWORD PTR [ecx+ecx+2]
	mov	esi, esp
	push	edx
	mov	eax, DWORD PTR _string$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _point$[ebp]
	lea	eax, DWORD PTR [ecx+edx*2]
	push	eax
	mov	ecx, DWORD PTR _string$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _point$[ebp]
	lea	ecx, DWORD PTR [edx+eax*2]
	mov	edx, DWORD PTR _len$[ebp]
	lea	eax, DWORD PTR [ecx+edx*2]
	push	eax
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1134
	mov	eax, DWORD PTR _len$[ebp]
	shl	eax, 1
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _newbit$[ebp]
	push	ecx
	mov	edx, DWORD PTR _string$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _point$[ebp]
	lea	edx, DWORD PTR [eax+ecx*2]
	push	edx
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1136
	mov	eax, DWORD PTR _string$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, DWORD PTR _len$[ebp]
	mov	edx, DWORD PTR _string$[ebp]
	mov	DWORD PTR [edx+8], ecx
; Line 1138
	mov	eax, DWORD PTR _string$[ebp]
	mov	eax, DWORD PTR [eax+4]
$LN6@insertUTF1@2:
; Line 1139
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_insertUTF16_UTF16 ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _setS
_TEXT	SEGMENT
_string$ = 8						; size = 4
_chars$ = 12						; size = 4
_setS	PROC						; COMDAT
; Line 1142
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1143
	mov	esi, esp
	mov	eax, DWORD PTR _chars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _string$[ebp]
	push	edx
	mov	eax, DWORD PTR _string$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1144
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_setS	ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _appendS
_TEXT	SEGMENT
_string$ = 8						; size = 4
_newbit$ = 12						; size = 4
_appendS PROC						; COMDAT
; Line 1147
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1150
	cmp	DWORD PTR _newbit$[ebp], 0
	je	SHORT $LN2@appendS
	mov	eax, DWORD PTR _newbit$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN2@appendS
	mov	eax, DWORD PTR _newbit$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN2@appendS
	mov	eax, DWORD PTR _newbit$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN3@appendS
$LN2@appendS:
; Line 1152
	mov	eax, DWORD PTR _string$[ebp]
	mov	eax, DWORD PTR [eax+4]
	jmp	SHORT $LN4@appendS
; Line 1154
	jmp	SHORT $LN4@appendS
$LN3@appendS:
; Line 1156
	mov	esi, esp
	mov	eax, DWORD PTR _newbit$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _string$[ebp]
	push	edx
	mov	eax, DWORD PTR _string$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN4@appendS:
; Line 1158
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_appendS ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _insertS
_TEXT	SEGMENT
_string$ = 8						; size = 4
_point$ = 12						; size = 4
_newbit$ = 16						; size = 4
_insertS PROC						; COMDAT
; Line 1161
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1162
	mov	esi, esp
	mov	eax, DWORD PTR _newbit$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _point$[ebp]
	push	edx
	mov	eax, DWORD PTR _string$[ebp]
	push	eax
	mov	ecx, DWORD PTR _string$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	call	edx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1163
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_insertS ENDP
_TEXT	ENDS
EXTRN	_strcmp:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _compare8
_TEXT	SEGMENT
_string$ = 8						; size = 4
_compStr$ = 12						; size = 4
_compare8 PROC						; COMDAT
; Line 1170
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1171
	mov	eax, DWORD PTR _compStr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _string$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	_strcmp
	add	esp, 8
; Line 1172
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_compare8 ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _compareUTF16_8
_TEXT	SEGMENT
_charDiff$ = -20					; size = 4
_ourString$ = -8					; size = 4
_string$ = 8						; size = 4
_compStr$ = 12						; size = 4
_compareUTF16_8 PROC					; COMDAT
; Line 1180
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1184
	mov	eax, DWORD PTR _string$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _ourString$[ebp], ecx
$LN3@compareUTF:
; Line 1186
	mov	eax, DWORD PTR _ourString$[ebp]
	movzx	ecx, WORD PTR [eax]
	test	ecx, ecx
	je	SHORT $LN2@compareUTF
	mov	eax, DWORD PTR _compStr$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN2@compareUTF
; Line 1188
	mov	eax, DWORD PTR _ourString$[ebp]
	movzx	ecx, WORD PTR [eax]
	mov	edx, DWORD PTR _compStr$[ebp]
	movsx	eax, BYTE PTR [edx]
	sub	ecx, eax
	mov	DWORD PTR _charDiff$[ebp], ecx
; Line 1189
	je	SHORT $LN1@compareUTF
; Line 1191
	mov	eax, DWORD PTR _charDiff$[ebp]
	jmp	SHORT $LN4@compareUTF
$LN1@compareUTF:
; Line 1193
	mov	eax, DWORD PTR _ourString$[ebp]
	add	eax, 2
	mov	DWORD PTR _ourString$[ebp], eax
; Line 1194
	mov	eax, DWORD PTR _compStr$[ebp]
	add	eax, 1
	mov	DWORD PTR _compStr$[ebp], eax
; Line 1195
	jmp	SHORT $LN3@compareUTF
$LN2@compareUTF:
; Line 1199
	mov	eax, DWORD PTR _ourString$[ebp]
	movzx	eax, WORD PTR [eax]
	mov	ecx, DWORD PTR _compStr$[ebp]
	movsx	edx, BYTE PTR [ecx]
	sub	eax, edx
$LN4@compareUTF:
; Line 1201
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_compareUTF16_8 ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _compareUTF16_UTF16
_TEXT	SEGMENT
_charDiff$ = -32					; size = 4
_compStr$ = -20						; size = 4
_ourString$ = -8					; size = 4
_string$ = 8						; size = 4
_compStr8$ = 12						; size = 4
_compareUTF16_UTF16 PROC				; COMDAT
; Line 1209
	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1214
	mov	eax, DWORD PTR _string$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _ourString$[ebp], ecx
; Line 1215
	mov	eax, DWORD PTR _compStr8$[ebp]
	mov	DWORD PTR _compStr$[ebp], eax
$LN3@compareUTF@2:
; Line 1217
	mov	eax, DWORD PTR _ourString$[ebp]
	movzx	ecx, WORD PTR [eax]
	test	ecx, ecx
	je	SHORT $LN2@compareUTF@2
	mov	eax, DWORD PTR _compStr$[ebp]
	movzx	ecx, WORD PTR [eax]
	test	ecx, ecx
	je	SHORT $LN2@compareUTF@2
; Line 1219
	mov	eax, DWORD PTR _ourString$[ebp]
	movzx	ecx, WORD PTR [eax]
	mov	edx, DWORD PTR _compStr$[ebp]
	movzx	eax, WORD PTR [edx]
	sub	ecx, eax
	mov	DWORD PTR _charDiff$[ebp], ecx
; Line 1220
	je	SHORT $LN1@compareUTF@2
; Line 1222
	mov	eax, DWORD PTR _charDiff$[ebp]
	jmp	SHORT $LN4@compareUTF@2
$LN1@compareUTF@2:
; Line 1224
	mov	eax, DWORD PTR _ourString$[ebp]
	add	eax, 2
	mov	DWORD PTR _ourString$[ebp], eax
; Line 1225
	mov	eax, DWORD PTR _compStr$[ebp]
	add	eax, 2
	mov	DWORD PTR _compStr$[ebp], eax
; Line 1226
	jmp	SHORT $LN3@compareUTF@2
$LN2@compareUTF@2:
; Line 1230
	mov	eax, DWORD PTR _ourString$[ebp]
	movzx	eax, WORD PTR [eax]
	mov	ecx, DWORD PTR _compStr$[ebp]
	movzx	edx, WORD PTR [ecx]
	sub	eax, edx
$LN4@compareUTF@2:
; Line 1231
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_compareUTF16_UTF16 ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _compareS
_TEXT	SEGMENT
_string$ = 8						; size = 4
_compStr$ = 12						; size = 4
_compareS PROC						; COMDAT
; Line 1239
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1240
	mov	esi, esp
	mov	eax, DWORD PTR _compStr$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _string$[ebp]
	push	edx
	mov	eax, DWORD PTR _string$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1241
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_compareS ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _charAt8
_TEXT	SEGMENT
_string$ = 8						; size = 4
_offset$ = 12						; size = 4
_charAt8 PROC						; COMDAT
; Line 1249
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1250
	mov	eax, DWORD PTR _string$[ebp]
	mov	ecx, DWORD PTR _offset$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jbe	SHORT $LN2@charAt8
; Line 1252
	xor	eax, eax
	jmp	SHORT $LN3@charAt8
; Line 1254
	jmp	SHORT $LN3@charAt8
$LN2@charAt8:
; Line 1256
	mov	eax, DWORD PTR _string$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _offset$[ebp]
	movzx	eax, BYTE PTR [ecx+edx]
$LN3@charAt8:
; Line 1258
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_charAt8 ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _charAtUTF16
_TEXT	SEGMENT
_string$ = 8						; size = 4
_offset$ = 12						; size = 4
_charAtUTF16 PROC					; COMDAT
; Line 1265
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1266
	mov	eax, DWORD PTR _string$[ebp]
	mov	ecx, DWORD PTR _offset$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jbe	SHORT $LN2@charAtUTF1
; Line 1268
	xor	eax, eax
	jmp	SHORT $LN3@charAtUTF1
; Line 1270
	jmp	SHORT $LN3@charAtUTF1
$LN2@charAtUTF1:
; Line 1272
	mov	eax, DWORD PTR _string$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _offset$[ebp]
	movzx	eax, WORD PTR [ecx+edx*2]
$LN3@charAtUTF1:
; Line 1274
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_charAtUTF16 ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _subString8
_TEXT	SEGMENT
_newStr$ = -8						; size = 4
_string$ = 8						; size = 4
_startIndex$ = 12					; size = 4
_endIndex$ = 16						; size = 4
_subString8 PROC					; COMDAT
; Line 1281
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1284
	mov	eax, DWORD PTR _string$[ebp]
	mov	ecx, DWORD PTR _endIndex$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jbe	SHORT $LN1@subString8
; Line 1286
	mov	eax, DWORD PTR _string$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 1
	mov	DWORD PTR _endIndex$[ebp], ecx
$LN1@subString8:
; Line 1288
	mov	eax, DWORD PTR _endIndex$[ebp]
	sub	eax, DWORD PTR _startIndex$[ebp]
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _string$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, DWORD PTR _startIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _string$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _string$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+16]
	call	ecx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _newStr$[ebp], eax
; Line 1290
	mov	eax, DWORD PTR _newStr$[ebp]
; Line 1291
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_subString8 ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _subStringUTF16
_TEXT	SEGMENT
_newStr$ = -8						; size = 4
_string$ = 8						; size = 4
_startIndex$ = 12					; size = 4
_endIndex$ = 16						; size = 4
_subStringUTF16 PROC					; COMDAT
; Line 1298
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1301
	mov	eax, DWORD PTR _string$[ebp]
	mov	ecx, DWORD PTR _endIndex$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jbe	SHORT $LN1@subStringU
; Line 1303
	mov	eax, DWORD PTR _string$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 1
	mov	DWORD PTR _endIndex$[ebp], ecx
$LN1@subStringU:
; Line 1305
	mov	eax, DWORD PTR _endIndex$[ebp]
	sub	eax, DWORD PTR _startIndex$[ebp]
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _string$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _startIndex$[ebp]
	lea	ecx, DWORD PTR [edx+eax*2]
	push	ecx
	mov	edx, DWORD PTR _string$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _string$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _newStr$[ebp], eax
; Line 1307
	mov	eax, DWORD PTR _newStr$[ebp]
; Line 1308
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_subStringUTF16 ENDP
_TEXT	ENDS
EXTRN	__imp__atoi:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _toInt32_8
_TEXT	SEGMENT
_string$ = 8						; size = 4
_toInt32_8 PROC						; COMDAT
; Line 1314
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1315
	mov	esi, esp
	mov	eax, DWORD PTR _string$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	DWORD PTR __imp__atoi
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1316
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_toInt32_8 ENDP
_TEXT	ENDS
EXTRN	__imp__isdigit:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _toInt32_UTF16
_TEXT	SEGMENT
tv85 = -232						; size = 4
_negate$ = -29						; size = 1
_value$ = -20						; size = 4
_input$ = -8						; size = 4
_string$ = 8						; size = 4
_toInt32_UTF16 PROC					; COMDAT
; Line 1322
	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1327
	mov	DWORD PTR _value$[ebp], 0
; Line 1328
	mov	eax, DWORD PTR _string$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _input$[ebp], ecx
; Line 1329
	mov	BYTE PTR _negate$[ebp], 0
; Line 1331
	mov	eax, DWORD PTR _input$[ebp]
	movzx	ecx, WORD PTR [eax]
	cmp	ecx, 45					; 0000002dH
	jne	SHORT $LN5@toInt32_UT
; Line 1333
	mov	BYTE PTR _negate$[ebp], 1
; Line 1334
	mov	eax, DWORD PTR _input$[ebp]
	add	eax, 2
	mov	DWORD PTR _input$[ebp], eax
	jmp	SHORT $LN2@toInt32_UT
$LN5@toInt32_UT:
; Line 1336
	mov	eax, DWORD PTR _input$[ebp]
	movzx	ecx, WORD PTR [eax]
	cmp	ecx, 43					; 0000002bH
	jne	SHORT $LN2@toInt32_UT
; Line 1338
	mov	eax, DWORD PTR _input$[ebp]
	add	eax, 2
	mov	DWORD PTR _input$[ebp], eax
$LN2@toInt32_UT:
; Line 1341
	mov	eax, DWORD PTR _input$[ebp]
	movzx	ecx, WORD PTR [eax]
	test	ecx, ecx
	je	SHORT $LN1@toInt32_UT
	mov	eax, DWORD PTR _input$[ebp]
	movzx	ecx, WORD PTR [eax]
	mov	esi, esp
	push	ecx
	call	DWORD PTR __imp__isdigit
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN1@toInt32_UT
; Line 1343
	mov	eax, DWORD PTR _value$[ebp]
	imul	eax, 10					; 0000000aH
	mov	DWORD PTR _value$[ebp], eax
; Line 1344
	mov	eax, DWORD PTR _input$[ebp]
	movzx	ecx, WORD PTR [eax]
	mov	edx, DWORD PTR _value$[ebp]
	lea	eax, DWORD PTR [edx+ecx-48]
	mov	DWORD PTR _value$[ebp], eax
; Line 1345
	mov	eax, DWORD PTR _input$[ebp]
	add	eax, 2
	mov	DWORD PTR _input$[ebp], eax
; Line 1346
	jmp	SHORT $LN2@toInt32_UT
$LN1@toInt32_UT:
; Line 1348
	movzx	eax, BYTE PTR _negate$[ebp]
	test	eax, eax
	je	SHORT $LN8@toInt32_UT
	mov	ecx, DWORD PTR _value$[ebp]
	neg	ecx
	mov	DWORD PTR tv85[ebp], ecx
	jmp	SHORT $LN9@toInt32_UT
$LN8@toInt32_UT:
	mov	edx, DWORD PTR _value$[ebp]
	mov	DWORD PTR tv85[ebp], edx
$LN9@toInt32_UT:
	mov	eax, DWORD PTR tv85[ebp]
; Line 1349
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 232				; 000000e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_toInt32_UTF16 ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _to8_8
_TEXT	SEGMENT
_string$ = 8						; size = 4
_to8_8	PROC						; COMDAT
; Line 1356
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1357
	mov	eax, DWORD PTR _string$[ebp]
; Line 1358
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_to8_8	ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _to8_UTF16
_TEXT	SEGMENT
tv87 = -232						; size = 4
_c$35344 = -32						; size = 4
_i$ = -20						; size = 4
_newStr$ = -8						; size = 4
_string$ = 8						; size = 4
_to8_UTF16 PROC						; COMDAT
; Line 1366
	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1372
	mov	eax, DWORD PTR _string$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_newRaw8
	add	esp, 4
	mov	DWORD PTR _newStr$[ebp], eax
; Line 1374
	cmp	DWORD PTR _newStr$[ebp], 0
	jne	SHORT $LN4@to8_UTF16
; Line 1376
	xor	eax, eax
	jmp	$LN5@to8_UTF16
$LN4@to8_UTF16:
; Line 1381
	mov	eax, DWORD PTR _string$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 1
	mov	esi, esp
	push	ecx
	call	DWORD PTR __imp__malloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	edx, DWORD PTR _newStr$[ebp]
	mov	DWORD PTR [edx+4], eax
; Line 1382
	mov	eax, DWORD PTR _string$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 1
	mov	edx, DWORD PTR _newStr$[ebp]
	mov	DWORD PTR [edx+12], ecx
; Line 1383
	mov	eax, DWORD PTR _newStr$[ebp]
	mov	ecx, DWORD PTR _string$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
; Line 1388
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@to8_UTF16
$LN2@to8_UTF16:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@to8_UTF16:
	mov	eax, DWORD PTR _string$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jae	SHORT $LN1@to8_UTF16
; Line 1392
	mov	eax, DWORD PTR _string$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _i$[ebp]
	movzx	eax, WORD PTR [ecx+edx*2]
	mov	DWORD PTR _c$35344[ebp], eax
; Line 1394
	cmp	DWORD PTR _c$35344[ebp], 255		; 000000ffH
	jbe	SHORT $LN7@to8_UTF16
	mov	DWORD PTR tv87[ebp], 95			; 0000005fH
	jmp	SHORT $LN8@to8_UTF16
$LN7@to8_UTF16:
	mov	eax, DWORD PTR _c$35344[ebp]
	mov	DWORD PTR tv87[ebp], eax
$LN8@to8_UTF16:
	mov	ecx, DWORD PTR _newStr$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _i$[ebp]
	mov	cl, BYTE PTR tv87[ebp]
	mov	BYTE PTR [edx+eax], cl
; Line 1395
	jmp	SHORT $LN2@to8_UTF16
$LN1@to8_UTF16:
; Line 1399
	mov	eax, DWORD PTR _newStr$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _newStr$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	BYTE PTR [ecx+eax], 0
; Line 1401
	mov	eax, DWORD PTR _newStr$[ebp]
$LN5@to8_UTF16:
; Line 1402
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 232				; 000000e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_to8_UTF16 ENDP
_TEXT	ENDS
END
