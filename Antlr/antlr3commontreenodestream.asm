; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	O:\DXGame\SPENGINE\Antlr\antlr3commontreenodestream.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_antlr3TreeNodeStreamNew
EXTRN	__imp__calloc:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File o:\dxgame\spengine\antlr\antlr3commontreenodestream.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT _antlr3TreeNodeStreamNew
_TEXT	SEGMENT
_stream$ = -8						; size = 4
_antlr3TreeNodeStreamNew PROC				; COMDAT
; Line 89
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 94
	mov	esi, esp
	push	48					; 00000030H
	push	1
	call	DWORD PTR __imp__calloc
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _stream$[ebp], eax
; Line 96
	cmp	DWORD PTR _stream$[ebp], 0
	jne	SHORT $LN1@antlr3Tree
; Line 98
	xor	eax, eax
	jmp	SHORT $LN2@antlr3Tree
$LN1@antlr3Tree:
; Line 103
	mov	eax, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [eax+44], OFFSET _replaceChildren
; Line 104
	mov	eax, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [eax+36], OFFSET _antlr3TreeNodeStreamFree
; Line 106
	mov	eax, DWORD PTR _stream$[ebp]
$LN2@antlr3Tree:
; Line 107
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_antlr3TreeNodeStreamNew ENDP
_TEXT	ENDS
EXTRN	__imp__free:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _antlr3TreeNodeStreamFree
_TEXT	SEGMENT
_stream$ = 8						; size = 4
_antlr3TreeNodeStreamFree PROC				; COMDAT
; Line 111
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 112
	mov	esi, esp
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	DWORD PTR __imp__free
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 113
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_antlr3TreeNodeStreamFree ENDP
_TEXT	ENDS
PUBLIC	_antlr3CommonTreeNodeStreamNew
PUBLIC	_antlr3CommonTreeNodeStreamNewTree
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _antlr3CommonTreeNodeStreamNewTree
_TEXT	SEGMENT
_stream$ = -8						; size = 4
_tree$ = 8						; size = 4
_hint$ = 12						; size = 4
_antlr3CommonTreeNodeStreamNewTree PROC			; COMDAT
; Line 117
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 120
	mov	eax, DWORD PTR _hint$[ebp]
	push	eax
	mov	ecx, DWORD PTR _tree$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	call	_antlr3CommonTreeNodeStreamNew
	add	esp, 8
	mov	DWORD PTR _stream$[ebp], eax
; Line 122
	cmp	DWORD PTR _stream$[ebp], 0
	jne	SHORT $LN1@antlr3Comm
; Line 124
	xor	eax, eax
	jmp	SHORT $LN2@antlr3Comm
$LN1@antlr3Comm:
; Line 126
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR _tree$[ebp]
	mov	DWORD PTR [eax+644], ecx
; Line 128
	mov	eax, DWORD PTR _stream$[ebp]
$LN2@antlr3Comm:
; Line 129
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_antlr3CommonTreeNodeStreamNewTree ENDP
_TEXT	ENDS
PUBLIC	_antlr3CommonTreeNodeStreamNewStream
EXTRN	_antlr3SetCTAPI:PROC
EXTRN	_antlr3VectorNew:PROC
EXTRN	_antlr3IntStreamNew:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _antlr3CommonTreeNodeStreamNewStream
_TEXT	SEGMENT
_stream$ = -8						; size = 4
_inStream$ = 8						; size = 4
_antlr3CommonTreeNodeStreamNewStream PROC		; COMDAT
; Line 133
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 138
	mov	esi, esp
	push	764					; 000002fcH
	push	1
	call	DWORD PTR __imp__calloc
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _stream$[ebp], eax
; Line 140
	cmp	DWORD PTR _stream$[ebp], 0
	jne	SHORT $LN3@antlr3Comm@2
; Line 142
	xor	eax, eax
	jmp	$LN4@antlr3Comm@2
$LN3@antlr3Comm@2:
; Line 151
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR _inStream$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
; Line 155
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR _inStream$[ebp]
	mov	edx, DWORD PTR [ecx+648]
	mov	DWORD PTR [eax+648], edx
; Line 159
	call	_antlr3TreeNodeStreamNew
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [ecx+4], eax
; Line 161
	mov	eax, DWORD PTR _stream$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN2@antlr3Comm@2
; Line 163
	mov	esi, esp
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [ecx+756]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 165
	xor	eax, eax
	jmp	$LN4@antlr3Comm@2
$LN2@antlr3Comm@2:
; Line 170
	call	_antlr3IntStreamNew
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
; Line 172
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cmp	DWORD PTR [ecx+4], 0
	jne	SHORT $LN1@antlr3Comm@2
; Line 174
	mov	esi, esp
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [eax+36]
	call	ecx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 175
	mov	esi, esp
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [ecx+756]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 177
	xor	eax, eax
	jmp	$LN4@antlr3Comm@2
$LN1@antlr3Comm@2:
; Line 182
	mov	eax, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [eax+720], OFFSET _addNavigationNode
; Line 183
	mov	eax, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [eax+736], OFFSET _hasUniqueNavigationNodes
; Line 184
	mov	eax, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [eax+724], OFFSET _newDownNode
; Line 185
	mov	eax, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [eax+728], OFFSET _newUpNode
; Line 186
	mov	eax, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [eax+752], OFFSET _reset
; Line 187
	mov	eax, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [eax+744], OFFSET _push
; Line 188
	mov	eax, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [eax+748], OFFSET _pop
; Line 189
	mov	eax, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [eax+740], OFFSET _getLookaheadSize
; Line 191
	mov	eax, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [eax+756], OFFSET _antlr3CommonTreeNodeStreamFree
; Line 195
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+16], OFFSET _getTreeAdaptor
; Line 196
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+12], OFFSET _getTreeSource
; Line 197
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+8], OFFSET __LT
; Line 198
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+20], OFFSET _setUniqueNavigationNodes
; Line 199
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+24], OFFSET _toString
; Line 200
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+28], OFFSET _toStringSS
; Line 201
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+32], OFFSET _toStringWork
; Line 202
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+40], OFFSET _get
; Line 206
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+20], OFFSET _consume
; Line 207
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+32], OFFSET _tindex
; Line 208
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+24], OFFSET __LA
; Line 209
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+28], OFFSET _mark
; Line 210
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+44], OFFSET _release
; Line 211
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+36], OFFSET _rewindMark
; Line 212
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+40], OFFSET _rewindLast
; Line 213
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+48], OFFSET _seek
; Line 214
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+52], OFFSET _size
; Line 218
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx], 4
; Line 219
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+8], ecx
; Line 223
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [ecx], edx
; Line 227
	mov	eax, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [eax], 0
; Line 228
	mov	eax, DWORD PTR _stream$[ebp]
	mov	BYTE PTR [eax+640], 0
; Line 229
	mov	eax, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [eax+692], 0
; Line 230
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR _inStream$[ebp]
	mov	edx, DWORD PTR [ecx+652]
	mov	DWORD PTR [eax+652], edx
; Line 234
	push	100					; 00000064H
	call	_antlr3VectorNew
	add	esp, 4
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [ecx+636], eax
; Line 235
	mov	eax, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [eax+656], -1
; Line 242
	mov	eax, DWORD PTR _stream$[ebp]
	add	eax, 168				; 000000a8H
	push	eax
	call	_antlr3SetCTAPI
	add	esp, 4
; Line 243
	mov	eax, DWORD PTR _stream$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	call	_antlr3SetCTAPI
	add	esp, 4
; Line 244
	mov	eax, DWORD PTR _stream$[ebp]
	add	eax, 324				; 00000144H
	push	eax
	call	_antlr3SetCTAPI
	add	esp, 4
; Line 245
	mov	eax, DWORD PTR _stream$[ebp]
	add	eax, 480				; 000001e0H
	push	eax
	call	_antlr3SetCTAPI
	add	esp, 4
; Line 247
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR _inStream$[ebp]
	mov	edx, DWORD PTR [ecx+180]
	mov	DWORD PTR [eax+180], edx
; Line 248
	mov	eax, DWORD PTR _inStream$[ebp]
	mov	ecx, DWORD PTR [eax+180]
	mov	edx, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
; Line 249
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR _inStream$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR [eax+24], edx
; Line 250
	mov	eax, DWORD PTR _inStream$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
; Line 251
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR _inStream$[ebp]
	mov	edx, DWORD PTR [ecx+336]
	mov	DWORD PTR [eax+336], edx
; Line 252
	mov	eax, DWORD PTR _inStream$[ebp]
	mov	ecx, DWORD PTR [eax+336]
	mov	edx, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
; Line 253
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR _inStream$[ebp]
	mov	edx, DWORD PTR [ecx+492]
	mov	DWORD PTR [eax+492], edx
; Line 254
	mov	eax, DWORD PTR _inStream$[ebp]
	mov	ecx, DWORD PTR [eax+492]
	mov	edx, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
; Line 258
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR _inStream$[ebp]
	mov	edx, DWORD PTR [ecx+644]
	mov	DWORD PTR [eax+644], edx
; Line 265
	mov	eax, DWORD PTR _stream$[ebp]
	mov	BYTE PTR [eax+760], 1
; Line 266
	mov	eax, DWORD PTR _stream$[ebp]
$LN4@antlr3Comm@2:
; Line 267
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_antlr3CommonTreeNodeStreamNewStream ENDP
_TEXT	ENDS
PUBLIC	??_C@_07DNODLGKM@INVALID?$AA@			; `string'
PUBLIC	??_C@_03KPJEKKJC@EOF?$AA@			; `string'
PUBLIC	??_C@_04FANAOELO@DOWN?$AA@			; `string'
PUBLIC	??_C@_02NAHCJHOC@UP?$AA@			; `string'
EXTRN	_antlr3CommonTokenNew:PROC
EXTRN	_antlr3StackNew:PROC
EXTRN	_ANTLR3_TREE_ADAPTORNew:PROC
;	COMDAT ??_C@_07DNODLGKM@INVALID?$AA@
CONST	SEGMENT
??_C@_07DNODLGKM@INVALID?$AA@ DB 'INVALID', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03KPJEKKJC@EOF?$AA@
CONST	SEGMENT
??_C@_03KPJEKKJC@EOF?$AA@ DB 'EOF', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04FANAOELO@DOWN?$AA@
CONST	SEGMENT
??_C@_04FANAOELO@DOWN?$AA@ DB 'DOWN', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02NAHCJHOC@UP?$AA@
CONST	SEGMENT
??_C@_02NAHCJHOC@UP?$AA@ DB 'UP', 00H			; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT _antlr3CommonTreeNodeStreamNew
_TEXT	SEGMENT
_token$ = -20						; size = 4
_stream$ = -8						; size = 4
_strFactory$ = 8					; size = 4
_hint$ = 12						; size = 4
_antlr3CommonTreeNodeStreamNew PROC			; COMDAT
; Line 271
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 277
	mov	esi, esp
	push	764					; 000002fcH
	push	1
	call	DWORD PTR __imp__calloc
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _stream$[ebp], eax
; Line 279
	cmp	DWORD PTR _stream$[ebp], 0
	jne	SHORT $LN5@antlr3Comm@3
; Line 281
	xor	eax, eax
	jmp	$LN6@antlr3Comm@3
$LN5@antlr3Comm@3:
; Line 286
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR _strFactory$[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 290
	mov	eax, DWORD PTR _strFactory$[ebp]
	push	eax
	call	_ANTLR3_TREE_ADAPTORNew
	add	esp, 4
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [ecx+648], eax
; Line 292
	mov	eax, DWORD PTR _stream$[ebp]
	cmp	DWORD PTR [eax+648], 0
	jne	SHORT $LN4@antlr3Comm@3
; Line 294
	mov	esi, esp
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [ecx+756]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 295
	xor	eax, eax
	jmp	$LN6@antlr3Comm@3
$LN4@antlr3Comm@3:
; Line 300
	call	_antlr3TreeNodeStreamNew
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [ecx+4], eax
; Line 302
	mov	eax, DWORD PTR _stream$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN3@antlr3Comm@3
; Line 304
	mov	esi, esp
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax+648]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR [edx+648]
	mov	ecx, DWORD PTR [eax+168]
	call	ecx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 305
	mov	esi, esp
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [ecx+756]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 307
	xor	eax, eax
	jmp	$LN6@antlr3Comm@3
$LN3@antlr3Comm@3:
; Line 312
	call	_antlr3IntStreamNew
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
; Line 314
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cmp	DWORD PTR [ecx+4], 0
	jne	SHORT $LN2@antlr3Comm@3
; Line 316
	mov	esi, esp
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax+648]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR [edx+648]
	mov	ecx, DWORD PTR [eax+168]
	call	ecx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 317
	mov	esi, esp
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [eax+36]
	call	ecx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 318
	mov	esi, esp
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [ecx+756]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 320
	xor	eax, eax
	jmp	$LN6@antlr3Comm@3
$LN2@antlr3Comm@3:
; Line 325
	mov	eax, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [eax+720], OFFSET _addNavigationNode
; Line 326
	mov	eax, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [eax+736], OFFSET _hasUniqueNavigationNodes
; Line 327
	mov	eax, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [eax+724], OFFSET _newDownNode
; Line 328
	mov	eax, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [eax+728], OFFSET _newUpNode
; Line 329
	mov	eax, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [eax+752], OFFSET _reset
; Line 330
	mov	eax, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [eax+744], OFFSET _push
; Line 331
	mov	eax, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [eax+748], OFFSET _pop
; Line 333
	mov	eax, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [eax+756], OFFSET _antlr3CommonTreeNodeStreamFree
; Line 337
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+16], OFFSET _getTreeAdaptor
; Line 338
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+12], OFFSET _getTreeSource
; Line 339
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+8], OFFSET __LT
; Line 340
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+20], OFFSET _setUniqueNavigationNodes
; Line 341
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+24], OFFSET _toString
; Line 342
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+28], OFFSET _toStringSS
; Line 343
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+32], OFFSET _toStringWork
; Line 344
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+40], OFFSET _get
; Line 348
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+20], OFFSET _consume
; Line 349
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+32], OFFSET _tindex
; Line 350
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+24], OFFSET __LA
; Line 351
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+28], OFFSET _mark
; Line 352
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+44], OFFSET _release
; Line 353
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+36], OFFSET _rewindMark
; Line 354
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+40], OFFSET _rewindLast
; Line 355
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+48], OFFSET _seek
; Line 356
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+52], OFFSET _size
; Line 360
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx], 4
; Line 361
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+8], ecx
; Line 365
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [ecx], edx
; Line 369
	mov	eax, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [eax], 0
; Line 370
	mov	eax, DWORD PTR _stream$[ebp]
	mov	BYTE PTR [eax+640], 0
; Line 371
	mov	eax, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [eax+692], 0
; Line 372
	push	10					; 0000000aH
	call	_antlr3StackNew
	add	esp, 4
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [ecx+652], eax
; Line 376
	cmp	DWORD PTR _hint$[ebp], 0
	jne	SHORT $LN1@antlr3Comm@3
; Line 378
	mov	DWORD PTR _hint$[ebp], 100		; 00000064H
$LN1@antlr3Comm@3:
; Line 380
	mov	eax, DWORD PTR _hint$[ebp]
	push	eax
	call	_antlr3VectorNew
	add	esp, 4
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [ecx+636], eax
; Line 381
	mov	eax, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [eax+656], -1
; Line 385
	mov	eax, DWORD PTR _stream$[ebp]
	add	eax, 168				; 000000a8H
	push	eax
	call	_antlr3SetCTAPI
	add	esp, 4
; Line 386
	mov	eax, DWORD PTR _stream$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	call	_antlr3SetCTAPI
	add	esp, 4
; Line 387
	mov	eax, DWORD PTR _stream$[ebp]
	add	eax, 324				; 00000144H
	push	eax
	call	_antlr3SetCTAPI
	add	esp, 4
; Line 388
	mov	eax, DWORD PTR _stream$[ebp]
	add	eax, 480				; 000001e0H
	push	eax
	call	_antlr3SetCTAPI
	add	esp, 4
; Line 390
	push	3
	call	_antlr3CommonTokenNew
	add	esp, 4
	mov	DWORD PTR _token$[ebp], eax
; Line 391
	mov	eax, DWORD PTR _token$[ebp]
	mov	ecx, DWORD PTR _strFactory$[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 392
	mov	eax, DWORD PTR _token$[ebp]
	mov	DWORD PTR [eax+44], 1
; Line 393
	mov	eax, DWORD PTR _token$[ebp]
	mov	DWORD PTR [eax+48], OFFSET ??_C@_02NAHCJHOC@UP?$AA@
; Line 394
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR _token$[ebp]
	mov	DWORD PTR [eax+180], ecx
; Line 396
	push	2
	call	_antlr3CommonTokenNew
	add	esp, 4
	mov	DWORD PTR _token$[ebp], eax
; Line 397
	mov	eax, DWORD PTR _token$[ebp]
	mov	ecx, DWORD PTR _strFactory$[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 398
	mov	eax, DWORD PTR _token$[ebp]
	mov	DWORD PTR [eax+44], 1
; Line 399
	mov	eax, DWORD PTR _token$[ebp]
	mov	DWORD PTR [eax+48], OFFSET ??_C@_04FANAOELO@DOWN?$AA@
; Line 400
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR _token$[ebp]
	mov	DWORD PTR [eax+24], ecx
; Line 402
	push	-1
	call	_antlr3CommonTokenNew
	add	esp, 4
	mov	DWORD PTR _token$[ebp], eax
; Line 403
	mov	eax, DWORD PTR _token$[ebp]
	mov	ecx, DWORD PTR _strFactory$[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 404
	mov	eax, DWORD PTR _token$[ebp]
	mov	DWORD PTR [eax+44], 1
; Line 405
	mov	eax, DWORD PTR _token$[ebp]
	mov	DWORD PTR [eax+48], OFFSET ??_C@_03KPJEKKJC@EOF?$AA@
; Line 406
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR _token$[ebp]
	mov	DWORD PTR [eax+336], ecx
; Line 408
	push	0
	call	_antlr3CommonTokenNew
	add	esp, 4
	mov	DWORD PTR _token$[ebp], eax
; Line 409
	mov	eax, DWORD PTR _token$[ebp]
	mov	ecx, DWORD PTR _strFactory$[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 410
	mov	eax, DWORD PTR _token$[ebp]
	mov	DWORD PTR [eax+44], 1
; Line 411
	mov	eax, DWORD PTR _token$[ebp]
	mov	DWORD PTR [eax+48], OFFSET ??_C@_07DNODLGKM@INVALID?$AA@
; Line 412
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR _token$[ebp]
	mov	DWORD PTR [eax+492], ecx
; Line 415
	mov	eax, DWORD PTR _stream$[ebp]
$LN6@antlr3Comm@3:
; Line 416
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_antlr3CommonTreeNodeStreamNew ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _antlr3CommonTreeNodeStreamFree
_TEXT	SEGMENT
_ctns$ = 8						; size = 4
_antlr3CommonTreeNodeStreamFree PROC			; COMDAT
; Line 421
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 427
	mov	eax, DWORD PTR _ctns$[ebp]
	movzx	ecx, BYTE PTR [eax+760]
	cmp	ecx, 1
	je	$LN3@antlr3Comm@4
; Line 429
	mov	esi, esp
	mov	eax, DWORD PTR _ctns$[ebp]
	mov	ecx, DWORD PTR [eax+648]
	push	ecx
	mov	edx, DWORD PTR _ctns$[ebp]
	mov	eax, DWORD PTR [edx+648]
	mov	ecx, DWORD PTR [eax+168]
	call	ecx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 431
	mov	eax, DWORD PTR _ctns$[ebp]
	cmp	DWORD PTR [eax+652], 0
	je	SHORT $LN2@antlr3Comm@4
; Line 433
	mov	esi, esp
	mov	eax, DWORD PTR _ctns$[ebp]
	mov	ecx, DWORD PTR [eax+652]
	push	ecx
	mov	edx, DWORD PTR _ctns$[ebp]
	mov	eax, DWORD PTR [edx+652]
	mov	ecx, DWORD PTR [eax+8]
	call	ecx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@antlr3Comm@4:
; Line 436
	mov	esi, esp
	mov	eax, DWORD PTR _ctns$[ebp]
	mov	ecx, DWORD PTR [eax+492]
	push	ecx
	call	DWORD PTR __imp__free
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 437
	mov	esi, esp
	mov	eax, DWORD PTR _ctns$[ebp]
	mov	ecx, DWORD PTR [eax+336]
	push	ecx
	call	DWORD PTR __imp__free
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 438
	mov	esi, esp
	mov	eax, DWORD PTR _ctns$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	call	DWORD PTR __imp__free
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 439
	mov	esi, esp
	mov	eax, DWORD PTR _ctns$[ebp]
	mov	ecx, DWORD PTR [eax+180]
	push	ecx
	call	DWORD PTR __imp__free
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@antlr3Comm@4:
; Line 442
	mov	eax, DWORD PTR _ctns$[ebp]
	cmp	DWORD PTR [eax+636], 0
	je	SHORT $LN1@antlr3Comm@4
; Line 444
	mov	esi, esp
	mov	eax, DWORD PTR _ctns$[ebp]
	mov	ecx, DWORD PTR [eax+636]
	push	ecx
	mov	edx, DWORD PTR _ctns$[ebp]
	mov	eax, DWORD PTR [edx+636]
	mov	ecx, DWORD PTR [eax+144]
	call	ecx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@antlr3Comm@4:
; Line 446
	mov	eax, DWORD PTR _ctns$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	esi, esp
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _ctns$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+60]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 447
	mov	esi, esp
	mov	eax, DWORD PTR _ctns$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _ctns$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [eax+36]
	call	ecx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 450
	mov	esi, esp
	mov	eax, DWORD PTR _ctns$[ebp]
	push	eax
	call	DWORD PTR __imp__free
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 451
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_antlr3CommonTreeNodeStreamFree ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _reset
_TEXT	SEGMENT
_ctns$ = 8						; size = 4
_reset	PROC						; COMDAT
; Line 527
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 528
	mov	eax, DWORD PTR _ctns$[ebp]
	cmp	DWORD PTR [eax+656], -1
	je	SHORT $LN3@reset
; Line 530
	mov	eax, DWORD PTR _ctns$[ebp]
	mov	DWORD PTR [eax+656], 0
$LN3@reset:
; Line 532
	mov	eax, DWORD PTR _ctns$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+12], 0
; Line 539
	mov	eax, DWORD PTR _ctns$[ebp]
	movzx	ecx, BYTE PTR [eax+760]
	cmp	ecx, 1
	je	SHORT $LN4@reset
; Line 541
	mov	eax, DWORD PTR _ctns$[ebp]
	cmp	DWORD PTR [eax+652], 0
	je	SHORT $LN4@reset
; Line 543
	mov	esi, esp
	mov	eax, DWORD PTR _ctns$[ebp]
	mov	ecx, DWORD PTR [eax+652]
	push	ecx
	mov	edx, DWORD PTR _ctns$[ebp]
	mov	eax, DWORD PTR [edx+652]
	mov	ecx, DWORD PTR [eax+8]
	call	ecx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 544
	push	10					; 0000000aH
	call	_antlr3StackNew
	add	esp, 4
	mov	ecx, DWORD PTR _ctns$[ebp]
	mov	DWORD PTR [ecx+652], eax
$LN4@reset:
; Line 547
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_reset	ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __LT
_TEXT	SEGMENT
_tns$ = 8						; size = 4
_k$ = 12						; size = 4
__LT	PROC						; COMDAT
; Line 578
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 579
	mov	eax, DWORD PTR _tns$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx+656], -1
	jne	SHORT $LN5@LT
; Line 581
	mov	eax, DWORD PTR _tns$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_fillBufferRoot
	add	esp, 4
$LN5@LT:
; Line 584
	cmp	DWORD PTR _k$[ebp], 0
	jge	SHORT $LN4@LT
; Line 586
	mov	eax, DWORD PTR _k$[ebp]
	neg	eax
	push	eax
	mov	ecx, DWORD PTR _tns$[ebp]
	push	ecx
	call	_LB
	add	esp, 8
	jmp	$LN6@LT
	jmp	SHORT $LN3@LT
$LN4@LT:
; Line 588
	cmp	DWORD PTR _k$[ebp], 0
	jne	SHORT $LN3@LT
; Line 590
	mov	eax, DWORD PTR _tns$[ebp]
	mov	eax, DWORD PTR [eax]
	add	eax, 508				; 000001fcH
	jmp	SHORT $LN6@LT
$LN3@LT:
; Line 595
	mov	eax, DWORD PTR _tns$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+656]
	mov	eax, DWORD PTR _k$[ebp]
	lea	ecx, DWORD PTR [edx+eax-1]
	mov	edx, DWORD PTR _tns$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR [eax+636]
	cmp	ecx, DWORD PTR [edx+4]
	jl	SHORT $LN1@LT
; Line 597
	mov	eax, DWORD PTR _tns$[ebp]
	mov	eax, DWORD PTR [eax]
	add	eax, 352				; 00000160H
	jmp	SHORT $LN6@LT
$LN1@LT:
; Line 600
	mov	eax, DWORD PTR _tns$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+656]
	mov	eax, DWORD PTR _k$[ebp]
	lea	ecx, DWORD PTR [edx+eax-1]
	mov	esi, esp
	push	ecx
	mov	edx, DWORD PTR _tns$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+636]
	push	ecx
	mov	edx, DWORD PTR _tns$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+636]
	mov	edx, DWORD PTR [ecx+152]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN6@LT:
; Line 601
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__LT	ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _fillBufferRoot
_TEXT	SEGMENT
_ctns$ = 8						; size = 4
_fillBufferRoot PROC					; COMDAT
; Line 461
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 465
	mov	eax, DWORD PTR _ctns$[ebp]
	mov	ecx, DWORD PTR [eax+644]
	push	ecx
	mov	edx, DWORD PTR _ctns$[ebp]
	push	edx
	call	_fillBuffer
	add	esp, 8
; Line 466
	mov	eax, DWORD PTR _ctns$[ebp]
	mov	DWORD PTR [eax+656], 0
; Line 467
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_fillBufferRoot ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _fillBuffer
_TEXT	SEGMENT
_c$ = -32						; size = 4
_nCount$ = -20						; size = 4
_nilNode$ = -5						; size = 1
_ctns$ = 8						; size = 4
_t$ = 12						; size = 4
_fillBuffer PROC					; COMDAT
; Line 475
	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 480
	mov	esi, esp
	mov	eax, DWORD PTR _t$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctns$[ebp]
	mov	edx, DWORD PTR [ecx+648]
	push	edx
	mov	eax, DWORD PTR _ctns$[ebp]
	mov	ecx, DWORD PTR [eax+648]
	mov	edx, DWORD PTR [ecx+48]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	BYTE PTR _nilNode$[ebp], al
; Line 485
	movzx	eax, BYTE PTR _nilNode$[ebp]
	test	eax, eax
	jne	SHORT $LN6@fillBuffer
; Line 487
	mov	esi, esp
	push	0
	mov	eax, DWORD PTR _t$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctns$[ebp]
	mov	edx, DWORD PTR [ecx+636]
	push	edx
	mov	eax, DWORD PTR _ctns$[ebp]
	mov	ecx, DWORD PTR [eax+636]
	mov	edx, DWORD PTR [ecx+168]
	call	edx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN6@fillBuffer:
; Line 493
	mov	esi, esp
	mov	eax, DWORD PTR _t$[ebp]
	push	eax
	mov	ecx, DWORD PTR _t$[ebp]
	mov	edx, DWORD PTR [ecx+68]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _nCount$[ebp], eax
; Line 495
	movzx	eax, BYTE PTR _nilNode$[ebp]
	test	eax, eax
	jne	SHORT $LN5@fillBuffer
	cmp	DWORD PTR _nCount$[ebp], 0
	jbe	SHORT $LN5@fillBuffer
; Line 497
	mov	esi, esp
	push	2
	mov	eax, DWORD PTR _ctns$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctns$[ebp]
	mov	edx, DWORD PTR [ecx+720]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN5@fillBuffer:
; Line 504
	mov	DWORD PTR _c$[ebp], 0
	jmp	SHORT $LN4@fillBuffer
$LN3@fillBuffer:
	mov	eax, DWORD PTR _c$[ebp]
	add	eax, 1
	mov	DWORD PTR _c$[ebp], eax
$LN4@fillBuffer:
	mov	eax, DWORD PTR _c$[ebp]
	cmp	eax, DWORD PTR _nCount$[ebp]
	jae	SHORT $LN2@fillBuffer
; Line 506
	mov	esi, esp
	mov	eax, DWORD PTR _c$[ebp]
	push	eax
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctns$[ebp]
	mov	eax, DWORD PTR [edx+648]
	push	eax
	mov	ecx, DWORD PTR _ctns$[ebp]
	mov	edx, DWORD PTR [ecx+648]
	mov	eax, DWORD PTR [edx+104]
	call	eax
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	mov	ecx, DWORD PTR _ctns$[ebp]
	push	ecx
	call	_fillBuffer
	add	esp, 8
; Line 507
	jmp	SHORT $LN3@fillBuffer
$LN2@fillBuffer:
; Line 512
	movzx	eax, BYTE PTR _nilNode$[ebp]
	test	eax, eax
	jne	SHORT $LN7@fillBuffer
	cmp	DWORD PTR _nCount$[ebp], 0
	jbe	SHORT $LN7@fillBuffer
; Line 514
	mov	esi, esp
	push	3
	mov	eax, DWORD PTR _ctns$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctns$[ebp]
	mov	edx, DWORD PTR [ecx+720]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN7@fillBuffer:
; Line 516
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_fillBuffer ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _LB
_TEXT	SEGMENT
_tns$ = 8						; size = 4
_k$ = 12						; size = 4
_LB	PROC						; COMDAT
; Line 552
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 553
	cmp	DWORD PTR _k$[ebp], 0
	jne	SHORT $LN2@LB
; Line 555
	mov	eax, DWORD PTR _tns$[ebp]
	mov	eax, DWORD PTR [eax]
	add	eax, 508				; 000001fcH
	jmp	SHORT $LN3@LB
$LN2@LB:
; Line 558
	mov	eax, DWORD PTR _tns$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+656]
	sub	edx, DWORD PTR _k$[ebp]
	jns	SHORT $LN1@LB
; Line 560
	mov	eax, DWORD PTR _tns$[ebp]
	mov	eax, DWORD PTR [eax]
	add	eax, 508				; 000001fcH
	jmp	SHORT $LN3@LB
$LN1@LB:
; Line 563
	mov	eax, DWORD PTR _tns$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+656]
	sub	edx, DWORD PTR _k$[ebp]
	mov	esi, esp
	push	edx
	mov	eax, DWORD PTR _tns$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+636]
	push	edx
	mov	eax, DWORD PTR _tns$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+636]
	mov	eax, DWORD PTR [edx+152]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@LB:
; Line 564
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_LB	ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _getTreeSource
_TEXT	SEGMENT
_tns$ = 8						; size = 4
_getTreeSource PROC					; COMDAT
; Line 608
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 609
	mov	eax, DWORD PTR _tns$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR [ecx+644]
; Line 610
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_getTreeSource ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _consume
_TEXT	SEGMENT
_ctns$ = -20						; size = 4
_tns$ = -8						; size = 4
_is$ = 8						; size = 4
_consume PROC						; COMDAT
; Line 616
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 620
	mov	eax, DWORD PTR _is$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _tns$[ebp], ecx
; Line 621
	mov	eax, DWORD PTR _tns$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _ctns$[ebp], ecx
; Line 623
	mov	eax, DWORD PTR _ctns$[ebp]
	cmp	DWORD PTR [eax+656], -1
	jne	SHORT $LN1@consume
; Line 625
	mov	eax, DWORD PTR _ctns$[ebp]
	push	eax
	call	_fillBufferRoot
	add	esp, 4
$LN1@consume:
; Line 627
	mov	eax, DWORD PTR _ctns$[ebp]
	mov	ecx, DWORD PTR [eax+656]
	add	ecx, 1
	mov	edx, DWORD PTR _ctns$[ebp]
	mov	DWORD PTR [edx+656], ecx
; Line 628
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_consume ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __LA
_TEXT	SEGMENT
_t$ = -20						; size = 4
_tns$ = -8						; size = 4
_is$ = 8						; size = 4
_i$ = 12						; size = 4
__LA	PROC						; COMDAT
; Line 632
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 636
	mov	eax, DWORD PTR _is$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _tns$[ebp], ecx
; Line 640
	mov	esi, esp
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _tns$[ebp]
	push	ecx
	mov	edx, DWORD PTR _tns$[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _t$[ebp], eax
; Line 642
	cmp	DWORD PTR _t$[ebp], 0
	jne	SHORT $LN1@LA
; Line 644
	xor	eax, eax
	jmp	SHORT $LN2@LA
$LN1@LA:
; Line 649
	mov	esi, esp
	mov	eax, DWORD PTR _t$[ebp]
	push	eax
	mov	ecx, DWORD PTR _t$[ebp]
	mov	edx, DWORD PTR [ecx+80]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@LA:
; Line 650
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__LA	ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _mark
_TEXT	SEGMENT
_ctns$ = -20						; size = 4
_tns$ = -8						; size = 4
_is$ = 8						; size = 4
_mark	PROC						; COMDAT
; Line 657
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 661
	mov	eax, DWORD PTR _is$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _tns$[ebp], ecx
; Line 662
	mov	eax, DWORD PTR _tns$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _ctns$[ebp], ecx
; Line 664
	mov	eax, DWORD PTR _tns$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx+656], -1
	jne	SHORT $LN1@mark
; Line 666
	mov	eax, DWORD PTR _tns$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_fillBufferRoot
	add	esp, 4
$LN1@mark:
; Line 671
	mov	eax, DWORD PTR _ctns$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	esi, esp
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _ctns$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+32]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _ctns$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+12], eax
; Line 673
	mov	eax, DWORD PTR _ctns$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+12]
; Line 674
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_mark	ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _release
_TEXT	SEGMENT
_is$ = 8						; size = 4
_marker$ = 12						; size = 4
_release PROC						; COMDAT
; Line 678
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 679
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_release ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _rewindMark
_TEXT	SEGMENT
_is$ = 8						; size = 4
_marker$ = 12						; size = 4
_rewindMark PROC					; COMDAT
; Line 689
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 690
	mov	esi, esp
	mov	eax, DWORD PTR _marker$[ebp]
	push	eax
	mov	ecx, DWORD PTR _is$[ebp]
	push	ecx
	mov	edx, DWORD PTR _is$[ebp]
	mov	eax, DWORD PTR [edx+48]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 691
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_rewindMark ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _rewindLast
_TEXT	SEGMENT
_is$ = 8						; size = 4
_rewindLast PROC					; COMDAT
; Line 695
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 696
	mov	esi, esp
	mov	eax, DWORD PTR _is$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _is$[ebp]
	push	edx
	mov	eax, DWORD PTR _is$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 697
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_rewindLast ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _seek
_TEXT	SEGMENT
_ctns$ = -20						; size = 4
_tns$ = -8						; size = 4
_is$ = 8						; size = 4
_index$ = 12						; size = 4
_seek	PROC						; COMDAT
; Line 704
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 708
	mov	eax, DWORD PTR _is$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _tns$[ebp], ecx
; Line 709
	mov	eax, DWORD PTR _tns$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _ctns$[ebp], ecx
; Line 711
	mov	eax, DWORD PTR _ctns$[ebp]
	mov	ecx, DWORD PTR _index$[ebp]
	mov	DWORD PTR [eax+656], ecx
; Line 712
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_seek	ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _tindex
_TEXT	SEGMENT
_ctns$ = -20						; size = 4
_tns$ = -8						; size = 4
_is$ = 8						; size = 4
_tindex	PROC						; COMDAT
; Line 716
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 720
	mov	eax, DWORD PTR _is$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _tns$[ebp], ecx
; Line 721
	mov	eax, DWORD PTR _tns$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _ctns$[ebp], ecx
; Line 723
	mov	eax, DWORD PTR _ctns$[ebp]
	mov	eax, DWORD PTR [eax+656]
; Line 724
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_tindex	ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _size
_TEXT	SEGMENT
_ctns$ = -20						; size = 4
_tns$ = -8						; size = 4
_is$ = 8						; size = 4
_size	PROC						; COMDAT
; Line 732
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 736
	mov	eax, DWORD PTR _is$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _tns$[ebp], ecx
; Line 737
	mov	eax, DWORD PTR _tns$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _ctns$[ebp], ecx
; Line 739
	mov	eax, DWORD PTR _ctns$[ebp]
	cmp	DWORD PTR [eax+656], -1
	jne	SHORT $LN1@size
; Line 741
	mov	eax, DWORD PTR _ctns$[ebp]
	push	eax
	call	_fillBufferRoot
	add	esp, 4
$LN1@size:
; Line 744
	mov	esi, esp
	mov	eax, DWORD PTR _ctns$[ebp]
	mov	ecx, DWORD PTR [eax+636]
	push	ecx
	mov	edx, DWORD PTR _ctns$[ebp]
	mov	eax, DWORD PTR [edx+636]
	mov	ecx, DWORD PTR [eax+176]
	call	ecx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 745
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_size	ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _addNavigationNode
_TEXT	SEGMENT
_node$ = -8						; size = 4
_ctns$ = 8						; size = 4
_ttype$ = 12						; size = 4
_addNavigationNode PROC					; COMDAT
; Line 753
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 756
	mov	DWORD PTR _node$[ebp], 0
; Line 758
	cmp	DWORD PTR _ttype$[ebp], 2
	jne	SHORT $LN6@addNavigat
; Line 760
	mov	esi, esp
	mov	eax, DWORD PTR _ctns$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctns$[ebp]
	mov	edx, DWORD PTR [ecx+736]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	movzx	eax, al
	cmp	eax, 1
	jne	SHORT $LN5@addNavigat
; Line 762
	mov	esi, esp
	mov	eax, DWORD PTR _ctns$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctns$[ebp]
	mov	edx, DWORD PTR [ecx+724]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _node$[ebp], eax
; Line 764
	jmp	SHORT $LN4@addNavigat
$LN5@addNavigat:
; Line 766
	mov	eax, DWORD PTR _ctns$[ebp]
	add	eax, 40					; 00000028H
	mov	DWORD PTR _node$[ebp], eax
$LN4@addNavigat:
; Line 769
	jmp	SHORT $LN3@addNavigat
$LN6@addNavigat:
; Line 771
	mov	esi, esp
	mov	eax, DWORD PTR _ctns$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctns$[ebp]
	mov	edx, DWORD PTR [ecx+736]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	movzx	eax, al
	cmp	eax, 1
	jne	SHORT $LN2@addNavigat
; Line 773
	mov	esi, esp
	mov	eax, DWORD PTR _ctns$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctns$[ebp]
	mov	edx, DWORD PTR [ecx+728]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _node$[ebp], eax
; Line 775
	jmp	SHORT $LN3@addNavigat
$LN2@addNavigat:
; Line 777
	mov	eax, DWORD PTR _ctns$[ebp]
	add	eax, 196				; 000000c4H
	mov	DWORD PTR _node$[ebp], eax
$LN3@addNavigat:
; Line 783
	mov	esi, esp
	push	0
	mov	eax, DWORD PTR _node$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctns$[ebp]
	mov	edx, DWORD PTR [ecx+636]
	push	edx
	mov	eax, DWORD PTR _ctns$[ebp]
	mov	ecx, DWORD PTR [eax+636]
	mov	edx, DWORD PTR [ecx+168]
	call	edx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 784
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_addNavigationNode ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _getTreeAdaptor
_TEXT	SEGMENT
_tns$ = 8						; size = 4
_getTreeAdaptor PROC					; COMDAT
; Line 789
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 790
	mov	eax, DWORD PTR _tns$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR [ecx+648]
; Line 791
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_getTreeAdaptor ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _hasUniqueNavigationNodes
_TEXT	SEGMENT
_ctns$ = 8						; size = 4
_hasUniqueNavigationNodes PROC				; COMDAT
; Line 795
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 796
	mov	eax, DWORD PTR _ctns$[ebp]
	mov	al, BYTE PTR [eax+640]
; Line 797
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_hasUniqueNavigationNodes ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _setUniqueNavigationNodes
_TEXT	SEGMENT
_tns$ = 8						; size = 4
_uniqueNavigationNodes$ = 12				; size = 1
_setUniqueNavigationNodes PROC				; COMDAT
; Line 801
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 802
	mov	eax, DWORD PTR _tns$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	dl, BYTE PTR _uniqueNavigationNodes$[ebp]
	mov	BYTE PTR [ecx+640], dl
; Line 803
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_setUniqueNavigationNodes ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _toString
_TEXT	SEGMENT
_tns$ = 8						; size = 4
_toString PROC						; COMDAT
; Line 812
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 814
	mov	esi, esp
	push	0
	mov	eax, DWORD PTR _tns$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+644]
	push	edx
	mov	eax, DWORD PTR _tns$[ebp]
	push	eax
	mov	ecx, DWORD PTR _tns$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	call	edx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 815
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_toString ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _toStringSS
_TEXT	SEGMENT
_buf$ = -8						; size = 4
_tns$ = 8						; size = 4
_start$ = 12						; size = 4
_stop$ = 16						; size = 4
_toStringSS PROC					; COMDAT
; Line 819
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 822
	mov	eax, DWORD PTR _tns$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _tns$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _buf$[ebp], eax
; Line 824
	mov	esi, esp
	mov	eax, DWORD PTR _buf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stop$[ebp]
	push	ecx
	mov	edx, DWORD PTR _start$[ebp]
	push	edx
	mov	eax, DWORD PTR _tns$[ebp]
	push	eax
	mov	ecx, DWORD PTR _tns$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	call	edx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 826
	mov	eax, DWORD PTR _buf$[ebp]
; Line 827
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_toStringSS ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _toStringWork
_TEXT	SEGMENT
_child$35678 = -44					; size = 4
_text$35670 = -32					; size = 4
_c$ = -20						; size = 4
_n$ = -8						; size = 4
_tns$ = 8						; size = 4
_p$ = 12						; size = 4
_stop$ = 16						; size = 4
_buf$ = 20						; size = 4
_toStringWork PROC					; COMDAT
; Line 831
	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 836
	mov	esi, esp
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+96]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	movzx	eax, al
	test	eax, eax
	jne	$LN8@toStringWo
; Line 840
	mov	esi, esp
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+108]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _text$35670[ebp], eax
; Line 842
	cmp	DWORD PTR _text$35670[ebp], 0
	jne	SHORT $LN7@toStringWo
; Line 844
	mov	eax, DWORD PTR _tns$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _tns$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _text$35670[ebp], eax
; Line 846
	mov	esi, esp
	push	32					; 00000020H
	mov	eax, DWORD PTR _text$35670[ebp]
	push	eax
	mov	ecx, DWORD PTR _text$35670[ebp]
	mov	edx, DWORD PTR [ecx+64]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 847
	mov	esi, esp
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+80]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	eax
	mov	eax, DWORD PTR _text$35670[ebp]
	push	eax
	mov	ecx, DWORD PTR _text$35670[ebp]
	mov	edx, DWORD PTR [ecx+68]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN7@toStringWo:
; Line 850
	mov	esi, esp
	mov	eax, DWORD PTR _text$35670[ebp]
	push	eax
	mov	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	mov	edx, DWORD PTR _buf$[ebp]
	mov	eax, DWORD PTR [edx+52]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN8@toStringWo:
; Line 853
	mov	eax, DWORD PTR _p$[ebp]
	cmp	eax, DWORD PTR _stop$[ebp]
	jne	SHORT $LN6@toStringWo
; Line 855
	jmp	$LN9@toStringWo
$LN6@toStringWo:
; Line 858
	mov	esi, esp
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+68]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _n$[ebp], eax
; Line 860
	cmp	DWORD PTR _n$[ebp], 0
	jbe	SHORT $LN5@toStringWo
	mov	esi, esp
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+96]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN5@toStringWo
; Line 862
	mov	esi, esp
	push	32					; 00000020H
	mov	eax, DWORD PTR _buf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _buf$[ebp]
	mov	edx, DWORD PTR [ecx+64]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 863
	mov	esi, esp
	push	2
	mov	eax, DWORD PTR _buf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _buf$[ebp]
	mov	edx, DWORD PTR [ecx+68]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN5@toStringWo:
; Line 866
	mov	DWORD PTR _c$[ebp], 0
	jmp	SHORT $LN4@toStringWo
$LN3@toStringWo:
	mov	eax, DWORD PTR _c$[ebp]
	add	eax, 1
	mov	DWORD PTR _c$[ebp], eax
$LN4@toStringWo:
	mov	eax, DWORD PTR _c$[ebp]
	cmp	eax, DWORD PTR _n$[ebp]
	jae	SHORT $LN2@toStringWo
; Line 870
	mov	esi, esp
	mov	eax, DWORD PTR _c$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+56]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _child$35678[ebp], eax
; Line 871
	mov	esi, esp
	mov	eax, DWORD PTR _buf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stop$[ebp]
	push	ecx
	mov	edx, DWORD PTR _child$35678[ebp]
	push	edx
	mov	eax, DWORD PTR _tns$[ebp]
	push	eax
	mov	ecx, DWORD PTR _tns$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	call	edx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 872
	jmp	SHORT $LN3@toStringWo
$LN2@toStringWo:
; Line 874
	cmp	DWORD PTR _n$[ebp], 0
	jbe	SHORT $LN9@toStringWo
	mov	esi, esp
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+96]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN9@toStringWo
; Line 876
	mov	esi, esp
	push	32					; 00000020H
	mov	eax, DWORD PTR _buf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _buf$[ebp]
	mov	edx, DWORD PTR [ecx+64]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 877
	mov	esi, esp
	push	3
	mov	eax, DWORD PTR _buf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _buf$[ebp]
	mov	edx, DWORD PTR [ecx+68]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN9@toStringWo:
; Line 879
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_toStringWork ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _getLookaheadSize
_TEXT	SEGMENT
tv75 = -196						; size = 4
_ctns$ = 8						; size = 4
_getLookaheadSize PROC					; COMDAT
; Line 883
	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 886
	mov	eax, DWORD PTR _ctns$[ebp]
	mov	ecx, DWORD PTR _ctns$[ebp]
	mov	edx, DWORD PTR [eax+688]
	cmp	edx, DWORD PTR [ecx+684]
	jae	SHORT $LN3@getLookahe
	mov	eax, DWORD PTR _ctns$[ebp]
	mov	ecx, DWORD PTR _ctns$[ebp]
	mov	edx, DWORD PTR [eax+680]
	sub	edx, DWORD PTR [ecx+684]
	mov	eax, DWORD PTR _ctns$[ebp]
	add	edx, DWORD PTR [eax+688]
	mov	DWORD PTR tv75[ebp], edx
	jmp	SHORT $LN4@getLookahe
$LN3@getLookahe:
	mov	ecx, DWORD PTR _ctns$[ebp]
	mov	edx, DWORD PTR _ctns$[ebp]
	mov	eax, DWORD PTR [ecx+688]
	sub	eax, DWORD PTR [edx+684]
	mov	DWORD PTR tv75[ebp], eax
$LN4@getLookahe:
	mov	eax, DWORD PTR tv75[ebp]
; Line 887
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_getLookaheadSize ENDP
_TEXT	ENDS
EXTRN	_antlr3CommonTreeNewFromToken:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _newDownNode
_TEXT	SEGMENT
_token$ = -20						; size = 4
_dNode$ = -8						; size = 4
_ctns$ = 8						; size = 4
_newDownNode PROC					; COMDAT
; Line 891
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 895
	push	2
	call	_antlr3CommonTokenNew
	add	esp, 4
	mov	DWORD PTR _token$[ebp], eax
; Line 896
	mov	eax, DWORD PTR _token$[ebp]
	mov	DWORD PTR [eax+44], 1
; Line 897
	mov	eax, DWORD PTR _token$[ebp]
	mov	DWORD PTR [eax+48], OFFSET ??_C@_04FANAOELO@DOWN?$AA@
; Line 898
	mov	eax, DWORD PTR _token$[ebp]
	push	eax
	call	_antlr3CommonTreeNewFromToken
	add	esp, 4
	mov	DWORD PTR _dNode$[ebp], eax
; Line 900
	mov	eax, DWORD PTR _dNode$[ebp]
	add	eax, 28					; 0000001cH
; Line 901
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_newDownNode ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _newUpNode
_TEXT	SEGMENT
_token$ = -20						; size = 4
_uNode$ = -8						; size = 4
_ctns$ = 8						; size = 4
_newUpNode PROC						; COMDAT
; Line 905
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 909
	push	3
	call	_antlr3CommonTokenNew
	add	esp, 4
	mov	DWORD PTR _token$[ebp], eax
; Line 910
	mov	eax, DWORD PTR _token$[ebp]
	mov	DWORD PTR [eax+44], 1
; Line 911
	mov	eax, DWORD PTR _token$[ebp]
	mov	DWORD PTR [eax+48], OFFSET ??_C@_02NAHCJHOC@UP?$AA@
; Line 912
	mov	eax, DWORD PTR _token$[ebp]
	push	eax
	call	_antlr3CommonTreeNewFromToken
	add	esp, 4
	mov	DWORD PTR _uNode$[ebp], eax
; Line 914
	mov	eax, DWORD PTR _uNode$[ebp]
	add	eax, 28					; 0000001cH
; Line 915
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_newUpNode ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _replaceChildren
_TEXT	SEGMENT
_cta$35709 = -20					; size = 4
_adaptor$35708 = -8					; size = 4
_tns$ = 8						; size = 4
_parent$ = 12						; size = 4
_startChildIndex$ = 16					; size = 4
_stopChildIndex$ = 20					; size = 4
_t$ = 24						; size = 4
_replaceChildren PROC					; COMDAT
; Line 929
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 930
	cmp	DWORD PTR _parent$[ebp], 0
	je	SHORT $LN2@replaceChi
; Line 935
	mov	esi, esp
	mov	eax, DWORD PTR _tns$[ebp]
	push	eax
	mov	ecx, DWORD PTR _tns$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _adaptor$35708[ebp], eax
; Line 936
	mov	eax, DWORD PTR _adaptor$35708[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _cta$35709[ebp], ecx
; Line 938
	mov	esi, esp
	mov	eax, DWORD PTR _t$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stopChildIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _startChildIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _parent$[ebp]
	push	eax
	mov	ecx, DWORD PTR _adaptor$35708[ebp]
	push	ecx
	mov	edx, DWORD PTR _adaptor$35708[ebp]
	mov	eax, DWORD PTR [edx+164]
	call	eax
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@replaceChi:
; Line 940
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_replaceChildren ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _get
_TEXT	SEGMENT
_tns$ = 8						; size = 4
_k$ = 12						; size = 4
_get	PROC						; COMDAT
; Line 944
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 945
	mov	eax, DWORD PTR _tns$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx+656], -1
	jne	SHORT $LN1@get
; Line 947
	mov	eax, DWORD PTR _tns$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_fillBufferRoot
	add	esp, 4
$LN1@get:
; Line 950
	mov	esi, esp
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	mov	ecx, DWORD PTR _tns$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+636]
	push	eax
	mov	ecx, DWORD PTR _tns$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+636]
	mov	ecx, DWORD PTR [eax+152]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 951
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_get	ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _push
_TEXT	SEGMENT
_ctns$ = 8						; size = 4
_index$ = 12						; size = 4
_push	PROC						; COMDAT
; Line 955
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 956
	mov	esi, esp
	push	0
	mov	eax, DWORD PTR _ctns$[ebp]
	mov	ecx, DWORD PTR [eax+656]
	push	ecx
	mov	edx, DWORD PTR _ctns$[ebp]
	mov	eax, DWORD PTR [edx+652]
	push	eax
	mov	ecx, DWORD PTR _ctns$[ebp]
	mov	edx, DWORD PTR [ecx+652]
	mov	eax, DWORD PTR [edx+20]
	call	eax
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 957
	mov	esi, esp
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctns$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _ctns$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [eax+48]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 958
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_push	ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _pop
_TEXT	SEGMENT
_retVal$ = -8						; size = 4
_ctns$ = 8						; size = 4
_pop	PROC						; COMDAT
; Line 962
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 965
	mov	esi, esp
	mov	eax, DWORD PTR _ctns$[ebp]
	mov	ecx, DWORD PTR [eax+652]
	push	ecx
	mov	edx, DWORD PTR _ctns$[ebp]
	mov	eax, DWORD PTR [edx+652]
	mov	ecx, DWORD PTR [eax+12]
	call	ecx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _retVal$[ebp], eax
; Line 966
	mov	esi, esp
	mov	eax, DWORD PTR _retVal$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctns$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _ctns$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [eax+48]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 967
	mov	eax, DWORD PTR _retVal$[ebp]
; Line 968
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_pop	ENDP
_TEXT	ENDS
END
