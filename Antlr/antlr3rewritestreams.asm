; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	O:\DXGame\SPENGINE\Antlr\antlr3rewritestreams.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_antlr3RewriteRuleTOKENStreamNewAE
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File o:\dxgame\spengine\antlr\antlr3rewritestreams.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT _antlr3RewriteRuleTOKENStreamNewAE
_TEXT	SEGMENT
_stream$ = -8						; size = 4
_adaptor$ = 8						; size = 4
_rec$ = 12						; size = 4
_description$ = 16					; size = 4
_antlr3RewriteRuleTOKENStreamNewAE PROC			; COMDAT
; Line 310
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 315
	mov	eax, DWORD PTR _description$[ebp]
	push	eax
	mov	ecx, DWORD PTR _rec$[ebp]
	push	ecx
	mov	edx, DWORD PTR _adaptor$[ebp]
	push	edx
	call	_antlr3RewriteRuleElementStreamNewAE
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _stream$[ebp], eax
; Line 317
	cmp	DWORD PTR _stream$[ebp], 0
	jne	SHORT $LN1@antlr3Rewr
; Line 319
	mov	eax, DWORD PTR _stream$[ebp]
	jmp	SHORT $LN2@antlr3Rewr
$LN1@antlr3Rewr:
; Line 324
	mov	eax, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [eax+56], OFFSET _dupTok
; Line 325
	mov	eax, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [eax+68], OFFSET _nextNodeToken
; Line 329
	mov	eax, DWORD PTR _stream$[ebp]
$LN2@antlr3Rewr:
; Line 330
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_antlr3RewriteRuleTOKENStreamNewAE ENDP
_TEXT	ENDS
EXTRN	__imp__malloc:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _antlr3RewriteRuleElementStreamNewAE
_TEXT	SEGMENT
_stream$ = -8						; size = 4
_adaptor$ = 8						; size = 4
_rec$ = 12						; size = 4
_description$ = 16					; size = 4
_antlr3RewriteRuleElementStreamNewAE PROC		; COMDAT
; Line 188
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 195
	mov	eax, DWORD PTR _rec$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+104]
	cmp	DWORD PTR [edx+4], 0
	jbe	SHORT $LN3@antlr3Rewr@2
; Line 200
	mov	eax, DWORD PTR _rec$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+104]
	mov	eax, DWORD PTR [edx+4]
	sub	eax, 1
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _rec$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [edx+104]
	push	eax
	mov	ecx, DWORD PTR _rec$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [edx+104]
	mov	ecx, DWORD PTR [eax+156]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _stream$[ebp], eax
; Line 207
	jmp	SHORT $LN2@antlr3Rewr@2
$LN3@antlr3Rewr@2:
; Line 212
	mov	esi, esp
	push	84					; 00000054H
	call	DWORD PTR __imp__malloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _stream$[ebp], eax
; Line 214
	cmp	DWORD PTR _stream$[ebp], 0
	jne	SHORT $LN1@antlr3Rewr@2
; Line 216
	xor	eax, eax
	jmp	$LN4@antlr3Rewr@2
$LN1@antlr3Rewr@2:
; Line 218
	mov	eax, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [eax+8], 0
; Line 219
	mov	eax, DWORD PTR _stream$[ebp]
	mov	BYTE PTR [eax+12], 0
$LN2@antlr3Rewr@2:
; Line 224
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR _rec$[ebp]
	mov	DWORD PTR [eax+28], ecx
; Line 225
	mov	eax, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [eax+32], OFFSET _reset
; Line 226
	mov	eax, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [eax+36], OFFSET _add
; Line 227
	mov	eax, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [eax+40], OFFSET _next
; Line 228
	mov	eax, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [eax+44], OFFSET _nextTree
; Line 229
	mov	eax, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [eax+68], OFFSET _nextNode
; Line 230
	mov	eax, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [eax+48], OFFSET _nextToken
; Line 231
	mov	eax, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [eax+52], OFFSET __next
; Line 232
	mov	eax, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [eax+64], OFFSET _hasNext
; Line 233
	mov	eax, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [eax+72], OFFSET _size
; Line 234
	mov	eax, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [eax+76], OFFSET _getDescription
; Line 235
	mov	eax, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [eax+60], OFFSET _toTree
; Line 236
	mov	eax, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [eax+80], OFFSET _freeRS
; Line 237
	mov	eax, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [eax+4], 0
; Line 242
	mov	eax, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [eax], 0
; Line 243
	mov	eax, DWORD PTR _stream$[ebp]
	mov	BYTE PTR [eax+24], 0
; Line 247
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR _description$[ebp]
	mov	DWORD PTR [eax+16], ecx
; Line 251
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR _adaptor$[ebp]
	mov	DWORD PTR [eax+20], ecx
; Line 253
	mov	eax, DWORD PTR _stream$[ebp]
$LN4@antlr3Rewr@2:
; Line 254
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_antlr3RewriteRuleElementStreamNewAE ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _freeRS
_TEXT	SEGMENT
_factory$36015 = -8					; size = 4
_stream$ = 8						; size = 4
_freeRS	PROC						; COMDAT
; Line 66
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 72
	mov	eax, DWORD PTR _stream$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	$LN4@freeRS
; Line 77
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	movzx	edx, BYTE PTR [ecx+136]
	cmp	edx, 1
	jne	SHORT $LN3@freeRS
; Line 79
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+176]
	mov	ecx, DWORD PTR [eax+168]
	mov	DWORD PTR _factory$36015[ebp], ecx
; Line 80
	mov	esi, esp
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _factory$36015[ebp]
	push	edx
	mov	eax, DWORD PTR _factory$36015[ebp]
	mov	ecx, DWORD PTR [eax+204]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 82
	mov	eax, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [eax+8], 0
; Line 84
	jmp	SHORT $LN2@freeRS
$LN3@freeRS:
; Line 89
	mov	esi, esp
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [eax+160]
	call	ecx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 90
	mov	eax, DWORD PTR _stream$[ebp]
	mov	BYTE PTR [eax+12], 1
$LN2@freeRS:
; Line 93
	jmp	SHORT $LN1@freeRS
$LN4@freeRS:
; Line 95
	mov	eax, DWORD PTR _stream$[ebp]
	mov	BYTE PTR [eax+12], 0
$LN1@freeRS:
; Line 102
	mov	esi, esp
	push	OFFSET _expungeRS
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [eax+104]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+104]
	mov	eax, DWORD PTR [edx+168]
	call	eax
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 103
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_freeRS	ENDP
_TEXT	ENDS
EXTRN	__imp__free:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _expungeRS
_TEXT	SEGMENT
_stream$ = 8						; size = 4
_expungeRS PROC						; COMDAT
; Line 175
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 177
	mov	eax, DWORD PTR _stream$[ebp]
	movzx	ecx, BYTE PTR [eax+12]
	cmp	ecx, 1
	jne	SHORT $LN1@expungeRS
	mov	eax, DWORD PTR _stream$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN1@expungeRS
; Line 179
	mov	esi, esp
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [eax+144]
	call	ecx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@expungeRS:
; Line 181
	mov	esi, esp
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	DWORD PTR __imp__free
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 182
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_expungeRS ENDP
_TEXT	ENDS
PUBLIC	_antlr3RewriteRuleTOKENStreamNewAEE
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _antlr3RewriteRuleTOKENStreamNewAEE
_TEXT	SEGMENT
_stream$ = -8						; size = 4
_adaptor$ = 8						; size = 4
_rec$ = 12						; size = 4
_description$ = 16					; size = 4
_oneElement$ = 20					; size = 4
_antlr3RewriteRuleTOKENStreamNewAEE PROC		; COMDAT
; Line 334
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 339
	mov	eax, DWORD PTR _oneElement$[ebp]
	push	eax
	mov	ecx, DWORD PTR _description$[ebp]
	push	ecx
	mov	edx, DWORD PTR _rec$[ebp]
	push	edx
	mov	eax, DWORD PTR _adaptor$[ebp]
	push	eax
	call	_antlr3RewriteRuleElementStreamNewAEE
	add	esp, 16					; 00000010H
	mov	DWORD PTR _stream$[ebp], eax
; Line 343
	mov	eax, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [eax+56], OFFSET _dupTok
; Line 344
	mov	eax, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [eax+68], OFFSET _nextNodeToken
; Line 348
	mov	eax, DWORD PTR _stream$[ebp]
; Line 349
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_antlr3RewriteRuleTOKENStreamNewAEE ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _antlr3RewriteRuleElementStreamNewAEE
_TEXT	SEGMENT
_stream$ = -8						; size = 4
_adaptor$ = 8						; size = 4
_rec$ = 12						; size = 4
_description$ = 16					; size = 4
_oneElement$ = 20					; size = 4
_antlr3RewriteRuleElementStreamNewAEE PROC		; COMDAT
; Line 258
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 263
	mov	eax, DWORD PTR _description$[ebp]
	push	eax
	mov	ecx, DWORD PTR _rec$[ebp]
	push	ecx
	mov	edx, DWORD PTR _adaptor$[ebp]
	push	edx
	call	_antlr3RewriteRuleElementStreamNewAE
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _stream$[ebp], eax
; Line 265
	cmp	DWORD PTR _stream$[ebp], 0
	jne	SHORT $LN2@antlr3Rewr@3
; Line 267
	xor	eax, eax
	jmp	SHORT $LN3@antlr3Rewr@3
$LN2@antlr3Rewr@3:
; Line 272
	cmp	DWORD PTR _oneElement$[ebp], 0
	je	SHORT $LN1@antlr3Rewr@3
; Line 274
	mov	esi, esp
	push	0
	mov	eax, DWORD PTR _oneElement$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR [edx+36]
	call	eax
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@antlr3Rewr@3:
; Line 276
	mov	eax, DWORD PTR _stream$[ebp]
$LN3@antlr3Rewr@3:
; Line 277
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_antlr3RewriteRuleElementStreamNewAEE ENDP
_TEXT	ENDS
PUBLIC	_antlr3RewriteRuleTOKENStreamNewAEV
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _antlr3RewriteRuleTOKENStreamNewAEV
_TEXT	SEGMENT
_stream$ = -8						; size = 4
_adaptor$ = 8						; size = 4
_rec$ = 12						; size = 4
_description$ = 16					; size = 4
_vector$ = 20						; size = 4
_antlr3RewriteRuleTOKENStreamNewAEV PROC		; COMDAT
; Line 353
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 358
	mov	eax, DWORD PTR _vector$[ebp]
	push	eax
	mov	ecx, DWORD PTR _description$[ebp]
	push	ecx
	mov	edx, DWORD PTR _rec$[ebp]
	push	edx
	mov	eax, DWORD PTR _adaptor$[ebp]
	push	eax
	call	_antlr3RewriteRuleElementStreamNewAEV
	add	esp, 16					; 00000010H
	mov	DWORD PTR _stream$[ebp], eax
; Line 362
	mov	eax, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [eax+56], OFFSET _dupTok
; Line 363
	mov	eax, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [eax+68], OFFSET _nextNodeToken
; Line 367
	mov	eax, DWORD PTR _stream$[ebp]
; Line 368
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_antlr3RewriteRuleTOKENStreamNewAEV ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _antlr3RewriteRuleElementStreamNewAEV
_TEXT	SEGMENT
_stream$ = -8						; size = 4
_adaptor$ = 8						; size = 4
_rec$ = 12						; size = 4
_description$ = 16					; size = 4
_vector$ = 20						; size = 4
_antlr3RewriteRuleElementStreamNewAEV PROC		; COMDAT
; Line 281
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 286
	mov	eax, DWORD PTR _description$[ebp]
	push	eax
	mov	ecx, DWORD PTR _rec$[ebp]
	push	ecx
	mov	edx, DWORD PTR _adaptor$[ebp]
	push	edx
	call	_antlr3RewriteRuleElementStreamNewAE
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _stream$[ebp], eax
; Line 288
	cmp	DWORD PTR _stream$[ebp], 0
	jne	SHORT $LN2@antlr3Rewr@4
; Line 290
	mov	eax, DWORD PTR _stream$[ebp]
	jmp	SHORT $LN3@antlr3Rewr@4
$LN2@antlr3Rewr@4:
; Line 297
	mov	eax, DWORD PTR _stream$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN1@antlr3Rewr@4
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	movzx	edx, BYTE PTR [ecx+136]
	test	edx, edx
	jne	SHORT $LN1@antlr3Rewr@4
	mov	eax, DWORD PTR _stream$[ebp]
	movzx	ecx, BYTE PTR [eax+12]
	cmp	ecx, 1
	jne	SHORT $LN1@antlr3Rewr@4
; Line 299
	mov	esi, esp
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [eax+144]
	call	ecx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@antlr3Rewr@4:
; Line 301
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR _vector$[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 302
	mov	eax, DWORD PTR _stream$[ebp]
	mov	BYTE PTR [eax+12], 0
; Line 303
	mov	eax, DWORD PTR _stream$[ebp]
$LN3@antlr3Rewr@4:
; Line 304
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_antlr3RewriteRuleElementStreamNewAEV ENDP
_TEXT	ENDS
PUBLIC	_antlr3RewriteRuleSubtreeStreamNewAE
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _antlr3RewriteRuleSubtreeStreamNewAE
_TEXT	SEGMENT
_stream$ = -8						; size = 4
_adaptor$ = 8						; size = 4
_rec$ = 12						; size = 4
_description$ = 16					; size = 4
_antlr3RewriteRuleSubtreeStreamNewAE PROC		; COMDAT
; Line 374
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 379
	mov	eax, DWORD PTR _description$[ebp]
	push	eax
	mov	ecx, DWORD PTR _rec$[ebp]
	push	ecx
	mov	edx, DWORD PTR _adaptor$[ebp]
	push	edx
	call	_antlr3RewriteRuleElementStreamNewAE
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _stream$[ebp], eax
; Line 381
	cmp	DWORD PTR _stream$[ebp], 0
	jne	SHORT $LN1@antlr3Rewr@5
; Line 383
	mov	eax, DWORD PTR _stream$[ebp]
	jmp	SHORT $LN2@antlr3Rewr@5
$LN1@antlr3Rewr@5:
; Line 388
	mov	eax, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [eax+56], OFFSET _dupTree
; Line 389
	mov	eax, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [eax+68], OFFSET _nextNode
; Line 390
	mov	eax, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [eax+80], OFFSET _freeNodeRS
; Line 391
	mov	eax, DWORD PTR _stream$[ebp]
$LN2@antlr3Rewr@5:
; Line 393
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_antlr3RewriteRuleSubtreeStreamNewAE ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _freeNodeRS
_TEXT	SEGMENT
_factory$36037 = -32					; size = 4
_i$36029 = -20						; size = 4
_tree$ = -8						; size = 4
_stream$ = 8						; size = 4
_freeNodeRS PROC					; COMDAT
; Line 109
	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 120
	mov	eax, DWORD PTR _stream$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	$LN10@freeNodeRS
; Line 126
	mov	DWORD PTR _i$36029[ebp], 1
	jmp	SHORT $LN9@freeNodeRS
$LN8@freeNodeRS:
	mov	eax, DWORD PTR _i$36029[ebp]
	add	eax, 1
	mov	DWORD PTR _i$36029[ebp], eax
$LN9@freeNodeRS:
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _i$36029[ebp]
	cmp	edx, DWORD PTR [ecx+4]
	ja	SHORT $LN7@freeNodeRS
; Line 128
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _i$36029[ebp]
	mov	ecx, DWORD PTR [edx+eax*8-8]
	mov	DWORD PTR _tree$[ebp], ecx
; Line 129
	cmp	DWORD PTR _tree$[ebp], 0
	je	SHORT $LN6@freeNodeRS
	mov	esi, esp
	mov	eax, DWORD PTR _tree$[ebp]
	push	eax
	mov	ecx, DWORD PTR _tree$[ebp]
	mov	edx, DWORD PTR [ecx+96]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN6@freeNodeRS:
; Line 135
	jmp	SHORT $LN8@freeNodeRS
$LN7@freeNodeRS:
; Line 139
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	movzx	edx, BYTE PTR [ecx+136]
	cmp	edx, 1
	jne	SHORT $LN5@freeNodeRS
; Line 141
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+176]
	mov	ecx, DWORD PTR [eax+168]
	mov	DWORD PTR _factory$36037[ebp], ecx
; Line 142
	mov	esi, esp
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _factory$36037[ebp]
	push	edx
	mov	eax, DWORD PTR _factory$36037[ebp]
	mov	ecx, DWORD PTR [eax+204]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 144
	mov	eax, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [eax+8], 0
; Line 146
	jmp	SHORT $LN4@freeNodeRS
$LN5@freeNodeRS:
; Line 148
	mov	esi, esp
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [eax+160]
	call	ecx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 149
	mov	eax, DWORD PTR _stream$[ebp]
	mov	BYTE PTR [eax+12], 1
$LN4@freeNodeRS:
; Line 152
	jmp	SHORT $LN3@freeNodeRS
$LN10@freeNodeRS:
; Line 154
	mov	eax, DWORD PTR _stream$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN2@freeNodeRS
; Line 156
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _tree$[ebp], ecx
; Line 157
	mov	esi, esp
	mov	eax, DWORD PTR _tree$[ebp]
	push	eax
	mov	ecx, DWORD PTR _tree$[ebp]
	mov	edx, DWORD PTR [ecx+96]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@freeNodeRS:
; Line 163
	mov	eax, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [eax+4], 0
; Line 164
	mov	eax, DWORD PTR _stream$[ebp]
	mov	BYTE PTR [eax+12], 0
$LN3@freeNodeRS:
; Line 171
	mov	esi, esp
	push	OFFSET _expungeRS
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [eax+104]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+104]
	mov	eax, DWORD PTR [edx+168]
	call	eax
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 172
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_freeNodeRS ENDP
_TEXT	ENDS
PUBLIC	_antlr3RewriteRuleSubtreeStreamNewAEE
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _antlr3RewriteRuleSubtreeStreamNewAEE
_TEXT	SEGMENT
_stream$ = -8						; size = 4
_adaptor$ = 8						; size = 4
_rec$ = 12						; size = 4
_description$ = 16					; size = 4
_oneElement$ = 20					; size = 4
_antlr3RewriteRuleSubtreeStreamNewAEE PROC		; COMDAT
; Line 396
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 401
	mov	eax, DWORD PTR _oneElement$[ebp]
	push	eax
	mov	ecx, DWORD PTR _description$[ebp]
	push	ecx
	mov	edx, DWORD PTR _rec$[ebp]
	push	edx
	mov	eax, DWORD PTR _adaptor$[ebp]
	push	eax
	call	_antlr3RewriteRuleElementStreamNewAEE
	add	esp, 16					; 00000010H
	mov	DWORD PTR _stream$[ebp], eax
; Line 403
	cmp	DWORD PTR _stream$[ebp], 0
	jne	SHORT $LN1@antlr3Rewr@6
; Line 405
	mov	eax, DWORD PTR _stream$[ebp]
	jmp	SHORT $LN2@antlr3Rewr@6
$LN1@antlr3Rewr@6:
; Line 410
	mov	eax, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [eax+56], OFFSET _dupTree
; Line 411
	mov	eax, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [eax+68], OFFSET _nextNode
; Line 412
	mov	eax, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [eax+80], OFFSET _freeNodeRS
; Line 414
	mov	eax, DWORD PTR _stream$[ebp]
$LN2@antlr3Rewr@6:
; Line 415
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_antlr3RewriteRuleSubtreeStreamNewAEE ENDP
_TEXT	ENDS
PUBLIC	_antlr3RewriteRuleSubtreeStreamNewAEV
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _antlr3RewriteRuleSubtreeStreamNewAEV
_TEXT	SEGMENT
_stream$ = -8						; size = 4
_adaptor$ = 8						; size = 4
_rec$ = 12						; size = 4
_description$ = 16					; size = 4
_vector$ = 20						; size = 4
_antlr3RewriteRuleSubtreeStreamNewAEV PROC		; COMDAT
; Line 419
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 424
	mov	eax, DWORD PTR _vector$[ebp]
	push	eax
	mov	ecx, DWORD PTR _description$[ebp]
	push	ecx
	mov	edx, DWORD PTR _rec$[ebp]
	push	edx
	mov	eax, DWORD PTR _adaptor$[ebp]
	push	eax
	call	_antlr3RewriteRuleElementStreamNewAEV
	add	esp, 16					; 00000010H
	mov	DWORD PTR _stream$[ebp], eax
; Line 426
	cmp	DWORD PTR _stream$[ebp], 0
	jne	SHORT $LN1@antlr3Rewr@7
; Line 428
	xor	eax, eax
	jmp	SHORT $LN2@antlr3Rewr@7
$LN1@antlr3Rewr@7:
; Line 433
	mov	eax, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [eax+56], OFFSET _dupTree
; Line 434
	mov	eax, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [eax+68], OFFSET _nextNode
; Line 435
	mov	eax, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [eax+80], OFFSET _freeNodeRS
; Line 437
	mov	eax, DWORD PTR _stream$[ebp]
$LN2@antlr3Rewr@7:
; Line 438
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_antlr3RewriteRuleSubtreeStreamNewAEV ENDP
_TEXT	ENDS
PUBLIC	_antlr3RewriteRuleNODEStreamNewAE
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _antlr3RewriteRuleNODEStreamNewAE
_TEXT	SEGMENT
_stream$ = -8						; size = 4
_adaptor$ = 8						; size = 4
_rec$ = 12						; size = 4
_description$ = 16					; size = 4
_antlr3RewriteRuleNODEStreamNewAE PROC			; COMDAT
; Line 443
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 448
	mov	eax, DWORD PTR _description$[ebp]
	push	eax
	mov	ecx, DWORD PTR _rec$[ebp]
	push	ecx
	mov	edx, DWORD PTR _adaptor$[ebp]
	push	edx
	call	_antlr3RewriteRuleElementStreamNewAE
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _stream$[ebp], eax
; Line 450
	cmp	DWORD PTR _stream$[ebp], 0
	jne	SHORT $LN1@antlr3Rewr@8
; Line 452
	mov	eax, DWORD PTR _stream$[ebp]
	jmp	SHORT $LN2@antlr3Rewr@8
$LN1@antlr3Rewr@8:
; Line 457
	mov	eax, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [eax+56], OFFSET _dupTreeNode
; Line 458
	mov	eax, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [eax+60], OFFSET _toTreeNode
; Line 459
	mov	eax, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [eax+68], OFFSET _nextNodeNode
; Line 460
	mov	eax, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [eax+80], OFFSET _freeNodeRS
; Line 462
	mov	eax, DWORD PTR _stream$[ebp]
$LN2@antlr3Rewr@8:
; Line 463
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_antlr3RewriteRuleNODEStreamNewAE ENDP
_TEXT	ENDS
PUBLIC	_antlr3RewriteRuleNODEStreamNewAEE
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _antlr3RewriteRuleNODEStreamNewAEE
_TEXT	SEGMENT
_stream$ = -8						; size = 4
_adaptor$ = 8						; size = 4
_rec$ = 12						; size = 4
_description$ = 16					; size = 4
_oneElement$ = 20					; size = 4
_antlr3RewriteRuleNODEStreamNewAEE PROC			; COMDAT
; Line 467
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 472
	mov	eax, DWORD PTR _oneElement$[ebp]
	push	eax
	mov	ecx, DWORD PTR _description$[ebp]
	push	ecx
	mov	edx, DWORD PTR _rec$[ebp]
	push	edx
	mov	eax, DWORD PTR _adaptor$[ebp]
	push	eax
	call	_antlr3RewriteRuleElementStreamNewAEE
	add	esp, 16					; 00000010H
	mov	DWORD PTR _stream$[ebp], eax
; Line 476
	mov	eax, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [eax+56], OFFSET _dupTreeNode
; Line 477
	mov	eax, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [eax+60], OFFSET _toTreeNode
; Line 478
	mov	eax, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [eax+68], OFFSET _nextNodeNode
; Line 479
	mov	eax, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [eax+80], OFFSET _freeNodeRS
; Line 481
	mov	eax, DWORD PTR _stream$[ebp]
; Line 482
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_antlr3RewriteRuleNODEStreamNewAEE ENDP
_TEXT	ENDS
PUBLIC	_antlr3RewriteRuleNODEStreamNewAEV
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _antlr3RewriteRuleNODEStreamNewAEV
_TEXT	SEGMENT
_stream$ = -8						; size = 4
_adaptor$ = 8						; size = 4
_rec$ = 12						; size = 4
_description$ = 16					; size = 4
_vector$ = 20						; size = 4
_antlr3RewriteRuleNODEStreamNewAEV PROC			; COMDAT
; Line 486
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 491
	mov	eax, DWORD PTR _vector$[ebp]
	push	eax
	mov	ecx, DWORD PTR _description$[ebp]
	push	ecx
	mov	edx, DWORD PTR _rec$[ebp]
	push	edx
	mov	eax, DWORD PTR _adaptor$[ebp]
	push	eax
	call	_antlr3RewriteRuleElementStreamNewAEV
	add	esp, 16					; 00000010H
	mov	DWORD PTR _stream$[ebp], eax
; Line 495
	mov	eax, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [eax+56], OFFSET _dupTreeNode
; Line 496
	mov	eax, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [eax+60], OFFSET _toTreeNode
; Line 497
	mov	eax, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [eax+68], OFFSET _nextNodeNode
; Line 498
	mov	eax, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [eax+80], OFFSET _freeNodeRS
; Line 500
	mov	eax, DWORD PTR _stream$[ebp]
; Line 501
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_antlr3RewriteRuleNODEStreamNewAEV ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _reset
_TEXT	SEGMENT
_stream$ = 8						; size = 4
_reset	PROC						; COMDAT
; Line 511
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 512
	mov	eax, DWORD PTR _stream$[ebp]
	mov	BYTE PTR [eax+24], 1
; Line 513
	mov	eax, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [eax], 0
; Line 514
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_reset	ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _add
_TEXT	SEGMENT
_factory$36221 = -8					; size = 4
_stream$ = 8						; size = 4
_el$ = 12						; size = 4
_freePtr$ = 16						; size = 4
_add	PROC						; COMDAT
; Line 520
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 521
	cmp	DWORD PTR _el$[ebp], 0
	jne	SHORT $LN4@add
; Line 523
	jmp	$LN5@add
$LN4@add:
; Line 529
	mov	eax, DWORD PTR _stream$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN3@add
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	cmp	DWORD PTR [ecx+4], 0
	jbe	SHORT $LN3@add
; Line 534
	mov	esi, esp
	mov	eax, DWORD PTR _freePtr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _el$[ebp]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [edx+168]
	call	eax
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 535
	jmp	$LN5@add
$LN3@add:
; Line 537
	mov	eax, DWORD PTR _stream$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN2@add
; Line 539
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR _el$[ebp]
	mov	DWORD PTR [eax+4], ecx
; Line 540
	jmp	$LN5@add
$LN2@add:
; Line 546
	mov	eax, DWORD PTR _stream$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN1@add
; Line 548
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+176]
	mov	ecx, DWORD PTR [eax+168]
	mov	DWORD PTR _factory$36221[ebp], ecx
; Line 551
	mov	esi, esp
	mov	eax, DWORD PTR _factory$36221[ebp]
	push	eax
	mov	ecx, DWORD PTR _factory$36221[ebp]
	mov	edx, DWORD PTR [ecx+200]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [ecx+8], eax
; Line 552
	mov	eax, DWORD PTR _stream$[ebp]
	mov	BYTE PTR [eax+12], 1
$LN1@add:
; Line 555
	mov	esi, esp
	mov	eax, DWORD PTR _freePtr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [eax+168]
	call	ecx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 556
	mov	esi, esp
	mov	eax, DWORD PTR _freePtr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _el$[ebp]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [edx+168]
	call	eax
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 557
	mov	eax, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [eax+4], 0
$LN5@add:
; Line 560
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_add	ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _nextTree
_TEXT	SEGMENT
_el$ = -20						; size = 4
_n$ = -8						; size = 4
_stream$ = 8						; size = 4
_nextTree PROC						; COMDAT
; Line 569
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 573
	mov	esi, esp
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [ecx+72]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _n$[ebp], eax
; Line 575
	mov	eax, DWORD PTR _stream$[ebp]
	movzx	ecx, BYTE PTR [eax+24]
	test	ecx, ecx
	jne	SHORT $LN1@nextTree
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR _n$[ebp]
	jb	SHORT $LN2@nextTree
	cmp	DWORD PTR _n$[ebp], 1
	jne	SHORT $LN2@nextTree
$LN1@nextTree:
; Line 579
	mov	esi, esp
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _el$[ebp], eax
; Line 580
	mov	esi, esp
	mov	eax, DWORD PTR _el$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR [edx+56]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	SHORT $LN3@nextTree
$LN2@nextTree:
; Line 585
	mov	esi, esp
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _el$[ebp], eax
; Line 586
	mov	eax, DWORD PTR _el$[ebp]
$LN3@nextTree:
; Line 587
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nextTree ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _nextToken
_TEXT	SEGMENT
_stream$ = 8						; size = 4
_nextToken PROC						; COMDAT
; Line 593
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 594
	mov	esi, esp
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 595
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nextToken ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _next
_TEXT	SEGMENT
_el$36239 = -20						; size = 4
_s$ = -8						; size = 4
_stream$ = 8						; size = 4
_next	PROC						; COMDAT
; Line 602
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 605
	mov	esi, esp
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [ecx+72]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _s$[ebp], eax
; Line 606
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR _s$[ebp]
	jb	SHORT $LN1@next
	cmp	DWORD PTR _s$[ebp], 1
	jne	SHORT $LN1@next
; Line 610
	mov	esi, esp
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _el$36239[ebp], eax
; Line 612
	mov	esi, esp
	mov	eax, DWORD PTR _el$36239[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR [edx+56]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	SHORT $LN2@next
$LN1@next:
; Line 615
	mov	esi, esp
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@next:
; Line 616
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_next	ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __next
_TEXT	SEGMENT
_t$ = -20						; size = 4
_n$ = -8						; size = 4
_stream$ = 8						; size = 4
__next	PROC						; COMDAT
; Line 626
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 630
	mov	esi, esp
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [ecx+72]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _n$[ebp], eax
; Line 632
	cmp	DWORD PTR _n$[ebp], 0
	jne	SHORT $LN4@next@2
; Line 636
	xor	eax, eax
	jmp	$LN5@next@2
$LN4@next@2:
; Line 641
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR _n$[ebp]
	jb	SHORT $LN3@next@2
; Line 643
	cmp	DWORD PTR _n$[ebp], 1
	jne	SHORT $LN2@next@2
; Line 647
	mov	esi, esp
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	$LN5@next@2
$LN2@next@2:
; Line 654
	xor	eax, eax
	jmp	$LN5@next@2
$LN3@next@2:
; Line 659
	mov	eax, DWORD PTR _stream$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN1@next@2
; Line 661
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [edx], ecx
; Line 662
	mov	esi, esp
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	SHORT $LN5@next@2
$LN1@next@2:
; Line 668
	mov	esi, esp
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [edx+152]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR [edx+60]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _t$[ebp], eax
; Line 669
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [edx], ecx
; Line 670
	mov	eax, DWORD PTR _t$[ebp]
$LN5@next@2:
; Line 671
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__next	ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DD@LIOGJBJJ@dup?$CI?$CJ?5cannot?5be?5called?5on?5a?5toke@ ; `string'
EXTRN	__imp__fprintf:PROC
EXTRN	__imp____iob_func:PROC
;	COMDAT ??_C@_0DD@LIOGJBJJ@dup?$CI?$CJ?5cannot?5be?5called?5on?5a?5toke@
CONST	SEGMENT
??_C@_0DD@LIOGJBJJ@dup?$CI?$CJ?5cannot?5be?5called?5on?5a?5toke@ DB 'dup('
	DB	') cannot be called on a token rewrite stream!!', 00H ; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT _dupTok
_TEXT	SEGMENT
_stream$ = 8						; size = 4
_el$ = 12						; size = 4
_dupTok	PROC						; COMDAT
; Line 683
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 684
	mov	esi, esp
	push	OFFSET ??_C@_0DD@LIOGJBJJ@dup?$CI?$CJ?5cannot?5be?5called?5on?5a?5toke@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 685
	xor	eax, eax
; Line 686
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_dupTok	ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _dupTree
_TEXT	SEGMENT
_stream$ = 8						; size = 4
_element$ = 12						; size = 4
_dupTree PROC						; COMDAT
; Line 697
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 698
	mov	esi, esp
	mov	eax, DWORD PTR _element$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [ecx+80]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 699
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_dupTree ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DD@CBGJDPN@dup?$CI?$CJ?5cannot?5be?5called?5on?5a?5node@ ; `string'
;	COMDAT ??_C@_0DD@CBGJDPN@dup?$CI?$CJ?5cannot?5be?5called?5on?5a?5node@
CONST	SEGMENT
??_C@_0DD@CBGJDPN@dup?$CI?$CJ?5cannot?5be?5called?5on?5a?5node@ DB 'dup()'
	DB	' cannot be called on a node rewrite stream!!!', 00H ; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT _dupTreeNode
_TEXT	SEGMENT
_stream$ = 8						; size = 4
_element$ = 12						; size = 4
_dupTreeNode PROC					; COMDAT
; Line 711
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 712
	mov	esi, esp
	push	OFFSET ??_C@_0DD@CBGJDPN@dup?$CI?$CJ?5cannot?5be?5called?5on?5a?5node@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 713
	xor	eax, eax
; Line 714
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_dupTreeNode ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _toTree
_TEXT	SEGMENT
_stream$ = 8						; size = 4
_element$ = 12						; size = 4
_toTree	PROC						; COMDAT
; Line 722
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 723
	mov	eax, DWORD PTR _element$[ebp]
; Line 724
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_toTree	ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _toTreeNode
_TEXT	SEGMENT
_stream$ = 8						; size = 4
_element$ = 12						; size = 4
_toTreeNode PROC					; COMDAT
; Line 739
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 740
	mov	esi, esp
	mov	eax, DWORD PTR _element$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [ecx+80]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 741
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_toTreeNode ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _hasNext
_TEXT	SEGMENT
_stream$ = 8						; size = 4
_hasNext PROC						; COMDAT
; Line 751
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 753
	mov	eax, DWORD PTR _stream$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN2@hasNext
	mov	eax, DWORD PTR _stream$[ebp]
	cmp	DWORD PTR [eax], 1
	jb	SHORT $LN3@hasNext
$LN2@hasNext:
	mov	eax, DWORD PTR _stream$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN4@hasNext
	mov	esi, esp
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [eax+176]
	call	ecx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	edx, DWORD PTR _stream$[ebp]
	cmp	DWORD PTR [edx], eax
	jae	SHORT $LN4@hasNext
$LN3@hasNext:
; Line 755
	mov	al, 1
	jmp	SHORT $LN5@hasNext
; Line 757
	jmp	SHORT $LN5@hasNext
$LN4@hasNext:
; Line 759
	xor	al, al
$LN5@hasNext:
; Line 761
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_hasNext ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _nextNodeToken
_TEXT	SEGMENT
_stream$ = 8						; size = 4
_nextNodeToken PROC					; COMDAT
; Line 768
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 769
	mov	esi, esp
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	eax
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR [eax+64]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 770
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nextNodeToken ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _nextNodeNode
_TEXT	SEGMENT
_stream$ = 8						; size = 4
_nextNodeNode PROC					; COMDAT
; Line 774
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 775
	mov	esi, esp
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 776
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nextNodeNode ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _nextNode
_TEXT	SEGMENT
_el$ = -20						; size = 4
_n$ = -8						; size = 4
_stream$ = 8						; size = 4
_nextNode PROC						; COMDAT
; Line 789
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 792
	mov	esi, esp
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _el$[ebp], eax
; Line 794
	mov	esi, esp
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [ecx+72]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _n$[ebp], eax
; Line 795
	mov	eax, DWORD PTR _stream$[ebp]
	movzx	ecx, BYTE PTR [eax+24]
	cmp	ecx, 1
	je	SHORT $LN1@nextNode
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR _n$[ebp]
	jbe	SHORT $LN2@nextNode
	cmp	DWORD PTR _n$[ebp], 1
	jne	SHORT $LN2@nextNode
$LN1@nextNode:
; Line 800
	mov	esi, esp
	mov	eax, DWORD PTR _el$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [ecx+80]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	SHORT $LN3@nextNode
$LN2@nextNode:
; Line 805
	mov	eax, DWORD PTR _el$[ebp]
$LN3@nextNode:
; Line 806
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nextNode ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _size
_TEXT	SEGMENT
_n$ = -8						; size = 4
_stream$ = 8						; size = 4
_size	PROC						; COMDAT
; Line 812
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 813
	mov	DWORD PTR _n$[ebp], 0
; Line 819
	mov	eax, DWORD PTR _stream$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN3@size
; Line 821
	mov	DWORD PTR _n$[ebp], 1
; Line 823
	jmp	SHORT $LN2@size
$LN3@size:
; Line 825
	mov	eax, DWORD PTR _stream$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN2@size
; Line 827
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	eax, DWORD PTR [ecx+4]
	jmp	SHORT $LN4@size
$LN2@size:
; Line 830
	mov	eax, DWORD PTR _n$[ebp]
$LN4@size:
; Line 831
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_size	ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BB@MGOOFBLH@?$DMunknown?5source?$DO?$AA@	; `string'
;	COMDAT ??_C@_0BB@MGOOFBLH@?$DMunknown?5source?$DO?$AA@
CONST	SEGMENT
??_C@_0BB@MGOOFBLH@?$DMunknown?5source?$DO?$AA@ DB '<unknown source>', 00H ; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT _getDescription
_TEXT	SEGMENT
_stream$ = 8						; size = 4
_getDescription PROC					; COMDAT
; Line 837
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 838
	mov	eax, DWORD PTR _stream$[ebp]
	cmp	DWORD PTR [eax+16], 0
	jne	SHORT $LN1@getDescrip
; Line 840
	mov	eax, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [eax+16], OFFSET ??_C@_0BB@MGOOFBLH@?$DMunknown?5source?$DO?$AA@
$LN1@getDescrip:
; Line 843
	mov	eax, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR [eax+16]
; Line 844
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_getDescription ENDP
_TEXT	ENDS
END
