; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\Users\Ken\Documents\GitHub\spengine\Antlr\antlr3lexer.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_antlr3LexerNew
EXTRN	_antlr3SetTokenAPI:PROC
EXTRN	__imp__calloc:PROC
EXTRN	_antlr3BaseRecognizerNew:PROC
EXTRN	__imp__malloc:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\users\ken\documents\github\spengine\antlr\antlr3lexer.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT _antlr3LexerNew
_TEXT	SEGMENT
_specialT$ = -20					; size = 4
_lexer$ = -8						; size = 4
_sizeHint$ = 8						; size = 4
_state$ = 12						; size = 4
_antlr3LexerNew PROC					; COMDAT
; Line 73
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 79
	mov	esi, esp
	push	80					; 00000050H
	call	DWORD PTR __imp__malloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _lexer$[ebp], eax
; Line 81
	cmp	DWORD PTR _lexer$[ebp], 0
	jne	SHORT $LN4@antlr3Lexe
; Line 83
	xor	eax, eax
	jmp	$LN5@antlr3Lexe
$LN4@antlr3Lexe:
; Line 88
	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	mov	ecx, DWORD PTR _sizeHint$[ebp]
	push	ecx
	push	1
	call	_antlr3BaseRecognizerNew
	add	esp, 12					; 0000000cH
	mov	edx, DWORD PTR _lexer$[ebp]
	mov	DWORD PTR [edx+12], eax
; Line 90
	mov	eax, DWORD PTR _lexer$[ebp]
	cmp	DWORD PTR [eax+12], 0
	jne	SHORT $LN3@antlr3Lexe
; Line 92
	mov	esi, esp
	mov	eax, DWORD PTR _lexer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _lexer$[ebp]
	mov	edx, DWORD PTR [ecx+76]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 93
	xor	eax, eax
	jmp	$LN5@antlr3Lexe
$LN3@antlr3Lexe:
; Line 95
	mov	eax, DWORD PTR _lexer$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _lexer$[ebp]
	mov	DWORD PTR [ecx], edx
; Line 97
	mov	eax, DWORD PTR _lexer$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+40], OFFSET _displayRecognitionError
; Line 98
	mov	eax, DWORD PTR _lexer$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+36], OFFSET _reportError
; Line 99
	mov	eax, DWORD PTR _lexer$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+140], OFFSET _reset
; Line 100
	mov	eax, DWORD PTR _lexer$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+124], OFFSET _getCurrentInputSymbol
; Line 101
	mov	eax, DWORD PTR _lexer$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+128], OFFSET _getMissingSymbol
; Line 105
	mov	eax, DWORD PTR _lexer$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+8]
	cmp	DWORD PTR [edx+56], 0
	jne	$LN2@antlr3Lexe
; Line 107
	mov	esi, esp
	push	304					; 00000130H
	push	1
	call	DWORD PTR __imp__calloc
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _lexer$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	ecx, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+56], eax
; Line 109
	mov	eax, DWORD PTR _lexer$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+8]
	cmp	DWORD PTR [edx+56], 0
	jne	SHORT $LN1@antlr3Lexe
; Line 111
	mov	esi, esp
	mov	eax, DWORD PTR _lexer$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _lexer$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax+144]
	call	ecx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 112
	mov	esi, esp
	mov	eax, DWORD PTR _lexer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _lexer$[ebp]
	mov	edx, DWORD PTR [ecx+76]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 114
	xor	eax, eax
	jmp	$LN5@antlr3Lexe
$LN1@antlr3Lexe:
; Line 116
	mov	eax, DWORD PTR _lexer$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [edx+56]
	mov	ecx, DWORD PTR _lexer$[ebp]
	mov	DWORD PTR [eax+296], ecx
; Line 121
	mov	eax, DWORD PTR _lexer$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [edx+56]
	mov	DWORD PTR [eax], OFFSET _nextToken
; Line 122
	mov	eax, DWORD PTR _lexer$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [edx+56]
	mov	DWORD PTR [eax+4], 0
; Line 124
	mov	eax, DWORD PTR _lexer$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+52], 0
$LN2@antlr3Lexe:
; Line 129
	mov	eax, DWORD PTR _lexer$[ebp]
	mov	DWORD PTR [eax+16], OFFSET _setCharStream
; Line 130
	mov	eax, DWORD PTR _lexer$[ebp]
	mov	DWORD PTR [eax+36], OFFSET _mTokens
; Line 131
	mov	eax, DWORD PTR _lexer$[ebp]
	mov	DWORD PTR [eax+16], OFFSET _setCharStream
; Line 132
	mov	eax, DWORD PTR _lexer$[ebp]
	mov	DWORD PTR [eax+20], OFFSET _pushCharStream
; Line 133
	mov	eax, DWORD PTR _lexer$[ebp]
	mov	DWORD PTR [eax+24], OFFSET _popCharStream
; Line 134
	mov	eax, DWORD PTR _lexer$[ebp]
	mov	DWORD PTR [eax+32], OFFSET _emit
; Line 135
	mov	eax, DWORD PTR _lexer$[ebp]
	mov	DWORD PTR [eax+28], OFFSET _emitNew
; Line 136
	mov	eax, DWORD PTR _lexer$[ebp]
	mov	DWORD PTR [eax+40], OFFSET _matchs
; Line 137
	mov	eax, DWORD PTR _lexer$[ebp]
	mov	DWORD PTR [eax+44], OFFSET _matchc
; Line 138
	mov	eax, DWORD PTR _lexer$[ebp]
	mov	DWORD PTR [eax+48], OFFSET _matchRange
; Line 139
	mov	eax, DWORD PTR _lexer$[ebp]
	mov	DWORD PTR [eax+52], OFFSET _matchAny
; Line 140
	mov	eax, DWORD PTR _lexer$[ebp]
	mov	DWORD PTR [eax+56], OFFSET _recover
; Line 141
	mov	eax, DWORD PTR _lexer$[ebp]
	mov	DWORD PTR [eax+60], OFFSET _getLine
; Line 142
	mov	eax, DWORD PTR _lexer$[ebp]
	mov	DWORD PTR [eax+64], OFFSET _getCharIndex
; Line 143
	mov	eax, DWORD PTR _lexer$[ebp]
	mov	DWORD PTR [eax+68], OFFSET _getCharPositionInLine
; Line 144
	mov	eax, DWORD PTR _lexer$[ebp]
	mov	DWORD PTR [eax+72], OFFSET _getText
; Line 145
	mov	eax, DWORD PTR _lexer$[ebp]
	mov	DWORD PTR [eax+76], OFFSET _freeLexer
; Line 149
	mov	eax, DWORD PTR _lexer$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [edx+56]
	add	eax, 8
	mov	DWORD PTR _specialT$[ebp], eax
; Line 150
	mov	eax, DWORD PTR _specialT$[ebp]
	push	eax
	call	_antlr3SetTokenAPI
	add	esp, 4
; Line 151
	mov	esi, esp
	push	-1
	mov	eax, DWORD PTR _specialT$[ebp]
	push	eax
	mov	ecx, DWORD PTR _specialT$[ebp]
	mov	edx, DWORD PTR [ecx+88]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 152
	mov	eax, DWORD PTR _specialT$[ebp]
	mov	BYTE PTR [eax+4], 1
; Line 153
	mov	eax, DWORD PTR _specialT$[ebp]
	mov	DWORD PTR [eax+8], 0
; Line 154
	mov	eax, DWORD PTR _specialT$[ebp]
	mov	DWORD PTR [eax+44], 0
; Line 155
	mov	eax, DWORD PTR _specialT$[ebp]
	mov	DWORD PTR [eax+64], 0
; Line 156
	mov	eax, DWORD PTR _specialT$[ebp]
	mov	DWORD PTR [eax+52], 0
; Line 157
	mov	eax, DWORD PTR _specialT$[ebp]
	mov	DWORD PTR [eax+56], 0
; Line 158
	mov	eax, DWORD PTR _specialT$[ebp]
	mov	DWORD PTR [eax+60], 0
; Line 162
	mov	eax, DWORD PTR _lexer$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [edx+56]
	add	eax, 152				; 00000098H
	mov	DWORD PTR _specialT$[ebp], eax
; Line 163
	mov	eax, DWORD PTR _specialT$[ebp]
	push	eax
	call	_antlr3SetTokenAPI
	add	esp, 4
; Line 164
	mov	esi, esp
	push	0
	mov	eax, DWORD PTR _specialT$[ebp]
	push	eax
	mov	ecx, DWORD PTR _specialT$[ebp]
	mov	edx, DWORD PTR [ecx+88]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 165
	mov	eax, DWORD PTR _specialT$[ebp]
	mov	BYTE PTR [eax+4], 1
; Line 166
	mov	eax, DWORD PTR _specialT$[ebp]
	mov	DWORD PTR [eax+8], 0
; Line 167
	mov	eax, DWORD PTR _specialT$[ebp]
	mov	DWORD PTR [eax+64], 0
; Line 168
	mov	eax, DWORD PTR _specialT$[ebp]
	mov	DWORD PTR [eax+52], 0
; Line 169
	mov	eax, DWORD PTR _specialT$[ebp]
	mov	DWORD PTR [eax+56], 0
; Line 170
	mov	eax, DWORD PTR _specialT$[ebp]
	mov	DWORD PTR [eax+60], 0
; Line 171
	mov	eax, DWORD PTR _lexer$[ebp]
$LN5@antlr3Lexe:
; Line 172
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_antlr3LexerNew ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _reset
_TEXT	SEGMENT
_lexer$ = -8						; size = 4
_rec$ = 8						; size = 4
_reset	PROC						; COMDAT
; Line 176
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 179
	mov	eax, DWORD PTR _rec$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _lexer$[ebp], ecx
; Line 181
	mov	eax, DWORD PTR _lexer$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+48], 0
; Line 182
	mov	eax, DWORD PTR _lexer$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+64], 0
; Line 183
	mov	eax, DWORD PTR _lexer$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+60], 0
; Line 184
	mov	eax, DWORD PTR _lexer$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+76], -1
; Line 185
	mov	eax, DWORD PTR _lexer$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+72], -1
; Line 186
	mov	eax, DWORD PTR _lexer$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+68], -1
; Line 188
	mov	eax, DWORD PTR _lexer$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+80], 0
; Line 193
	mov	eax, DWORD PTR _lexer$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+8]
	cmp	DWORD PTR [edx+52], 0
	je	SHORT $LN2@reset
; Line 195
	mov	eax, DWORD PTR _lexer$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+8]
	mov	esi, esp
	mov	eax, DWORD PTR [edx+52]
	push	eax
	mov	ecx, DWORD PTR _lexer$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [eax+52]
	mov	edx, DWORD PTR [ecx+168]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@reset:
; Line 197
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_reset	ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _nextToken
_TEXT	SEGMENT
_lexer$36044 = -20					; size = 4
_tok$ = -8						; size = 4
_toksource$ = 8						; size = 4
_nextToken PROC						; COMDAT
; Line 331
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 336
	mov	eax, DWORD PTR _toksource$[ebp]
	push	eax
	call	_nextTokenStr
	add	esp, 4
	mov	DWORD PTR _tok$[ebp], eax
$LN4@nextToken:
; Line 351
	mov	eax, DWORD PTR _tok$[ebp]
	cmp	DWORD PTR [eax], -1
	jne	SHORT $LN3@nextToken
; Line 355
	mov	eax, DWORD PTR _toksource$[ebp]
	mov	ecx, DWORD PTR [eax+296]
	mov	DWORD PTR _lexer$36044[ebp], ecx
; Line 357
	mov	eax, DWORD PTR _lexer$36044[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+8]
	cmp	DWORD PTR [edx+100], 0
	je	SHORT $LN2@nextToken
	mov	eax, DWORD PTR _lexer$36044[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+8]
	mov	esi, esp
	mov	eax, DWORD PTR [edx+100]
	push	eax
	mov	ecx, DWORD PTR _lexer$36044[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [eax+100]
	mov	edx, DWORD PTR [ecx+24]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jbe	SHORT $LN2@nextToken
; Line 363
	mov	esi, esp
	mov	eax, DWORD PTR _lexer$36044[ebp]
	push	eax
	mov	ecx, DWORD PTR _lexer$36044[ebp]
	mov	edx, DWORD PTR [ecx+24]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 364
	mov	eax, DWORD PTR _toksource$[ebp]
	push	eax
	call	_nextTokenStr
	add	esp, 4
	mov	DWORD PTR _tok$[ebp], eax
; Line 366
	jmp	SHORT $LN1@nextToken
$LN2@nextToken:
; Line 373
	jmp	SHORT $LN3@nextToken
$LN1@nextToken:
; Line 376
	jmp	SHORT $LN4@nextToken
$LN3@nextToken:
; Line 380
	mov	eax, DWORD PTR _tok$[ebp]
; Line 381
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nextToken ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _nextTokenStr
_TEXT	SEGMENT
_teof$36029 = -56					; size = 4
_istream$ = -44						; size = 4
_input$ = -32						; size = 4
_state$ = -20						; size = 4
_lexer$ = -8						; size = 4
_toksource$ = 8						; size = 4
_nextTokenStr PROC					; COMDAT
; Line 218
	push	ebp
	mov	ebp, esp
	sub	esp, 252				; 000000fcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-252]
	mov	ecx, 63					; 0000003fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 224
	mov	eax, DWORD PTR _toksource$[ebp]
	mov	ecx, DWORD PTR [eax+296]
	mov	DWORD PTR _lexer$[ebp], ecx
; Line 225
	mov	eax, DWORD PTR _lexer$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _state$[ebp], edx
; Line 226
	mov	eax, DWORD PTR _lexer$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _input$[ebp], ecx
; Line 227
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _istream$[ebp], ecx
$LN10@nextTokenS:
; Line 236
	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+48], 0
; Line 237
	mov	eax, DWORD PTR _state$[ebp]
	mov	BYTE PTR [eax], 0
; Line 238
	mov	eax, DWORD PTR _state$[ebp]
	mov	BYTE PTR [eax+24], 0
$LN8@nextTokenS:
; Line 246
	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+60], 0
; Line 247
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _input$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR [eax+76], edx
; Line 248
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _input$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR [eax+72], edx
; Line 249
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _input$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR [eax+68], edx
; Line 250
	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+80], 0
; Line 251
	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+96], 0
; Line 252
	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+84], 0
; Line 253
	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+88], 0
; Line 254
	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+92], 0
; Line 256
	mov	esi, esp
	push	1
	mov	eax, DWORD PTR _istream$[ebp]
	push	eax
	mov	ecx, DWORD PTR _istream$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, -1
	jne	$LN6@nextTokenS
; Line 261
	mov	eax, DWORD PTR _toksource$[ebp]
	add	eax, 8
	mov	DWORD PTR _teof$36029[ebp], eax
; Line 263
	mov	esi, esp
	mov	eax, DWORD PTR _lexer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _lexer$[ebp]
	mov	edx, DWORD PTR [ecx+64]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	eax
	mov	eax, DWORD PTR _teof$36029[ebp]
	push	eax
	mov	ecx, DWORD PTR _teof$36029[ebp]
	mov	edx, DWORD PTR [ecx+128]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 264
	mov	esi, esp
	mov	eax, DWORD PTR _lexer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _lexer$[ebp]
	mov	edx, DWORD PTR [ecx+64]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	eax
	mov	eax, DWORD PTR _teof$36029[ebp]
	push	eax
	mov	ecx, DWORD PTR _teof$36029[ebp]
	mov	edx, DWORD PTR [ecx+136]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 265
	mov	esi, esp
	mov	eax, DWORD PTR _lexer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _lexer$[ebp]
	mov	edx, DWORD PTR [ecx+60]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	eax
	mov	eax, DWORD PTR _teof$36029[ebp]
	push	eax
	mov	ecx, DWORD PTR _teof$36029[ebp]
	mov	edx, DWORD PTR [ecx+96]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 266
	mov	eax, DWORD PTR _teof$36029[ebp]
	mov	BYTE PTR [eax+4], 1
; Line 267
	mov	eax, DWORD PTR _teof$36029[ebp]
	jmp	$LN11@nextTokenS
$LN6@nextTokenS:
; Line 270
	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+48], 0
; Line 271
	mov	eax, DWORD PTR _state$[ebp]
	mov	BYTE PTR [eax], 0
; Line 272
	mov	eax, DWORD PTR _state$[ebp]
	mov	BYTE PTR [eax+24], 0
; Line 276
	mov	esi, esp
	mov	eax, DWORD PTR _lexer$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _lexer$[ebp]
	mov	eax, DWORD PTR [edx+36]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 278
	mov	eax, DWORD PTR _state$[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 1
	jne	SHORT $LN5@nextTokenS
; Line 282
	mov	eax, DWORD PTR _state$[ebp]
	mov	BYTE PTR [eax+24], 1
; Line 283
	mov	esi, esp
	mov	eax, DWORD PTR _lexer$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _lexer$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax+36]
	call	ecx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 284
	mov	esi, esp
	mov	eax, DWORD PTR _lexer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _lexer$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 286
	jmp	SHORT $LN4@nextTokenS
$LN5@nextTokenS:
; Line 288
	mov	eax, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [eax+48], 0
	jne	SHORT $LN3@nextTokenS
; Line 292
	mov	eax, DWORD PTR _lexer$[ebp]
	push	eax
	call	_emit
	add	esp, 4
	jmp	SHORT $LN2@nextTokenS
$LN3@nextTokenS:
; Line 294
	mov	eax, DWORD PTR _toksource$[ebp]
	add	eax, 152				; 00000098H
	mov	ecx, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [ecx+48], eax
	jne	SHORT $LN2@nextTokenS
; Line 299
	jmp	$LN8@nextTokenS
$LN2@nextTokenS:
; Line 304
	mov	eax, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [eax+48]
	jmp	SHORT $LN11@nextTokenS
$LN4@nextTokenS:
; Line 306
	jmp	$LN8@nextTokenS
; Line 307
	jmp	$LN10@nextTokenS
$LN11@nextTokenS:
; Line 308
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 252				; 000000fcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nextTokenStr ENDP
_TEXT	ENDS
PUBLIC	_antlr3LexerNewStream
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _antlr3LexerNewStream
_TEXT	SEGMENT
_lexer$ = -8						; size = 4
_sizeHint$ = 8						; size = 4
_input$ = 12						; size = 4
_state$ = 16						; size = 4
_antlr3LexerNewStream PROC				; COMDAT
; Line 385
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 390
	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	mov	ecx, DWORD PTR _sizeHint$[ebp]
	push	ecx
	call	_antlr3LexerNew
	add	esp, 8
	mov	DWORD PTR _lexer$[ebp], eax
; Line 392
	cmp	DWORD PTR _lexer$[ebp], 0
	je	SHORT $LN1@antlr3Lexe@2
; Line 396
	mov	eax, DWORD PTR _input$[ebp]
	push	eax
	mov	ecx, DWORD PTR _lexer$[ebp]
	push	ecx
	call	_setCharStream
	add	esp, 8
$LN1@antlr3Lexe@2:
; Line 399
	mov	eax, DWORD PTR _lexer$[ebp]
; Line 400
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_antlr3LexerNewStream ENDP
_TEXT	ENDS
PUBLIC	??_C@_0EG@JALJLDIL@lexer?9?$DOmTokens?$CI?$CJ?3?5Error?3?5No?5lexe@ ; `string'
EXTRN	__imp__fprintf:PROC
EXTRN	__imp____iob_func:PROC
;	COMDAT ??_C@_0EG@JALJLDIL@lexer?9?$DOmTokens?$CI?$CJ?3?5Error?3?5No?5lexe@
CONST	SEGMENT
??_C@_0EG@JALJLDIL@lexer?9?$DOmTokens?$CI?$CJ?3?5Error?3?5No?5lexe@ DB 'l'
	DB	'exer->mTokens(): Error: No lexer rules were added to the lexe'
	DB	'r yet!', 0aH, 00H				; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT _mTokens
_TEXT	SEGMENT
_lexer$ = 8						; size = 4
_mTokens PROC						; COMDAT
; Line 403
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 404
	cmp	DWORD PTR _lexer$[ebp], 0
	je	SHORT $LN2@mTokens
; Line 406
	mov	esi, esp
	push	OFFSET ??_C@_0EG@JALJLDIL@lexer?9?$DOmTokens?$CI?$CJ?3?5Error?3?5No?5lexe@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@mTokens:
; Line 408
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_mTokens ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _reportError
_TEXT	SEGMENT
_rec$ = 8						; size = 4
_reportError PROC					; COMDAT
; Line 412
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 415
	mov	eax, DWORD PTR _rec$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+28]
	add	edx, 1
	mov	eax, DWORD PTR _rec$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+28], edx
; Line 417
	mov	eax, DWORD PTR _rec$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	esi, esp
	mov	edx, DWORD PTR [ecx+40]
	push	edx
	mov	eax, DWORD PTR _rec$[ebp]
	push	eax
	mov	ecx, DWORD PTR _rec$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 418
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_reportError ENDP
_TEXT	ENDS
PUBLIC	??_C@_0EB@JKDHCAGB@is?5also?5the?5end?5of?5the?5line?0?5so?5@ ; `string'
PUBLIC	??_C@_0BJ@MNCIDMAD@looks?5like?5this?3?6?7?7?$CF?4?$CKs?6?$AA@ ; `string'
PUBLIC	??_C@_0DL@OFNCJFPJ@?7?5The?5lexer?5was?5matching?5from?5li@ ; `string'
PUBLIC	??_C@_0HE@ELHLADFJ@?$CIend?5of?5input?$CJ?4?6?7?5This?5indicates@ ; `string'
PUBLIC	??_C@_06LNEMBBGL@?7?$CF?4?$CKs?6?$AA@		; `string'
PUBLIC	??_C@_0BE@GGCOLI@near?5char?$CI?$CF?$CD02X?$CJ?5?3?6?$AA@ ; `string'
PUBLIC	??_C@_0N@LFOODOBD@near?5?8?$CFc?8?5?3?6?$AA@	; `string'
PUBLIC	??_C@_0CG@CKJILOKO@?3?5lexer?5error?5?$CFd?5?3?6?7?$CFs?5at?5offset@ ; `string'
PUBLIC	??_C@_04CGKAJBAP@?$CFd?$CJ?5?$AA@		; `string'
PUBLIC	??_C@_03ECLNAHEM@?$CFs?$CI?$AA@			; `string'
PUBLIC	??_C@_0BC@NHAPJBAE@?9unknown?5source?9?$CI?$AA@	; `string'
EXTRN	__imp__isprint:PROC
;	COMDAT ??_C@_0EB@JKDHCAGB@is?5also?5the?5end?5of?5the?5line?0?5so?5@
CONST	SEGMENT
??_C@_0EB@JKDHCAGB@is?5also?5the?5end?5of?5the?5line?0?5so?5@ DB 'is also'
	DB	' the end of the line, so you must check your lexer rules', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@MNCIDMAD@looks?5like?5this?3?6?7?7?$CF?4?$CKs?6?$AA@
CONST	SEGMENT
??_C@_0BJ@MNCIDMAD@looks?5like?5this?3?6?7?7?$CF?4?$CKs?6?$AA@ DB 'looks '
	DB	'like this:', 0aH, 09H, 09H, '%.*s', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DL@OFNCJFPJ@?7?5The?5lexer?5was?5matching?5from?5li@
CONST	SEGMENT
??_C@_0DL@OFNCJFPJ@?7?5The?5lexer?5was?5matching?5from?5li@ DB 09H, ' The'
	DB	' lexer was matching from line %d, offset %d, which', 0aH, 09H
	DB	' ', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0HE@ELHLADFJ@?$CIend?5of?5input?$CJ?4?6?7?5This?5indicates@
CONST	SEGMENT
??_C@_0HE@ELHLADFJ@?$CIend?5of?5input?$CJ?4?6?7?5This?5indicates@ DB '(en'
	DB	'd of input).', 0aH, 09H, ' This indicates a poorly specified '
	DB	'lexer RULE', 0aH, 09H, ' or unterminated input element such a'
	DB	's: "STRING["]', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06LNEMBBGL@?7?$CF?4?$CKs?6?$AA@
CONST	SEGMENT
??_C@_06LNEMBBGL@?7?$CF?4?$CKs?6?$AA@ DB 09H, '%.*s', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@GGCOLI@near?5char?$CI?$CF?$CD02X?$CJ?5?3?6?$AA@
CONST	SEGMENT
??_C@_0BE@GGCOLI@near?5char?$CI?$CF?$CD02X?$CJ?5?3?6?$AA@ DB 'near char(%'
	DB	'#02X) :', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@LFOODOBD@near?5?8?$CFc?8?5?3?6?$AA@
CONST	SEGMENT
??_C@_0N@LFOODOBD@near?5?8?$CFc?8?5?3?6?$AA@ DB 'near ''%c'' :', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@CKJILOKO@?3?5lexer?5error?5?$CFd?5?3?6?7?$CFs?5at?5offset@
CONST	SEGMENT
??_C@_0CG@CKJILOKO@?3?5lexer?5error?5?$CFd?5?3?6?7?$CFs?5at?5offset@ DB ':'
	DB	' lexer error %d :', 0aH, 09H, '%s at offset %d, ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04CGKAJBAP@?$CFd?$CJ?5?$AA@
CONST	SEGMENT
??_C@_04CGKAJBAP@?$CFd?$CJ?5?$AA@ DB '%d) ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03ECLNAHEM@?$CFs?$CI?$AA@
CONST	SEGMENT
??_C@_03ECLNAHEM@?$CFs?$CI?$AA@ DB '%s(', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@NHAPJBAE@?9unknown?5source?9?$CI?$AA@
CONST	SEGMENT
??_C@_0BC@NHAPJBAE@?9unknown?5source?9?$CI?$AA@ DB '-unknown source-(', 00H ; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT _displayRecognitionError
_TEXT	SEGMENT
tv206 = -244						; size = 4
tv166 = -244						; size = 4
_width$36084 = -44					; size = 4
_ftext$ = -32						; size = 4
_ex$ = -20						; size = 4
_lexer$ = -8						; size = 4
_recognizer$ = 8					; size = 4
_tokenNames$ = 12					; size = 4
_displayRecognitionError PROC				; COMDAT
; Line 428
	push	ebp
	mov	ebp, esp
	sub	esp, 244				; 000000f4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 61					; 0000003dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 433
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _lexer$[ebp], ecx
; Line 434
	mov	eax, DWORD PTR _lexer$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _ex$[ebp], eax
; Line 438
	mov	eax, DWORD PTR _ex$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN8@displayRec
; Line 440
	mov	esi, esp
	push	OFFSET ??_C@_0BC@NHAPJBAE@?9unknown?5source?9?$CI?$AA@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 442
	jmp	SHORT $LN7@displayRec
$LN8@displayRec:
; Line 444
	mov	esi, esp
	mov	eax, DWORD PTR _ex$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _ex$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax+96]
	call	ecx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _ftext$[ebp], eax
; Line 445
	mov	esi, esp
	mov	eax, DWORD PTR _ftext$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	push	OFFSET ??_C@_03ECLNAHEM@?$CFs?$CI?$AA@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN7@displayRec:
; Line 448
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+4]
	mov	esi, esp
	mov	eax, DWORD PTR [edx+44]
	push	eax
	push	OFFSET ??_C@_04CGKAJBAP@?$CFd?$CJ?5?$AA@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 453
	mov	eax, DWORD PTR _ex$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	add	ecx, 1
	mov	esi, esp
	push	ecx
	mov	edx, DWORD PTR _ex$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _ex$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	push	OFFSET ??_C@_0CG@CKJILOKO@?3?5lexer?5error?5?$CFd?5?3?6?7?$CFs?5at?5offset@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 457
	mov	eax, DWORD PTR _lexer$[ebp]
	mov	esi, DWORD PTR [eax+8]
	mov	edi, esp
	mov	ecx, DWORD PTR _lexer$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _lexer$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+80]
	call	edx
	add	esp, 4
	cmp	edi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR [esi+8]
	add	ecx, eax
	mov	edx, DWORD PTR _ex$[ebp]
	sub	ecx, DWORD PTR [edx+20]
	mov	DWORD PTR _width$36084[ebp], ecx
; Line 459
	cmp	DWORD PTR _width$36084[ebp], 1
	jl	$LN6@displayRec
; Line 461
	mov	esi, esp
	mov	eax, DWORD PTR _ex$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	call	DWORD PTR __imp__isprint
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN5@displayRec
; Line 463
	mov	esi, esp
	mov	eax, DWORD PTR _ex$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	push	OFFSET ??_C@_0N@LFOODOBD@near?5?8?$CFc?8?5?3?6?$AA@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 465
	jmp	SHORT $LN4@displayRec
$LN5@displayRec:
; Line 467
	mov	eax, DWORD PTR _ex$[ebp]
	movzx	ecx, BYTE PTR [eax+40]
	mov	esi, esp
	push	ecx
	push	OFFSET ??_C@_0BE@GGCOLI@near?5char?$CI?$CF?$CD02X?$CJ?5?3?6?$AA@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN4@displayRec:
; Line 469
	cmp	DWORD PTR _width$36084[ebp], 20		; 00000014H
	jle	SHORT $LN11@displayRec
	mov	DWORD PTR tv166[ebp], 20		; 00000014H
	jmp	SHORT $LN12@displayRec
$LN11@displayRec:
	mov	eax, DWORD PTR _width$36084[ebp]
	mov	DWORD PTR tv166[ebp], eax
$LN12@displayRec:
	mov	esi, esp
	mov	ecx, DWORD PTR _ex$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	push	edx
	mov	eax, DWORD PTR tv166[ebp]
	push	eax
	push	OFFSET ??_C@_06LNEMBBGL@?7?$CF?4?$CKs?6?$AA@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 471
	jmp	$LN9@displayRec
$LN6@displayRec:
; Line 473
	mov	esi, esp
	push	OFFSET ??_C@_0HE@ELHLADFJ@?$CIend?5of?5input?$CJ?4?6?7?5This?5indicates@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 477
	mov	eax, DWORD PTR _lexer$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+8]
	mov	esi, esp
	mov	eax, DWORD PTR [edx+72]
	push	eax
	mov	ecx, DWORD PTR _lexer$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [eax+68]
	push	ecx
	push	OFFSET ??_C@_0DL@OFNCJFPJ@?7?5The?5lexer?5was?5matching?5from?5li@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 478
	mov	eax, DWORD PTR _lexer$[ebp]
	mov	esi, DWORD PTR [eax+8]
	mov	edi, esp
	mov	ecx, DWORD PTR _lexer$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _lexer$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+80]
	call	edx
	add	esp, 4
	cmp	edi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR [esi+8]
	add	ecx, eax
	mov	edx, DWORD PTR _lexer$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	edx, DWORD PTR [eax+8]
	sub	ecx, DWORD PTR [edx+76]
	mov	DWORD PTR _width$36084[ebp], ecx
; Line 480
	cmp	DWORD PTR _width$36084[ebp], 1
	jl	SHORT $LN2@displayRec
; Line 482
	cmp	DWORD PTR _width$36084[ebp], 20		; 00000014H
	jle	SHORT $LN13@displayRec
	mov	DWORD PTR tv206[ebp], 20		; 00000014H
	jmp	SHORT $LN14@displayRec
$LN13@displayRec:
	mov	eax, DWORD PTR _width$36084[ebp]
	mov	DWORD PTR tv206[ebp], eax
$LN14@displayRec:
	mov	ecx, DWORD PTR _lexer$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx+8]
	mov	esi, esp
	mov	ecx, DWORD PTR [eax+76]
	push	ecx
	mov	edx, DWORD PTR tv206[ebp]
	push	edx
	push	OFFSET ??_C@_0BJ@MNCIDMAD@looks?5like?5this?3?6?7?7?$CF?4?$CKs?6?$AA@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 484
	jmp	SHORT $LN9@displayRec
$LN2@displayRec:
; Line 486
	mov	esi, esp
	push	OFFSET ??_C@_0EB@JKDHCAGB@is?5also?5the?5end?5of?5the?5line?0?5so?5@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN9@displayRec:
; Line 490
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_displayRecognitionError ENDP
_TEXT	ENDS
EXTRN	_antlr3RecognitionExceptionNew:PROC
EXTRN	_antlr3TokenFactoryNew:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _setCharStream
_TEXT	SEGMENT
_lexer$ = 8						; size = 4
_input$ = 12						; size = 4
_setCharStream PROC					; COMDAT
; Line 493
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 496
	mov	eax, DWORD PTR _lexer$[ebp]
	mov	ecx, DWORD PTR _input$[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 503
	mov	eax, DWORD PTR _lexer$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+8]
	cmp	DWORD PTR [edx+52], 0
	jne	SHORT $LN4@setCharStr
; Line 505
	mov	eax, DWORD PTR _input$[ebp]
	push	eax
	call	_antlr3TokenFactoryNew
	add	esp, 4
	mov	ecx, DWORD PTR _lexer$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	ecx, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+52], eax
; Line 507
	jmp	SHORT $LN3@setCharStr
$LN4@setCharStr:
; Line 515
	mov	esi, esp
	mov	eax, DWORD PTR _input$[ebp]
	push	eax
	mov	ecx, DWORD PTR _lexer$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [eax+52]
	push	ecx
	mov	edx, DWORD PTR _lexer$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+52]
	mov	eax, DWORD PTR [edx+172]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@setCharStr:
; Line 521
	mov	eax, DWORD PTR _lexer$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [edx+56]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN2@setCharStr
; Line 523
	mov	eax, DWORD PTR _lexer$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [edx+56]
	mov	ecx, DWORD PTR _input$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+4], edx
; Line 528
	mov	eax, DWORD PTR _lexer$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [edx+56]
	cmp	DWORD PTR [eax+16], 0
	jne	SHORT $LN2@setCharStr
; Line 530
	mov	eax, DWORD PTR _lexer$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [edx+56]
	mov	ecx, DWORD PTR _input$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+16], edx
$LN2@setCharStr:
; Line 536
	mov	eax, DWORD PTR _lexer$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+136], OFFSET _antlr3RecognitionExceptionNew
; Line 540
	mov	eax, DWORD PTR _lexer$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+48], 0
; Line 541
	mov	eax, DWORD PTR _lexer$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+80], 0
; Line 542
	mov	eax, DWORD PTR _lexer$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+76], -1
; Line 546
	mov	eax, DWORD PTR _lexer$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [edx+56]
	mov	ecx, DWORD PTR _input$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	mov	DWORD PTR [eax+300], edx
; Line 547
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_setCharStream ENDP
_TEXT	ENDS
EXTRN	_antlr3StackNew:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _pushCharStream
_TEXT	SEGMENT
_lexer$ = 8						; size = 4
_input$ = 12						; size = 4
_pushCharStream PROC					; COMDAT
; Line 565
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 568
	mov	eax, DWORD PTR _lexer$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+8]
	cmp	DWORD PTR [edx+100], 0
	jne	SHORT $LN2@pushCharSt
; Line 573
	push	0
	call	_antlr3StackNew
	add	esp, 4
	mov	ecx, DWORD PTR _lexer$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	ecx, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+100], eax
; Line 575
	mov	eax, DWORD PTR _lexer$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+8]
	cmp	DWORD PTR [edx+100], 0
	jne	SHORT $LN2@pushCharSt
; Line 580
	jmp	SHORT $LN3@pushCharSt
$LN2@pushCharSt:
; Line 587
	mov	eax, DWORD PTR _lexer$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	esi, esp
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _lexer$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+28]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 588
	mov	esi, esp
	push	0
	mov	eax, DWORD PTR _lexer$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _lexer$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+100]
	push	edx
	mov	eax, DWORD PTR _lexer$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [edx+100]
	mov	ecx, DWORD PTR [eax+20]
	call	ecx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 592
	mov	esi, esp
	mov	eax, DWORD PTR _input$[ebp]
	push	eax
	mov	ecx, DWORD PTR _lexer$[ebp]
	push	ecx
	mov	edx, DWORD PTR _lexer$[ebp]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@pushCharSt:
; Line 593
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_pushCharStream ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _popCharStream
_TEXT	SEGMENT
_input$ = -8						; size = 4
_lexer$ = 8						; size = 4
_popCharStream PROC					; COMDAT
; Line 611
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 617
	mov	eax, DWORD PTR _lexer$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+8]
	cmp	DWORD PTR [edx+100], 0
	je	$LN2@popCharStr
	mov	eax, DWORD PTR _lexer$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+8]
	mov	esi, esp
	mov	eax, DWORD PTR [edx+100]
	push	eax
	mov	ecx, DWORD PTR _lexer$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [eax+100]
	mov	edx, DWORD PTR [ecx+24]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jbe	SHORT $LN2@popCharStr
; Line 625
	mov	eax, DWORD PTR _lexer$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [edx+100]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _input$[ebp], ecx
; Line 626
	mov	eax, DWORD PTR _lexer$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+8]
	mov	esi, esp
	mov	eax, DWORD PTR [edx+100]
	push	eax
	mov	ecx, DWORD PTR _lexer$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [eax+100]
	mov	edx, DWORD PTR [ecx+12]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 630
	mov	esi, esp
	mov	eax, DWORD PTR _input$[ebp]
	push	eax
	mov	ecx, DWORD PTR _lexer$[ebp]
	push	ecx
	mov	edx, DWORD PTR _lexer$[ebp]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 631
	mov	eax, DWORD PTR _lexer$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	esi, esp
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _lexer$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+40]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@popCharStr:
; Line 634
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_popCharStream ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _emitNew
_TEXT	SEGMENT
_lexer$ = 8						; size = 4
_token$ = 12						; size = 4
_emitNew PROC						; COMDAT
; Line 637
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 638
	mov	eax, DWORD PTR _lexer$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _token$[ebp]
	mov	DWORD PTR [edx+48], eax
; Line 639
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_emitNew ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _emit
_TEXT	SEGMENT
_token$ = -8						; size = 4
_lexer$ = 8						; size = 4
_emit	PROC						; COMDAT
; Line 643
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 651
	mov	eax, DWORD PTR _lexer$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+8]
	mov	esi, esp
	mov	eax, DWORD PTR [edx+52]
	push	eax
	mov	ecx, DWORD PTR _lexer$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [eax+52]
	mov	edx, DWORD PTR [ecx+164]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _token$[ebp], eax
; Line 657
	mov	eax, DWORD PTR _lexer$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _token$[ebp]
	mov	ecx, DWORD PTR [edx+64]
	mov	DWORD PTR [eax], ecx
; Line 658
	mov	eax, DWORD PTR _lexer$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _token$[ebp]
	mov	ecx, DWORD PTR [edx+60]
	mov	DWORD PTR [eax+24], ecx
; Line 659
	mov	eax, DWORD PTR _lexer$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _token$[ebp]
	mov	ecx, DWORD PTR [edx+76]
	mov	DWORD PTR [eax+36], ecx
; Line 660
	mov	esi, esp
	mov	eax, DWORD PTR _lexer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _lexer$[ebp]
	mov	edx, DWORD PTR [ecx+64]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	sub	eax, 1
	mov	ecx, DWORD PTR _token$[ebp]
	mov	DWORD PTR [ecx+40], eax
; Line 661
	mov	eax, DWORD PTR _lexer$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _token$[ebp]
	mov	ecx, DWORD PTR [edx+68]
	mov	DWORD PTR [eax+12], ecx
; Line 662
	mov	eax, DWORD PTR _lexer$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _token$[ebp]
	mov	ecx, DWORD PTR [edx+72]
	mov	DWORD PTR [eax+20], ecx
; Line 664
	mov	eax, DWORD PTR _lexer$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+8]
	cmp	DWORD PTR [edx+80], 0
	je	SHORT $LN2@emit
; Line 666
	mov	eax, DWORD PTR _token$[ebp]
	mov	DWORD PTR [eax+44], 2
; Line 667
	mov	eax, DWORD PTR _lexer$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _token$[ebp]
	mov	ecx, DWORD PTR [edx+80]
	mov	DWORD PTR [eax+48], ecx
; Line 669
	jmp	SHORT $LN1@emit
$LN2@emit:
; Line 671
	mov	eax, DWORD PTR _token$[ebp]
	mov	DWORD PTR [eax+44], 0
$LN1@emit:
; Line 673
	mov	eax, DWORD PTR _lexer$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _token$[ebp]
	mov	eax, DWORD PTR [ecx+32]
	mov	DWORD PTR [edx+16], eax
; Line 674
	mov	eax, DWORD PTR _lexer$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _token$[ebp]
	mov	ecx, DWORD PTR [edx+84]
	mov	DWORD PTR [eax+52], ecx
; Line 675
	mov	eax, DWORD PTR _lexer$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _token$[ebp]
	mov	ecx, DWORD PTR [edx+88]
	mov	DWORD PTR [eax+56], ecx
; Line 676
	mov	eax, DWORD PTR _lexer$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _token$[ebp]
	mov	ecx, DWORD PTR [edx+92]
	mov	DWORD PTR [eax+60], ecx
; Line 677
	mov	eax, DWORD PTR _lexer$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _token$[ebp]
	mov	ecx, DWORD PTR [edx+96]
	mov	DWORD PTR [eax+64], ecx
; Line 679
	mov	eax, DWORD PTR _lexer$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _token$[ebp]
	mov	DWORD PTR [edx+48], eax
; Line 681
	mov	eax, DWORD PTR _token$[ebp]
; Line 682
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_emit	ENDP
_TEXT	ENDS
EXTRN	__imp__free:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _freeLexer
_TEXT	SEGMENT
_lexer$ = 8						; size = 4
_freeLexer PROC						; COMDAT
; Line 689
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 694
	mov	eax, DWORD PTR _lexer$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	cmp	DWORD PTR [ecx+8], 0
	je	$LN5@freeLexer
; Line 696
	mov	eax, DWORD PTR _lexer$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+8]
	cmp	DWORD PTR [edx+100], 0
	je	SHORT $LN4@freeLexer
; Line 698
	mov	eax, DWORD PTR _lexer$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+8]
	mov	esi, esp
	mov	eax, DWORD PTR [edx+100]
	push	eax
	mov	ecx, DWORD PTR _lexer$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [eax+100]
	mov	edx, DWORD PTR [ecx+8]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN4@freeLexer:
; Line 700
	mov	eax, DWORD PTR _lexer$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+8]
	cmp	DWORD PTR [edx+52], 0
	je	SHORT $LN3@freeLexer
; Line 702
	mov	eax, DWORD PTR _lexer$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+8]
	mov	esi, esp
	mov	eax, DWORD PTR [edx+52]
	push	eax
	mov	ecx, DWORD PTR _lexer$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [eax+52]
	mov	edx, DWORD PTR [ecx+176]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 703
	mov	eax, DWORD PTR _lexer$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+52], 0
$LN3@freeLexer:
; Line 705
	mov	eax, DWORD PTR _lexer$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+8]
	cmp	DWORD PTR [edx+56], 0
	je	SHORT $LN5@freeLexer
; Line 707
	mov	eax, DWORD PTR _lexer$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+8]
	mov	esi, esp
	mov	eax, DWORD PTR [edx+56]
	push	eax
	call	DWORD PTR __imp__free
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 708
	mov	eax, DWORD PTR _lexer$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+56], 0
$LN5@freeLexer:
; Line 711
	mov	eax, DWORD PTR _lexer$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN1@freeLexer
; Line 713
	mov	esi, esp
	mov	eax, DWORD PTR _lexer$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _lexer$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax+144]
	call	ecx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 714
	mov	eax, DWORD PTR _lexer$[ebp]
	mov	DWORD PTR [eax+12], 0
$LN1@freeLexer:
; Line 716
	mov	esi, esp
	mov	eax, DWORD PTR _lexer$[ebp]
	push	eax
	call	DWORD PTR __imp__free
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 717
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_freeLexer ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _matchs
_TEXT	SEGMENT
_lexer$ = 8						; size = 4
_string$ = 12						; size = 4
_matchs	PROC						; COMDAT
; Line 728
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
$LN4@matchs:
; Line 729
	mov	eax, DWORD PTR _string$[ebp]
	cmp	DWORD PTR [eax], -1
	je	$LN3@matchs
; Line 731
	mov	esi, esp
	push	1
	mov	eax, DWORD PTR _lexer$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _lexer$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _string$[ebp]
	cmp	eax, DWORD PTR [ecx]
	je	SHORT $LN2@matchs
; Line 733
	mov	eax, DWORD PTR _lexer$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+8]
	cmp	DWORD PTR [edx+32], 0
	jle	SHORT $LN1@matchs
; Line 735
	mov	eax, DWORD PTR _lexer$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+8]
	mov	BYTE PTR [edx+24], 1
; Line 736
	xor	al, al
	jmp	$LN5@matchs
$LN1@matchs:
; Line 739
	mov	esi, esp
	mov	eax, DWORD PTR _lexer$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _lexer$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax+136]
	call	ecx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 740
	mov	eax, DWORD PTR _lexer$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+8]
	mov	BYTE PTR [edx+24], 1
; Line 744
	mov	esi, esp
	mov	eax, DWORD PTR _lexer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _lexer$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 745
	xor	al, al
	jmp	SHORT $LN5@matchs
$LN2@matchs:
; Line 750
	mov	eax, DWORD PTR _lexer$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	esi, esp
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _lexer$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+20]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 751
	mov	eax, DWORD PTR _string$[ebp]
	add	eax, 4
	mov	DWORD PTR _string$[ebp], eax
; Line 755
	mov	eax, DWORD PTR _lexer$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+8]
	mov	BYTE PTR [edx+24], 0
; Line 756
	jmp	$LN4@matchs
$LN3@matchs:
; Line 759
	mov	al, 1
$LN5@matchs:
; Line 760
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_matchs	ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _matchc
_TEXT	SEGMENT
_lexer$ = 8						; size = 4
_c$ = 12						; size = 4
_matchc	PROC						; COMDAT
; Line 771
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 772
	mov	esi, esp
	push	1
	mov	eax, DWORD PTR _lexer$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _lexer$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, DWORD PTR _c$[ebp]
	jne	SHORT $LN2@matchc
; Line 776
	mov	eax, DWORD PTR _lexer$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	esi, esp
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _lexer$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+20]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 780
	mov	eax, DWORD PTR _lexer$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+8]
	mov	BYTE PTR [edx+24], 0
; Line 782
	mov	al, 1
	jmp	SHORT $LN3@matchc
$LN2@matchc:
; Line 787
	mov	eax, DWORD PTR _lexer$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+8]
	cmp	DWORD PTR [edx+32], 0
	jle	SHORT $LN1@matchc
; Line 789
	mov	eax, DWORD PTR _lexer$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+8]
	mov	BYTE PTR [edx+24], 1
; Line 790
	xor	al, al
	jmp	SHORT $LN3@matchc
$LN1@matchc:
; Line 793
	mov	esi, esp
	mov	eax, DWORD PTR _lexer$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _lexer$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax+136]
	call	ecx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 797
	mov	esi, esp
	mov	eax, DWORD PTR _lexer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _lexer$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 799
	xor	al, al
$LN3@matchc:
; Line 800
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_matchc	ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _matchRange
_TEXT	SEGMENT
_c$ = -8						; size = 4
_lexer$ = 8						; size = 4
_low$ = 12						; size = 4
_high$ = 16						; size = 4
_matchRange PROC					; COMDAT
; Line 811
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 816
	mov	esi, esp
	push	1
	mov	eax, DWORD PTR _lexer$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _lexer$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _c$[ebp], eax
; Line 817
	mov	eax, DWORD PTR _c$[ebp]
	cmp	eax, DWORD PTR _low$[ebp]
	jb	SHORT $LN2@matchRange
	mov	eax, DWORD PTR _c$[ebp]
	cmp	eax, DWORD PTR _high$[ebp]
	ja	SHORT $LN2@matchRange
; Line 821
	mov	eax, DWORD PTR _lexer$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	esi, esp
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _lexer$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+20]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 825
	mov	eax, DWORD PTR _lexer$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+8]
	mov	BYTE PTR [edx+24], 0
; Line 827
	mov	al, 1
	jmp	SHORT $LN3@matchRange
$LN2@matchRange:
; Line 833
	mov	eax, DWORD PTR _lexer$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+8]
	cmp	DWORD PTR [edx+32], 0
	jle	SHORT $LN1@matchRange
; Line 835
	mov	eax, DWORD PTR _lexer$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+8]
	mov	BYTE PTR [edx+24], 1
; Line 836
	xor	al, al
	jmp	SHORT $LN3@matchRange
$LN1@matchRange:
; Line 839
	mov	esi, esp
	mov	eax, DWORD PTR _lexer$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _lexer$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax+136]
	call	ecx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 843
	mov	esi, esp
	mov	eax, DWORD PTR _lexer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _lexer$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 845
	xor	al, al
$LN3@matchRange:
; Line 846
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_matchRange ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _matchAny
_TEXT	SEGMENT
_lexer$ = 8						; size = 4
_matchAny PROC						; COMDAT
; Line 850
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 851
	mov	eax, DWORD PTR _lexer$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	esi, esp
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _lexer$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+20]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 852
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_matchAny ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _recover
_TEXT	SEGMENT
_lexer$ = 8						; size = 4
_recover PROC						; COMDAT
; Line 856
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 857
	mov	eax, DWORD PTR _lexer$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	esi, esp
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _lexer$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+20]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 858
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_recover ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _getLine
_TEXT	SEGMENT
_lexer$ = 8						; size = 4
_getLine PROC						; COMDAT
; Line 862
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 863
	mov	esi, esp
	mov	eax, DWORD PTR _lexer$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _lexer$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [eax+88]
	call	ecx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 864
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_getLine ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _getCharPositionInLine
_TEXT	SEGMENT
_lexer$ = 8						; size = 4
_getCharPositionInLine PROC				; COMDAT
; Line 868
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 869
	mov	eax, DWORD PTR _lexer$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	eax, DWORD PTR [ecx+36]
; Line 870
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_getCharPositionInLine ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _getCharIndex
_TEXT	SEGMENT
_lexer$ = 8						; size = 4
_getCharIndex PROC					; COMDAT
; Line 873
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 874
	mov	eax, DWORD PTR _lexer$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	esi, esp
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _lexer$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+32]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 875
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_getCharIndex ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _getText
_TEXT	SEGMENT
_lexer$ = 8						; size = 4
_getText PROC						; COMDAT
; Line 879
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 880
	mov	eax, DWORD PTR _lexer$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+8]
	cmp	DWORD PTR [edx+80], 0
	je	SHORT $LN1@getText
; Line 882
	mov	eax, DWORD PTR _lexer$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [edx+80]
	jmp	SHORT $LN2@getText
$LN1@getText:
; Line 889
	mov	esi, esp
	mov	eax, DWORD PTR _lexer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _lexer$[ebp]
	mov	edx, DWORD PTR [ecx+64]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _lexer$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	movzx	ecx, BYTE PTR [edx+116]
	sub	eax, ecx
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR _lexer$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+76]
	push	edx
	mov	eax, DWORD PTR _lexer$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _lexer$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [eax+84]
	call	ecx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@getText:
; Line 891
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_getText ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _getCurrentInputSymbol
_TEXT	SEGMENT
_recognizer$ = 8					; size = 4
_istream$ = 12						; size = 4
_getCurrentInputSymbol PROC				; COMDAT
; Line 895
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 896
	xor	eax, eax
; Line 897
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_getCurrentInputSymbol ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _getMissingSymbol
_TEXT	SEGMENT
_recognizer$ = 8					; size = 4
_istream$ = 12						; size = 4
_e$ = 16						; size = 4
_expectedTokenType$ = 20				; size = 4
_follow$ = 24						; size = 4
_getMissingSymbol PROC					; COMDAT
; Line 902
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 903
	xor	eax, eax
; Line 904
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_getMissingSymbol ENDP
_TEXT	ENDS
END
