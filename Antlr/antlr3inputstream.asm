; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\Users\pa\repos\spengine\Antlr\antlr3inputstream.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_e2a
CONST	SEGMENT
_trailingBytesForUTF8 DD 00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	02H
	DD	02H
	DD	02H
	DD	02H
	DD	02H
	DD	02H
	DD	02H
	DD	02H
	DD	02H
	DD	02H
	DD	02H
	DD	02H
	DD	02H
	DD	02H
	DD	02H
	DD	02H
	DD	03H
	DD	03H
	DD	03H
	DD	03H
	DD	03H
	DD	03H
	DD	03H
	DD	03H
	DD	04H
	DD	04H
	DD	04H
	DD	04H
	DD	05H
	DD	05H
	DD	05H
	DD	05H
_offsetsFromUTF8 DD 00H
	DD	03080H
	DD	0e2080H
	DD	03c82080H
	DD	0fa082080H
	DD	082082080H
_e2a	DD	00H
	DD	01H
	DD	02H
	DD	03H
	DD	085H
	DD	09H
	DD	086H
	DD	07fH
	DD	087H
	DD	08dH
	DD	08eH
	DD	0bH
	DD	0cH
	DD	0dH
	DD	0eH
	DD	0fH
	DD	010H
	DD	011H
	DD	012H
	DD	013H
	DD	08fH
	DD	0aH
	DD	08H
	DD	097H
	DD	018H
	DD	019H
	DD	09cH
	DD	09dH
	DD	01cH
	DD	01dH
	DD	01eH
	DD	01fH
	DD	080H
	DD	081H
	DD	082H
	DD	083H
	DD	084H
	DD	092H
	DD	017H
	DD	01bH
	DD	088H
	DD	089H
	DD	08aH
	DD	08bH
	DD	08cH
	DD	05H
	DD	06H
	DD	07H
	DD	090H
	DD	091H
	DD	016H
	DD	093H
	DD	094H
	DD	095H
	DD	096H
	DD	04H
	DD	098H
	DD	099H
	DD	09aH
	DD	09bH
	DD	014H
	DD	015H
	DD	09eH
	DD	01aH
	DD	020H
	DD	0a0H
	DD	0e2H
	DD	0e4H
	DD	0e0H
	DD	0e1H
	DD	0e3H
	DD	0e5H
	DD	0e7H
	DD	0f1H
	DD	060H
	DD	02eH
	DD	03cH
	DD	028H
	DD	02bH
	DD	07cH
	DD	026H
	DD	0e9H
	DD	0eaH
	DD	0ebH
	DD	0e8H
	DD	0edH
	DD	0eeH
	DD	0efH
	DD	0ecH
	DD	0dfH
	DD	021H
	DD	024H
	DD	02aH
	DD	029H
	DD	03bH
	DD	09fH
	DD	02dH
	DD	02fH
	DD	0c2H
	DD	0c4H
	DD	0c0H
	DD	0c1H
	DD	0c3H
	DD	0c5H
	DD	0c7H
	DD	0d1H
	DD	05eH
	DD	02cH
	DD	025H
	DD	05fH
	DD	03eH
	DD	03fH
	DD	0f8H
	DD	0c9H
	DD	0caH
	DD	0cbH
	DD	0c8H
	DD	0cdH
	DD	0ceH
	DD	0cfH
	DD	0ccH
	DD	0a8H
	DD	03aH
	DD	023H
	DD	040H
	DD	027H
	DD	03dH
	DD	022H
	DD	0d8H
	DD	061H
	DD	062H
	DD	063H
	DD	064H
	DD	065H
	DD	066H
	DD	067H
	DD	068H
	DD	069H
	DD	0abH
	DD	0bbH
	DD	0f0H
	DD	0fdH
	DD	0feH
	DD	0b1H
	DD	0b0H
	DD	06aH
	DD	06bH
	DD	06cH
	DD	06dH
	DD	06eH
	DD	06fH
	DD	070H
	DD	071H
	DD	072H
	DD	0aaH
	DD	0baH
	DD	0e6H
	DD	0b8H
	DD	0c6H
	DD	0a4H
	DD	0b5H
	DD	0afH
	DD	073H
	DD	074H
	DD	075H
	DD	076H
	DD	077H
	DD	078H
	DD	079H
	DD	07aH
	DD	0a1H
	DD	0bfH
	DD	0d0H
	DD	0ddH
	DD	0deH
	DD	0aeH
	DD	0a2H
	DD	0a3H
	DD	0a5H
	DD	0b7H
	DD	0a9H
	DD	0a7H
	DD	0b6H
	DD	0bcH
	DD	0bdH
	DD	0beH
	DD	0acH
	DD	05bH
	DD	05cH
	DD	05dH
	DD	0b4H
	DD	0d7H
	DD	0f9H
	DD	041H
	DD	042H
	DD	043H
	DD	044H
	DD	045H
	DD	046H
	DD	047H
	DD	048H
	DD	049H
	DD	0adH
	DD	0f4H
	DD	0f6H
	DD	0f2H
	DD	0f3H
	DD	0f5H
	DD	0a6H
	DD	04aH
	DD	04bH
	DD	04cH
	DD	04dH
	DD	04eH
	DD	04fH
	DD	050H
	DD	051H
	DD	052H
	DD	0b9H
	DD	0fbH
	DD	0fcH
	DD	0dbH
	DD	0faH
	DD	0ffH
	DD	0d9H
	DD	0f7H
	DD	053H
	DD	054H
	DD	055H
	DD	056H
	DD	057H
	DD	058H
	DD	059H
	DD	05aH
	DD	0b2H
	DD	0d4H
	DD	0d6H
	DD	0d2H
	DD	0d3H
	DD	0d5H
	DD	030H
	DD	031H
	DD	032H
	DD	033H
	DD	034H
	DD	035H
	DD	036H
	DD	037H
	DD	038H
	DD	039H
	DD	0b3H
	DD	07bH
	DD	0dcH
	DD	07dH
	DD	0daH
	DD	07eH
CONST	ENDS
PUBLIC	_antlr38BitSetupStream
EXTRN	_antlr3StringFactoryNew:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\users\pa\repos\spengine\antlr\antlr3inputstream.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT _antlr38BitSetupStream
_TEXT	SEGMENT
_input$ = 8						; size = 4
_antlr38BitSetupStream PROC				; COMDAT
; Line 126
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 129
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR [eax+120]
	push	ecx
	call	_antlr3StringFactoryNew
	add	esp, 4
	mov	edx, DWORD PTR _input$[ebp]
	mov	DWORD PTR [edx+16], eax
; Line 133
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_antlr38BitSetupStream ENDP
_TEXT	ENDS
PUBLIC	_antlr3GenericSetupStream
EXTRN	_antlr3IntStreamNew:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _antlr3GenericSetupStream
_TEXT	SEGMENT
_input$ = 8						; size = 4
_antlr3GenericSetupStream PROC				; COMDAT
; Line 137
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 143
	call	_antlr3IntStreamNew
	mov	ecx, DWORD PTR _input$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 144
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], 1
; Line 145
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _input$[ebp]
	mov	DWORD PTR [ecx+8], edx
; Line 149
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [ecx+20], OFFSET _antlr38BitConsume
; Line 150
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [ecx+24], OFFSET _antlr38BitLA
; Line 151
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [ecx+32], OFFSET _antlr38BitIndex
; Line 152
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [ecx+28], OFFSET _antlr38BitMark
; Line 153
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [ecx+36], OFFSET _antlr38BitRewind
; Line 154
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [ecx+40], OFFSET _antlr38BitRewindLast
; Line 155
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [ecx+48], OFFSET _antlr38BitSeek
; Line 156
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [ecx+44], OFFSET _antlr38BitRelease
; Line 157
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [ecx+16], OFFSET _antlr38BitGetSourceName
; Line 161
	mov	eax, DWORD PTR _input$[ebp]
	mov	DWORD PTR [eax+56], OFFSET _antlr3InputClose
; Line 162
	mov	eax, DWORD PTR _input$[ebp]
	mov	DWORD PTR [eax+60], OFFSET _antlr3InputClose
; Line 163
	mov	eax, DWORD PTR _input$[ebp]
	mov	DWORD PTR [eax+64], OFFSET _antlr3InputReset
; Line 164
	mov	eax, DWORD PTR _input$[ebp]
	mov	DWORD PTR [eax+68], OFFSET _antlr38BitReuse
; Line 165
	mov	eax, DWORD PTR _input$[ebp]
	mov	DWORD PTR [eax+76], OFFSET _antlr38BitLT
; Line 166
	mov	eax, DWORD PTR _input$[ebp]
	mov	DWORD PTR [eax+80], OFFSET _antlr38BitSize
; Line 167
	mov	eax, DWORD PTR _input$[ebp]
	mov	DWORD PTR [eax+84], OFFSET _antlr38BitSubstr
; Line 168
	mov	eax, DWORD PTR _input$[ebp]
	mov	DWORD PTR [eax+88], OFFSET _antlr38BitGetLine
; Line 169
	mov	eax, DWORD PTR _input$[ebp]
	mov	DWORD PTR [eax+92], OFFSET _antlr38BitGetLineBuf
; Line 170
	mov	eax, DWORD PTR _input$[ebp]
	mov	DWORD PTR [eax+96], OFFSET _antlr38BitGetCharPosition
; Line 171
	mov	eax, DWORD PTR _input$[ebp]
	mov	DWORD PTR [eax+100], OFFSET _antlr38BitSetLine
; Line 172
	mov	eax, DWORD PTR _input$[ebp]
	mov	DWORD PTR [eax+104], OFFSET _antlr38BitSetCharPosition
; Line 173
	mov	eax, DWORD PTR _input$[ebp]
	mov	DWORD PTR [eax+108], OFFSET _antlr38BitSetNewLineChar
; Line 174
	mov	eax, DWORD PTR _input$[ebp]
	mov	DWORD PTR [eax+72], OFFSET _antlr38BitSetUcaseLA
; Line 176
	mov	eax, DWORD PTR _input$[ebp]
	mov	BYTE PTR [eax+116], 1
; Line 180
	mov	eax, DWORD PTR _input$[ebp]
	mov	DWORD PTR [eax+44], 0
; Line 184
	mov	esi, esp
	mov	eax, DWORD PTR _input$[ebp]
	push	eax
	mov	ecx, DWORD PTR _input$[ebp]
	mov	edx, DWORD PTR [ecx+64]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 189
	mov	esi, esp
	push	10					; 0000000aH
	mov	eax, DWORD PTR _input$[ebp]
	push	eax
	mov	ecx, DWORD PTR _input$[ebp]
	mov	edx, DWORD PTR [ecx+108]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 190
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_antlr3GenericSetupStream ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _antlr38BitGetSourceName
_TEXT	SEGMENT
_is$ = 8						; size = 4
_antlr38BitGetSourceName PROC				; COMDAT
; Line 194
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 195
	mov	eax, DWORD PTR _is$[ebp]
	mov	eax, DWORD PTR [eax+4]
; Line 196
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_antlr38BitGetSourceName ENDP
_TEXT	ENDS
EXTRN	__imp__free:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _antlr3InputClose
_TEXT	SEGMENT
_input$ = 8						; size = 4
_antlr3InputClose PROC					; COMDAT
; Line 204
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 207
	mov	eax, DWORD PTR _input$[ebp]
	cmp	DWORD PTR [eax+44], 0
	je	SHORT $LN3@antlr3Inpu
; Line 209
	mov	esi, esp
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	push	ecx
	mov	edx, DWORD PTR _input$[ebp]
	mov	eax, DWORD PTR [edx+44]
	mov	ecx, DWORD PTR [eax+144]
	call	ecx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 210
	mov	eax, DWORD PTR _input$[ebp]
	mov	DWORD PTR [eax+44], 0
$LN3@antlr3Inpu:
; Line 215
	mov	eax, DWORD PTR _input$[ebp]
	cmp	DWORD PTR [eax+16], 0
	je	SHORT $LN2@antlr3Inpu
; Line 217
	mov	esi, esp
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR _input$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR [eax+40]
	call	ecx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@antlr3Inpu:
; Line 222
	mov	eax, DWORD PTR _input$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN1@antlr3Inpu
	mov	eax, DWORD PTR _input$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN1@antlr3Inpu
; Line 224
	mov	esi, esp
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	DWORD PTR __imp__free
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 225
	mov	eax, DWORD PTR _input$[ebp]
	mov	DWORD PTR [eax+8], 0
$LN1@antlr3Inpu:
; Line 228
	mov	esi, esp
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _input$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+60]
	call	ecx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 232
	mov	esi, esp
	mov	eax, DWORD PTR _input$[ebp]
	push	eax
	call	DWORD PTR __imp__free
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 236
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_antlr3InputClose ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _antlr38BitSetUcaseLA
_TEXT	SEGMENT
_input$ = 8						; size = 4
_flag$ = 12						; size = 1
_antlr38BitSetUcaseLA PROC				; COMDAT
; Line 240
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 241
	movzx	eax, BYTE PTR _flag$[ebp]
	test	eax, eax
	je	SHORT $LN2@antlr38Bit
; Line 245
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [ecx+24], OFFSET _antlr38BitLA_ucase
; Line 247
	jmp	SHORT $LN3@antlr38Bit
$LN2@antlr38Bit:
; Line 251
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [ecx+24], OFFSET _antlr38BitLA
$LN3@antlr38Bit:
; Line 253
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_antlr38BitSetUcaseLA ENDP
_TEXT	ENDS
EXTRN	_antlr3VectorNew:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _antlr3InputReset
_TEXT	SEGMENT
_input$ = 8						; size = 4
_antlr3InputReset PROC					; COMDAT
; Line 262
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 264
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR _input$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+20], edx
; Line 265
	mov	eax, DWORD PTR _input$[ebp]
	mov	DWORD PTR [eax+28], 1
; Line 266
	mov	eax, DWORD PTR _input$[ebp]
	mov	DWORD PTR [eax+36], -1
; Line 267
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR _input$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+32], edx
; Line 268
	mov	eax, DWORD PTR _input$[ebp]
	mov	DWORD PTR [eax+40], 0
; Line 272
	mov	eax, DWORD PTR _input$[ebp]
	cmp	DWORD PTR [eax+44], 0
	je	SHORT $LN2@antlr3Inpu@2
; Line 274
	mov	esi, esp
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	push	ecx
	mov	edx, DWORD PTR _input$[ebp]
	mov	eax, DWORD PTR [edx+44]
	mov	ecx, DWORD PTR [eax+160]
	call	ecx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 276
	jmp	SHORT $LN3@antlr3Inpu@2
$LN2@antlr3Inpu@2:
; Line 280
	push	0
	call	_antlr3VectorNew
	add	esp, 4
	mov	ecx, DWORD PTR _input$[ebp]
	mov	DWORD PTR [ecx+44], eax
$LN3@antlr3Inpu@2:
; Line 282
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_antlr3InputReset ENDP
_TEXT	ENDS
PUBLIC	??_C@_08ONBMMFLC@?9memory?9?$AA@		; `string'
;	COMDAT ??_C@_08ONBMMFLC@?9memory?9?$AA@
CONST	SEGMENT
??_C@_08ONBMMFLC@?9memory?9?$AA@ DB '-memory-', 00H	; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT _antlr38BitReuse
_TEXT	SEGMENT
tv84 = -196						; size = 4
tv74 = -196						; size = 4
_input$ = 8						; size = 4
_inString$ = 12						; size = 4
_size$ = 16						; size = 4
_name$ = 20						; size = 4
_antlr38BitReuse PROC					; COMDAT
; Line 289
	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 290
	mov	eax, DWORD PTR _input$[ebp]
	mov	DWORD PTR [eax+12], 0
; Line 291
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR _inString$[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 292
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR _size$[ebp]
	mov	DWORD PTR [eax+24], ecx
; Line 297
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx+4], 0
	jne	SHORT $LN2@antlr38Bit@2
; Line 299
	cmp	DWORD PTR _name$[ebp], 0
	jne	SHORT $LN5@antlr38Bit@2
	mov	DWORD PTR tv74[ebp], OFFSET ??_C@_08ONBMMFLC@?9memory?9?$AA@
	jmp	SHORT $LN6@antlr38Bit@2
$LN5@antlr38Bit@2:
	mov	eax, DWORD PTR _name$[ebp]
	mov	DWORD PTR tv74[ebp], eax
$LN6@antlr38Bit@2:
	mov	esi, esp
	mov	ecx, DWORD PTR tv74[ebp]
	push	ecx
	mov	edx, DWORD PTR _input$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR _input$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _input$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [edx+4], eax
; Line 300
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _input$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+48], eax
; Line 302
	jmp	SHORT $LN1@antlr38Bit@2
$LN2@antlr38Bit@2:
; Line 304
	cmp	DWORD PTR _name$[ebp], 0
	jne	SHORT $LN7@antlr38Bit@2
	mov	DWORD PTR tv84[ebp], OFFSET ??_C@_08ONBMMFLC@?9memory?9?$AA@
	jmp	SHORT $LN8@antlr38Bit@2
$LN7@antlr38Bit@2:
	mov	eax, DWORD PTR _name$[ebp]
	mov	DWORD PTR tv84[ebp], eax
$LN8@antlr38Bit@2:
	mov	esi, esp
	mov	ecx, DWORD PTR tv84[ebp]
	push	ecx
	mov	edx, DWORD PTR _input$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _input$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+24]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@antlr38Bit@2:
; Line 307
	mov	esi, esp
	mov	eax, DWORD PTR _input$[ebp]
	push	eax
	mov	ecx, DWORD PTR _input$[ebp]
	mov	edx, DWORD PTR [ecx+64]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 308
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 196				; 000000c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_antlr38BitReuse ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _antlr38BitConsume
_TEXT	SEGMENT
_input$ = -8						; size = 4
_is$ = 8						; size = 4
_antlr38BitConsume PROC					; COMDAT
; Line 316
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 319
	mov	eax, DWORD PTR _is$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _input$[ebp], ecx
; Line 321
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _input$[ebp]
	add	ecx, DWORD PTR [edx+24]
	mov	eax, DWORD PTR _input$[ebp]
	cmp	DWORD PTR [eax+20], ecx
	jae	SHORT $LN3@antlr38Bit@3
; Line 325
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	add	ecx, 1
	mov	edx, DWORD PTR _input$[ebp]
	mov	DWORD PTR [edx+36], ecx
; Line 327
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	movzx	edx, BYTE PTR [ecx]
	mov	eax, DWORD PTR _input$[ebp]
	cmp	edx, DWORD PTR [eax+112]
	jne	SHORT $LN1@antlr38Bit@3
; Line 331
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	add	ecx, 1
	mov	edx, DWORD PTR _input$[ebp]
	mov	DWORD PTR [edx+28], ecx
; Line 332
	mov	eax, DWORD PTR _input$[ebp]
	mov	DWORD PTR [eax+36], 0
; Line 333
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	mov	edx, DWORD PTR _input$[ebp]
	mov	DWORD PTR [edx+32], ecx
$LN1@antlr38Bit@3:
; Line 338
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	mov	edx, DWORD PTR _input$[ebp]
	mov	DWORD PTR [edx+20], ecx
$LN3@antlr38Bit@3:
; Line 340
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_antlr38BitConsume ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _antlr38BitLA
_TEXT	SEGMENT
_input$ = -8						; size = 4
_is$ = 8						; size = 4
_la$ = 12						; size = 4
_antlr38BitLA PROC					; COMDAT
; Line 351
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 354
	mov	eax, DWORD PTR _is$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _input$[ebp], ecx
; Line 356
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _la$[ebp]
	lea	eax, DWORD PTR [ecx+edx-1]
	mov	ecx, DWORD PTR _input$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	ecx, DWORD PTR _input$[ebp]
	add	edx, DWORD PTR [ecx+24]
	cmp	eax, edx
	jb	SHORT $LN2@antlr38Bit@4
; Line 358
	or	eax, -1
	jmp	SHORT $LN3@antlr38Bit@4
; Line 360
	jmp	SHORT $LN3@antlr38Bit@4
$LN2@antlr38Bit@4:
; Line 362
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _la$[ebp]
	movzx	eax, BYTE PTR [ecx+edx-1]
$LN3@antlr38Bit@4:
; Line 364
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_antlr38BitLA ENDP
_TEXT	ENDS
EXTRN	__imp__toupper:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _antlr38BitLA_ucase
_TEXT	SEGMENT
_input$ = -8						; size = 4
_is$ = 8						; size = 4
_la$ = 12						; size = 4
_antlr38BitLA_ucase PROC				; COMDAT
; Line 378
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 381
	mov	eax, DWORD PTR _is$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _input$[ebp], ecx
; Line 383
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _la$[ebp]
	lea	eax, DWORD PTR [ecx+edx-1]
	mov	ecx, DWORD PTR _input$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	ecx, DWORD PTR _input$[ebp]
	add	edx, DWORD PTR [ecx+24]
	cmp	eax, edx
	jb	SHORT $LN2@antlr38Bit@5
; Line 385
	or	eax, -1
	jmp	SHORT $LN3@antlr38Bit@5
; Line 387
	jmp	SHORT $LN3@antlr38Bit@5
$LN2@antlr38Bit@5:
; Line 389
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _la$[ebp]
	movzx	eax, BYTE PTR [ecx+edx-1]
	mov	esi, esp
	push	eax
	call	DWORD PTR __imp__toupper
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@antlr38Bit@5:
; Line 391
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_antlr38BitLA_ucase ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _antlr38BitLT
_TEXT	SEGMENT
_input$ = 8						; size = 4
_lt$ = 12						; size = 4
_antlr38BitLT PROC					; COMDAT
; Line 403
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 409
	mov	esi, esp
	mov	eax, DWORD PTR _lt$[ebp]
	push	eax
	mov	ecx, DWORD PTR _input$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+24]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 410
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_antlr38BitLT ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _antlr38BitIndex
_TEXT	SEGMENT
_input$ = -8						; size = 4
_is$ = 8						; size = 4
_antlr38BitIndex PROC					; COMDAT
; Line 417
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 420
	mov	eax, DWORD PTR _is$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _input$[ebp], ecx
; Line 422
	mov	eax, DWORD PTR _input$[ebp]
	mov	eax, DWORD PTR [eax+20]
; Line 423
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_antlr38BitIndex ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _antlr38BitSize
_TEXT	SEGMENT
_input$ = 8						; size = 4
_antlr38BitSize PROC					; COMDAT
; Line 434
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 435
	mov	eax, DWORD PTR _input$[ebp]
	mov	eax, DWORD PTR [eax+24]
; Line 436
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_antlr38BitSize ENDP
_TEXT	ENDS
EXTRN	__imp__malloc:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _antlr38BitMark
_TEXT	SEGMENT
_input$ = -20						; size = 4
_state$ = -8						; size = 4
_is$ = 8						; size = 4
_antlr38BitMark PROC					; COMDAT
; Line 446
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 450
	mov	eax, DWORD PTR _is$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _input$[ebp], ecx
; Line 454
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	add	ecx, 1
	mov	edx, DWORD PTR _input$[ebp]
	mov	DWORD PTR [edx+40], ecx
; Line 459
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	edx, DWORD PTR _input$[ebp]
	mov	eax, DWORD PTR [edx+40]
	cmp	eax, DWORD PTR [ecx+4]
	jbe	SHORT $LN2@antlr38Bit@6
; Line 461
	mov	esi, esp
	push	16					; 00000010H
	call	DWORD PTR __imp__malloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _state$[ebp], eax
; Line 465
	mov	esi, esp
	mov	eax, DWORD PTR __imp__free
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	push	ecx
	mov	edx, DWORD PTR _input$[ebp]
	mov	eax, DWORD PTR [edx+44]
	push	eax
	mov	ecx, DWORD PTR _input$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	mov	eax, DWORD PTR [edx+168]
	call	eax
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 467
	jmp	SHORT $LN1@antlr38Bit@6
$LN2@antlr38Bit@6:
; Line 469
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	sub	ecx, 1
	mov	esi, esp
	push	ecx
	mov	edx, DWORD PTR _input$[ebp]
	mov	eax, DWORD PTR [edx+44]
	push	eax
	mov	ecx, DWORD PTR _input$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	mov	eax, DWORD PTR [edx+152]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _state$[ebp], eax
$LN1@antlr38Bit@6:
; Line 479
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _input$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR [eax+12], edx
; Line 480
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _input$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	DWORD PTR [eax+8], edx
; Line 481
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _input$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR [eax+4], edx
; Line 482
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _input$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR [eax], edx
; Line 484
	mov	eax, DWORD PTR _is$[ebp]
	mov	ecx, DWORD PTR _input$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	DWORD PTR [eax+12], edx
; Line 488
	mov	eax, DWORD PTR _input$[ebp]
	mov	eax, DWORD PTR [eax+40]
; Line 489
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_antlr38BitMark ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _antlr38BitRewindLast
_TEXT	SEGMENT
_is$ = 8						; size = 4
_antlr38BitRewindLast PROC				; COMDAT
; Line 499
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 500
	mov	esi, esp
	mov	eax, DWORD PTR _is$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _is$[ebp]
	push	edx
	mov	eax, DWORD PTR _is$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 501
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_antlr38BitRewindLast ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _antlr38BitRewind
_TEXT	SEGMENT
_input$ = -20						; size = 4
_state$ = -8						; size = 4
_is$ = 8						; size = 4
_mark$ = 12						; size = 4
_antlr38BitRewind PROC					; COMDAT
; Line 512
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 516
	mov	eax, DWORD PTR _is$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _input$[ebp], ecx
; Line 520
	mov	esi, esp
	mov	eax, DWORD PTR _mark$[ebp]
	push	eax
	mov	ecx, DWORD PTR _input$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+44]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 524
	mov	eax, DWORD PTR _mark$[ebp]
	sub	eax, 1
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _input$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	push	edx
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	edx, DWORD PTR [ecx+152]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _state$[ebp], eax
; Line 529
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _is$[ebp]
	push	edx
	call	_antlr38BitSeek
	add	esp, 8
; Line 533
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+36], edx
; Line 534
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+32], edx
; Line 535
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+28], edx
; Line 536
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+20], edx
; Line 540
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_antlr38BitRewind ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _antlr38BitRelease
_TEXT	SEGMENT
_input$ = -8						; size = 4
_is$ = 8						; size = 4
_mark$ = 12						; size = 4
_antlr38BitRelease PROC					; COMDAT
; Line 551
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 554
	mov	eax, DWORD PTR _is$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _input$[ebp], ecx
; Line 559
	mov	eax, DWORD PTR _mark$[ebp]
	sub	eax, 1
	mov	ecx, DWORD PTR _input$[ebp]
	mov	DWORD PTR [ecx+40], eax
; Line 560
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_antlr38BitRelease ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _antlr38BitSeek
_TEXT	SEGMENT
tv71 = -220						; size = 4
_input$ = -20						; size = 4
_count$ = -8						; size = 4
_is$ = 8						; size = 4
_seekPoint$ = 12					; size = 4
_antlr38BitSeek PROC					; COMDAT
; Line 571
	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 575
	mov	eax, DWORD PTR _is$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _input$[ebp], ecx
; Line 581
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR _seekPoint$[ebp]
	cmp	ecx, DWORD PTR [eax+20]
	jg	SHORT $LN4@antlr38Bit@7
; Line 583
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR _seekPoint$[ebp]
	mov	DWORD PTR [eax+20], ecx
; Line 585
	jmp	SHORT $LN5@antlr38Bit@7
$LN4@antlr38Bit@7:
; Line 587
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR _seekPoint$[ebp]
	sub	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _count$[ebp], ecx
$LN2@antlr38Bit@7:
; Line 589
	mov	eax, DWORD PTR _count$[ebp]
	mov	DWORD PTR tv71[ebp], eax
	mov	ecx, DWORD PTR _count$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _count$[ebp], ecx
	cmp	DWORD PTR tv71[ebp], 0
	je	SHORT $LN5@antlr38Bit@7
; Line 591
	mov	esi, esp
	mov	eax, DWORD PTR _is$[ebp]
	push	eax
	mov	ecx, DWORD PTR _is$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 592
	jmp	SHORT $LN2@antlr38Bit@7
$LN5@antlr38Bit@7:
; Line 594
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_antlr38BitSeek ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _antlr38BitSubstr
_TEXT	SEGMENT
_input$ = 8						; size = 4
_start$ = 12						; size = 4
_stop$ = 16						; size = 4
_antlr38BitSubstr PROC					; COMDAT
; Line 604
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 605
	mov	eax, DWORD PTR _stop$[ebp]
	sub	eax, DWORD PTR _start$[ebp]
	add	eax, 1
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _start$[ebp]
	push	ecx
	mov	edx, DWORD PTR _input$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR _input$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 606
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_antlr38BitSubstr ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _antlr38BitGetLine
_TEXT	SEGMENT
_input$ = 8						; size = 4
_antlr38BitGetLine PROC					; COMDAT
; Line 615
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 616
	mov	eax, DWORD PTR _input$[ebp]
	mov	eax, DWORD PTR [eax+28]
; Line 617
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_antlr38BitGetLine ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _antlr38BitGetLineBuf
_TEXT	SEGMENT
_input$ = 8						; size = 4
_antlr38BitGetLineBuf PROC				; COMDAT
; Line 627
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 628
	mov	eax, DWORD PTR _input$[ebp]
	mov	eax, DWORD PTR [eax+32]
; Line 629
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_antlr38BitGetLineBuf ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _antlr38BitGetCharPosition
_TEXT	SEGMENT
_input$ = 8						; size = 4
_antlr38BitGetCharPosition PROC				; COMDAT
; Line 638
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 639
	mov	eax, DWORD PTR _input$[ebp]
	mov	eax, DWORD PTR [eax+36]
; Line 640
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_antlr38BitGetCharPosition ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _antlr38BitSetLine
_TEXT	SEGMENT
_input$ = 8						; size = 4
_line$ = 12						; size = 4
_antlr38BitSetLine PROC					; COMDAT
; Line 655
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 656
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR _line$[ebp]
	mov	DWORD PTR [eax+28], ecx
; Line 657
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_antlr38BitSetLine ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _antlr38BitSetCharPosition
_TEXT	SEGMENT
_input$ = 8						; size = 4
_position$ = 12						; size = 4
_antlr38BitSetCharPosition PROC				; COMDAT
; Line 670
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 671
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR _position$[ebp]
	mov	DWORD PTR [eax+36], ecx
; Line 672
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_antlr38BitSetCharPosition ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _antlr38BitSetNewLineChar
_TEXT	SEGMENT
_input$ = 8						; size = 4
_newlineChar$ = 12					; size = 4
_antlr38BitSetNewLineChar PROC				; COMDAT
; Line 686
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 687
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR _newlineChar$[ebp]
	mov	DWORD PTR [eax+112], ecx
; Line 688
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_antlr38BitSetNewLineChar ENDP
_TEXT	ENDS
PUBLIC	_antlr3UTF16SetupStream
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _antlr3UTF16SetupStream
_TEXT	SEGMENT
tv72 = -196						; size = 4
_input$ = 8						; size = 4
_machineBigEndian$ = 12					; size = 1
_inputBigEndian$ = 16					; size = 1
_antlr3UTF16SetupStream PROC				; COMDAT
; Line 703
	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 708
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR [eax+120]
	push	ecx
	call	_antlr3StringFactoryNew
	add	esp, 4
	mov	edx, DWORD PTR _input$[ebp]
	mov	DWORD PTR [edx+16], eax
; Line 712
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [ecx+32], OFFSET _antlr3UTF16Index
; Line 713
	mov	eax, DWORD PTR _input$[ebp]
	mov	DWORD PTR [eax+84], OFFSET _antlr3UTF16Substr
; Line 714
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [ecx+48], OFFSET _antlr3UTF16Seek
; Line 721
	mov	al, BYTE PTR _machineBigEndian$[ebp]
	mov	BYTE PTR tv72[ebp], al
	cmp	BYTE PTR tv72[ebp], 0
	je	SHORT $LN3@antlr3UTF1
	cmp	BYTE PTR tv72[ebp], 1
	je	SHORT $LN6@antlr3UTF1
	jmp	SHORT $LN7@antlr3UTF1
$LN6@antlr3UTF1:
; Line 729
	movzx	eax, BYTE PTR _inputBigEndian$[ebp]
	cmp	eax, 1
	jne	SHORT $LN5@antlr3UTF1
; Line 733
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [ecx+20], OFFSET _antlr3UTF16Consume
; Line 734
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [ecx+24], OFFSET _antlr3UTF16LA
; Line 736
	jmp	SHORT $LN4@antlr3UTF1
$LN5@antlr3UTF1:
; Line 740
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [ecx+20], OFFSET _antlr3UTF16ConsumeLE
; Line 741
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [ecx+24], OFFSET _antlr3UTF16LALE
$LN4@antlr3UTF1:
; Line 743
	jmp	SHORT $LN7@antlr3UTF1
$LN3@antlr3UTF1:
; Line 751
	movzx	eax, BYTE PTR _inputBigEndian$[ebp]
	test	eax, eax
	jne	SHORT $LN2@antlr3UTF1
; Line 755
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [ecx+20], OFFSET _antlr3UTF16Consume
; Line 756
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [ecx+24], OFFSET _antlr3UTF16LA
; Line 758
	jmp	SHORT $LN7@antlr3UTF1
$LN2@antlr3UTF1:
; Line 762
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [ecx+20], OFFSET _antlr3UTF16ConsumeBE
; Line 763
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [ecx+24], OFFSET _antlr3UTF16LABE
$LN7@antlr3UTF1:
; Line 769
	mov	eax, DWORD PTR _input$[ebp]
	mov	BYTE PTR [eax+116], 2
; Line 771
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 196				; 000000c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_antlr3UTF16SetupStream ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _antlr3UTF16Consume
_TEXT	SEGMENT
_ch2$ = -32						; size = 4
_ch$ = -20						; size = 4
_input$ = -8						; size = 4
_is$ = 8						; size = 4
_antlr3UTF16Consume PROC				; COMDAT
; Line 779
	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 784
	mov	eax, DWORD PTR _is$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _input$[ebp], ecx
; Line 788
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _input$[ebp]
	add	ecx, DWORD PTR [edx+24]
	mov	eax, DWORD PTR _input$[ebp]
	cmp	DWORD PTR [eax+20], ecx
	jae	$LN6@antlr3UTF1@2
; Line 792
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	add	ecx, 1
	mov	edx, DWORD PTR _input$[ebp]
	mov	DWORD PTR [edx+36], ecx
; Line 794
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	movzx	edx, WORD PTR [ecx]
	mov	eax, DWORD PTR _input$[ebp]
	cmp	edx, DWORD PTR [eax+112]
	jne	SHORT $LN4@antlr3UTF1@2
; Line 798
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	add	ecx, 1
	mov	edx, DWORD PTR _input$[ebp]
	mov	DWORD PTR [edx+28], ecx
; Line 799
	mov	eax, DWORD PTR _input$[ebp]
	mov	DWORD PTR [eax+36], 0
; Line 800
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 2
	mov	edx, DWORD PTR _input$[ebp]
	mov	DWORD PTR [edx+32], ecx
$LN4@antlr3UTF1@2:
; Line 807
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	movzx	edx, WORD PTR [ecx]
	mov	DWORD PTR _ch$[ebp], edx
; Line 811
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 2
	mov	edx, DWORD PTR _input$[ebp]
	mov	DWORD PTR [edx+20], ecx
; Line 816
	cmp	DWORD PTR _ch$[ebp], 55296		; 0000d800H
	jb	SHORT $LN6@antlr3UTF1@2
	cmp	DWORD PTR _ch$[ebp], 56319		; 0000dbffH
	ja	SHORT $LN6@antlr3UTF1@2
; Line 820
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _input$[ebp]
	add	ecx, DWORD PTR [edx+24]
	mov	eax, DWORD PTR _input$[ebp]
	cmp	DWORD PTR [eax+20], ecx
	jae	SHORT $LN6@antlr3UTF1@2
; Line 824
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	movzx	edx, WORD PTR [ecx]
	mov	DWORD PTR _ch2$[ebp], edx
; Line 828
	cmp	DWORD PTR _ch2$[ebp], 56320		; 0000dc00H
	jb	SHORT $LN6@antlr3UTF1@2
	cmp	DWORD PTR _ch2$[ebp], 57343		; 0000dfffH
	ja	SHORT $LN6@antlr3UTF1@2
; Line 832
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 2
	mov	edx, DWORD PTR _input$[ebp]
	mov	DWORD PTR [edx+20], ecx
$LN6@antlr3UTF1@2:
; Line 847
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_antlr3UTF16Consume ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _antlr3UTF16LA
_TEXT	SEGMENT
tv87 = -244						; size = 4
_nextChar$ = -44					; size = 4
_ch2$ = -32						; size = 4
_ch$ = -20						; size = 4
_input$ = -8						; size = 4
_is$ = 8						; size = 4
_la$ = 12						; size = 4
_antlr3UTF16LA PROC					; COMDAT
; Line 858
	push	ebp
	mov	ebp, esp
	sub	esp, 244				; 000000f4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 61					; 0000003dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 867
	mov	eax, DWORD PTR _is$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _input$[ebp], ecx
; Line 868
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _nextChar$[ebp], ecx
; Line 872
	cmp	DWORD PTR _la$[ebp], 0
	jl	$LN9@antlr3UTF1@3
$LN15@antlr3UTF1@3:
; Line 874
	mov	eax, DWORD PTR _la$[ebp]
	sub	eax, 1
	mov	DWORD PTR _la$[ebp], eax
	cmp	DWORD PTR _la$[ebp], 0
	jle	SHORT $LN14@antlr3UTF1@3
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _input$[ebp]
	add	ecx, DWORD PTR [edx+24]
	cmp	DWORD PTR _nextChar$[ebp], ecx
	jae	SHORT $LN14@antlr3UTF1@3
; Line 880
	mov	eax, DWORD PTR _nextChar$[ebp]
	movzx	ecx, WORD PTR [eax]
	mov	DWORD PTR _ch$[ebp], ecx
	mov	edx, DWORD PTR _nextChar$[ebp]
	add	edx, 2
	mov	DWORD PTR _nextChar$[ebp], edx
; Line 885
	cmp	DWORD PTR _ch$[ebp], 55296		; 0000d800H
	jb	SHORT $LN13@antlr3UTF1@3
	cmp	DWORD PTR _ch$[ebp], 56319		; 0000dbffH
	ja	SHORT $LN13@antlr3UTF1@3
; Line 889
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _input$[ebp]
	add	ecx, DWORD PTR [edx+24]
	cmp	DWORD PTR _nextChar$[ebp], ecx
	jae	SHORT $LN13@antlr3UTF1@3
; Line 893
	mov	eax, DWORD PTR _nextChar$[ebp]
	movzx	ecx, WORD PTR [eax]
	mov	DWORD PTR _ch2$[ebp], ecx
; Line 897
	cmp	DWORD PTR _ch2$[ebp], 56320		; 0000dc00H
	jb	SHORT $LN13@antlr3UTF1@3
	cmp	DWORD PTR _ch2$[ebp], 57343		; 0000dfffH
	ja	SHORT $LN13@antlr3UTF1@3
; Line 901
	mov	eax, DWORD PTR _nextChar$[ebp]
	add	eax, 2
	mov	DWORD PTR _nextChar$[ebp], eax
$LN13@antlr3UTF1@3:
; Line 915
	jmp	SHORT $LN15@antlr3UTF1@3
$LN14@antlr3UTF1@3:
; Line 917
	jmp	$LN10@antlr3UTF1@3
$LN9@antlr3UTF1@3:
; Line 921
	mov	eax, DWORD PTR _la$[ebp]
	mov	ecx, DWORD PTR _la$[ebp]
	add	ecx, 1
	mov	DWORD PTR _la$[ebp], ecx
	test	eax, eax
	jge	SHORT $LN19@antlr3UTF1@3
	mov	DWORD PTR tv87[ebp], 1
	jmp	SHORT $LN20@antlr3UTF1@3
$LN19@antlr3UTF1@3:
	mov	DWORD PTR tv87[ebp], 0
$LN20@antlr3UTF1@3:
	cmp	DWORD PTR tv87[ebp], 0
	je	SHORT $LN10@antlr3UTF1@3
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR _nextChar$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jbe	SHORT $LN10@antlr3UTF1@3
; Line 925
	mov	eax, DWORD PTR _nextChar$[ebp]
	sub	eax, 2
	mov	DWORD PTR _nextChar$[ebp], eax
	mov	ecx, DWORD PTR _nextChar$[ebp]
	movzx	edx, WORD PTR [ecx]
	mov	DWORD PTR _ch$[ebp], edx
; Line 930
	cmp	DWORD PTR _ch$[ebp], 56320		; 0000dc00H
	jb	SHORT $LN7@antlr3UTF1@3
	cmp	DWORD PTR _ch$[ebp], 57343		; 0000dfffH
	ja	SHORT $LN7@antlr3UTF1@3
; Line 932
	mov	eax, DWORD PTR _nextChar$[ebp]
	movzx	ecx, WORD PTR [eax-2]
	mov	DWORD PTR _ch2$[ebp], ecx
; Line 933
	cmp	DWORD PTR _ch2$[ebp], 55296		; 0000d800H
	jb	SHORT $LN7@antlr3UTF1@3
	cmp	DWORD PTR _ch2$[ebp], 56319		; 0000dbffH
	ja	SHORT $LN7@antlr3UTF1@3
; Line 937
	mov	eax, DWORD PTR _nextChar$[ebp]
	sub	eax, 2
	mov	DWORD PTR _nextChar$[ebp], eax
$LN7@antlr3UTF1@3:
; Line 940
	jmp	$LN9@antlr3UTF1@3
$LN10@antlr3UTF1@3:
; Line 947
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _input$[ebp]
	add	ecx, DWORD PTR [edx+24]
	cmp	DWORD PTR _nextChar$[ebp], ecx
	jb	SHORT $LN5@antlr3UTF1@3
; Line 949
	or	eax, -1
	jmp	SHORT $LN17@antlr3UTF1@3
; Line 951
	jmp	SHORT $LN4@antlr3UTF1@3
$LN5@antlr3UTF1@3:
; Line 955
	mov	eax, DWORD PTR _nextChar$[ebp]
	movzx	ecx, WORD PTR [eax]
	mov	DWORD PTR _ch$[ebp], ecx
	mov	edx, DWORD PTR _nextChar$[ebp]
	add	edx, 2
	mov	DWORD PTR _nextChar$[ebp], edx
; Line 960
	cmp	DWORD PTR _ch$[ebp], 55296		; 0000d800H
	jb	SHORT $LN4@antlr3UTF1@3
	cmp	DWORD PTR _ch$[ebp], 56319		; 0000dbffH
	ja	SHORT $LN4@antlr3UTF1@3
; Line 964
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _input$[ebp]
	add	ecx, DWORD PTR [edx+24]
	cmp	DWORD PTR _nextChar$[ebp], ecx
	jae	SHORT $LN4@antlr3UTF1@3
; Line 968
	mov	eax, DWORD PTR _nextChar$[ebp]
	movzx	ecx, WORD PTR [eax]
	mov	DWORD PTR _ch2$[ebp], ecx
; Line 972
	cmp	DWORD PTR _ch2$[ebp], 56320		; 0000dc00H
	jb	SHORT $LN4@antlr3UTF1@3
	cmp	DWORD PTR _ch2$[ebp], 57343		; 0000dfffH
	ja	SHORT $LN4@antlr3UTF1@3
; Line 977
	mov	eax, DWORD PTR _ch$[ebp]
	sub	eax, 55296				; 0000d800H
	shl	eax, 10					; 0000000aH
	mov	ecx, DWORD PTR _ch2$[ebp]
	lea	edx, DWORD PTR [eax+ecx+9216]
	mov	DWORD PTR _ch$[ebp], edx
$LN4@antlr3UTF1@3:
; Line 988
	mov	eax, DWORD PTR _ch$[ebp]
$LN17@antlr3UTF1@3:
; Line 989
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_antlr3UTF16LA ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _antlr3UTF16Index
_TEXT	SEGMENT
_input$ = -8						; size = 4
_is$ = 8						; size = 4
_antlr3UTF16Index PROC					; COMDAT
; Line 997
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1000
	mov	eax, DWORD PTR _is$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _input$[ebp], ecx
; Line 1002
	mov	eax, DWORD PTR _input$[ebp]
	mov	eax, DWORD PTR [eax+20]
; Line 1003
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_antlr3UTF16Index ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _antlr3UTF16Seek
_TEXT	SEGMENT
_input$ = -8						; size = 4
_is$ = 8						; size = 4
_seekPoint$ = 12					; size = 4
_antlr3UTF16Seek PROC					; COMDAT
; Line 1014
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1017
	mov	eax, DWORD PTR _is$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _input$[ebp], ecx
; Line 1024
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR _seekPoint$[ebp]
	cmp	ecx, DWORD PTR [eax+20]
	jg	SHORT $LN2@antlr3UTF1@4
; Line 1026
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR _seekPoint$[ebp]
	mov	DWORD PTR [eax+20], ecx
; Line 1028
	jmp	SHORT $LN5@antlr3UTF1@4
$LN2@antlr3UTF1@4:
; Line 1032
	mov	esi, esp
	push	1
	mov	eax, DWORD PTR _is$[ebp]
	push	eax
	mov	ecx, DWORD PTR _is$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, -1
	je	SHORT $LN5@antlr3UTF1@4
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR _seekPoint$[ebp]
	cmp	ecx, DWORD PTR [eax+20]
	jge	SHORT $LN5@antlr3UTF1@4
; Line 1034
	mov	esi, esp
	mov	eax, DWORD PTR _is$[ebp]
	push	eax
	mov	ecx, DWORD PTR _is$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1035
	jmp	SHORT $LN2@antlr3UTF1@4
$LN5@antlr3UTF1@4:
; Line 1037
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_antlr3UTF16Seek ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _antlr3UTF16Substr
_TEXT	SEGMENT
_input$ = 8						; size = 4
_start$ = 12						; size = 4
_stop$ = 16						; size = 4
_antlr3UTF16Substr PROC					; COMDAT
; Line 1047
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1048
	mov	eax, DWORD PTR _stop$[ebp]
	sub	eax, DWORD PTR _start$[ebp]
	shr	eax, 1
	add	eax, 1
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _start$[ebp]
	push	ecx
	mov	edx, DWORD PTR _input$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR _input$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1049
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_antlr3UTF16Substr ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _antlr3UTF16ConsumeLE
_TEXT	SEGMENT
_ch2$ = -32						; size = 4
_ch$ = -20						; size = 4
_input$ = -8						; size = 4
_is$ = 8						; size = 4
_antlr3UTF16ConsumeLE PROC				; COMDAT
; Line 1061
	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1066
	mov	eax, DWORD PTR _is$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _input$[ebp], ecx
; Line 1070
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _input$[ebp]
	add	ecx, DWORD PTR [edx+24]
	mov	eax, DWORD PTR _input$[ebp]
	cmp	DWORD PTR [eax+20], ecx
	jae	$LN6@antlr3UTF1@5
; Line 1074
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	add	ecx, 1
	mov	edx, DWORD PTR _input$[ebp]
	mov	DWORD PTR [edx+36], ecx
; Line 1076
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	movzx	edx, WORD PTR [ecx]
	mov	eax, DWORD PTR _input$[ebp]
	cmp	edx, DWORD PTR [eax+112]
	jne	SHORT $LN4@antlr3UTF1@5
; Line 1080
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	add	ecx, 1
	mov	edx, DWORD PTR _input$[ebp]
	mov	DWORD PTR [edx+28], ecx
; Line 1081
	mov	eax, DWORD PTR _input$[ebp]
	mov	DWORD PTR [eax+36], 0
; Line 1082
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 2
	mov	edx, DWORD PTR _input$[ebp]
	mov	DWORD PTR [edx+32], ecx
$LN4@antlr3UTF1@5:
; Line 1089
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	movzx	edx, BYTE PTR [ecx]
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	movzx	eax, BYTE PTR [ecx+1]
	shl	eax, 8
	add	edx, eax
	mov	DWORD PTR _ch$[ebp], edx
; Line 1093
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 2
	mov	edx, DWORD PTR _input$[ebp]
	mov	DWORD PTR [edx+20], ecx
; Line 1098
	cmp	DWORD PTR _ch$[ebp], 55296		; 0000d800H
	jb	SHORT $LN6@antlr3UTF1@5
	cmp	DWORD PTR _ch$[ebp], 56319		; 0000dbffH
	ja	SHORT $LN6@antlr3UTF1@5
; Line 1102
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _input$[ebp]
	add	ecx, DWORD PTR [edx+24]
	mov	eax, DWORD PTR _input$[ebp]
	cmp	DWORD PTR [eax+20], ecx
	jae	SHORT $LN6@antlr3UTF1@5
; Line 1104
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	movzx	edx, BYTE PTR [ecx]
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	movzx	eax, BYTE PTR [ecx+1]
	shl	eax, 8
	add	edx, eax
	mov	DWORD PTR _ch2$[ebp], edx
; Line 1108
	cmp	DWORD PTR _ch2$[ebp], 56320		; 0000dc00H
	jb	SHORT $LN6@antlr3UTF1@5
	cmp	DWORD PTR _ch2$[ebp], 57343		; 0000dfffH
	ja	SHORT $LN6@antlr3UTF1@5
; Line 1112
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 2
	mov	edx, DWORD PTR _input$[ebp]
	mov	DWORD PTR [edx+20], ecx
$LN6@antlr3UTF1@5:
; Line 1127
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_antlr3UTF16ConsumeLE ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _antlr3UTF16LALE
_TEXT	SEGMENT
tv91 = -244						; size = 4
_nextChar$ = -44					; size = 4
_ch2$ = -32						; size = 4
_ch$ = -20						; size = 4
_input$ = -8						; size = 4
_is$ = 8						; size = 4
_la$ = 12						; size = 4
_antlr3UTF16LALE PROC					; COMDAT
; Line 1138
	push	ebp
	mov	ebp, esp
	sub	esp, 244				; 000000f4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 61					; 0000003dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1147
	mov	eax, DWORD PTR _is$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _input$[ebp], ecx
; Line 1148
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _nextChar$[ebp], ecx
; Line 1152
	cmp	DWORD PTR _la$[ebp], 0
	jl	$LN9@antlr3UTF1@6
$LN15@antlr3UTF1@6:
; Line 1154
	mov	eax, DWORD PTR _la$[ebp]
	sub	eax, 1
	mov	DWORD PTR _la$[ebp], eax
	cmp	DWORD PTR _la$[ebp], 0
	jle	SHORT $LN14@antlr3UTF1@6
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _input$[ebp]
	add	ecx, DWORD PTR [edx+24]
	cmp	DWORD PTR _nextChar$[ebp], ecx
	jae	SHORT $LN14@antlr3UTF1@6
; Line 1160
	mov	eax, DWORD PTR _nextChar$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	shl	ecx, 8
	mov	edx, DWORD PTR _nextChar$[ebp]
	add	ecx, DWORD PTR [edx]
	mov	DWORD PTR _ch$[ebp], ecx
; Line 1161
	mov	eax, DWORD PTR _nextChar$[ebp]
	add	eax, 8
	mov	DWORD PTR _nextChar$[ebp], eax
; Line 1166
	cmp	DWORD PTR _ch$[ebp], 55296		; 0000d800H
	jb	SHORT $LN13@antlr3UTF1@6
	cmp	DWORD PTR _ch$[ebp], 56319		; 0000dbffH
	ja	SHORT $LN13@antlr3UTF1@6
; Line 1170
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _input$[ebp]
	add	ecx, DWORD PTR [edx+24]
	cmp	DWORD PTR _nextChar$[ebp], ecx
	jae	SHORT $LN13@antlr3UTF1@6
; Line 1174
	mov	eax, DWORD PTR _nextChar$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	shl	ecx, 8
	mov	edx, DWORD PTR _nextChar$[ebp]
	add	ecx, DWORD PTR [edx]
	mov	DWORD PTR _ch2$[ebp], ecx
; Line 1178
	cmp	DWORD PTR _ch2$[ebp], 56320		; 0000dc00H
	jb	SHORT $LN13@antlr3UTF1@6
	cmp	DWORD PTR _ch2$[ebp], 57343		; 0000dfffH
	ja	SHORT $LN13@antlr3UTF1@6
; Line 1182
	mov	eax, DWORD PTR _nextChar$[ebp]
	add	eax, 8
	mov	DWORD PTR _nextChar$[ebp], eax
$LN13@antlr3UTF1@6:
; Line 1196
	jmp	$LN15@antlr3UTF1@6
$LN14@antlr3UTF1@6:
; Line 1198
	jmp	$LN10@antlr3UTF1@6
$LN9@antlr3UTF1@6:
; Line 1202
	mov	eax, DWORD PTR _la$[ebp]
	mov	ecx, DWORD PTR _la$[ebp]
	add	ecx, 1
	mov	DWORD PTR _la$[ebp], ecx
	test	eax, eax
	jge	SHORT $LN19@antlr3UTF1@6
	mov	DWORD PTR tv91[ebp], 1
	jmp	SHORT $LN20@antlr3UTF1@6
$LN19@antlr3UTF1@6:
	mov	DWORD PTR tv91[ebp], 0
$LN20@antlr3UTF1@6:
	cmp	DWORD PTR tv91[ebp], 0
	je	SHORT $LN10@antlr3UTF1@6
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR _nextChar$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jbe	SHORT $LN10@antlr3UTF1@6
; Line 1206
	mov	eax, DWORD PTR _nextChar$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _nextChar$[ebp]
	mov	eax, DWORD PTR [edx]
	sub	eax, 1
	shl	eax, 8
	lea	ecx, DWORD PTR [ecx+eax-2]
	mov	DWORD PTR _ch$[ebp], ecx
; Line 1207
	mov	eax, DWORD PTR _nextChar$[ebp]
	sub	eax, 8
	mov	DWORD PTR _nextChar$[ebp], eax
; Line 1212
	cmp	DWORD PTR _ch$[ebp], 56320		; 0000dc00H
	jb	SHORT $LN7@antlr3UTF1@6
	cmp	DWORD PTR _ch$[ebp], 57343		; 0000dfffH
	ja	SHORT $LN7@antlr3UTF1@6
; Line 1214
	mov	eax, DWORD PTR _nextChar$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _nextChar$[ebp]
	mov	eax, DWORD PTR [edx]
	sub	eax, 1
	shl	eax, 8
	lea	ecx, DWORD PTR [ecx+eax-2]
	mov	DWORD PTR _ch2$[ebp], ecx
; Line 1215
	cmp	DWORD PTR _ch2$[ebp], 55296		; 0000d800H
	jb	SHORT $LN7@antlr3UTF1@6
	cmp	DWORD PTR _ch2$[ebp], 56319		; 0000dbffH
	ja	SHORT $LN7@antlr3UTF1@6
; Line 1219
	mov	eax, DWORD PTR _nextChar$[ebp]
	sub	eax, 8
	mov	DWORD PTR _nextChar$[ebp], eax
$LN7@antlr3UTF1@6:
; Line 1222
	jmp	$LN9@antlr3UTF1@6
$LN10@antlr3UTF1@6:
; Line 1229
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _input$[ebp]
	add	ecx, DWORD PTR [edx+24]
	cmp	DWORD PTR _nextChar$[ebp], ecx
	jb	SHORT $LN5@antlr3UTF1@6
; Line 1231
	or	eax, -1
	jmp	SHORT $LN17@antlr3UTF1@6
; Line 1233
	jmp	SHORT $LN4@antlr3UTF1@6
$LN5@antlr3UTF1@6:
; Line 1237
	mov	eax, DWORD PTR _nextChar$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	shl	ecx, 8
	mov	edx, DWORD PTR _nextChar$[ebp]
	add	ecx, DWORD PTR [edx]
	mov	DWORD PTR _ch$[ebp], ecx
; Line 1238
	mov	eax, DWORD PTR _nextChar$[ebp]
	add	eax, 8
	mov	DWORD PTR _nextChar$[ebp], eax
; Line 1243
	cmp	DWORD PTR _ch$[ebp], 55296		; 0000d800H
	jb	SHORT $LN4@antlr3UTF1@6
	cmp	DWORD PTR _ch$[ebp], 56319		; 0000dbffH
	ja	SHORT $LN4@antlr3UTF1@6
; Line 1247
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _input$[ebp]
	add	ecx, DWORD PTR [edx+24]
	cmp	DWORD PTR _nextChar$[ebp], ecx
	jae	SHORT $LN4@antlr3UTF1@6
; Line 1251
	mov	eax, DWORD PTR _nextChar$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	shl	ecx, 8
	mov	edx, DWORD PTR _nextChar$[ebp]
	add	ecx, DWORD PTR [edx]
	mov	DWORD PTR _ch2$[ebp], ecx
; Line 1255
	cmp	DWORD PTR _ch2$[ebp], 56320		; 0000dc00H
	jb	SHORT $LN4@antlr3UTF1@6
	cmp	DWORD PTR _ch2$[ebp], 57343		; 0000dfffH
	ja	SHORT $LN4@antlr3UTF1@6
; Line 1260
	mov	eax, DWORD PTR _ch$[ebp]
	sub	eax, 55296				; 0000d800H
	shl	eax, 10					; 0000000aH
	mov	ecx, DWORD PTR _ch2$[ebp]
	lea	edx, DWORD PTR [eax+ecx+9216]
	mov	DWORD PTR _ch$[ebp], edx
$LN4@antlr3UTF1@6:
; Line 1271
	mov	eax, DWORD PTR _ch$[ebp]
$LN17@antlr3UTF1@6:
; Line 1272
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_antlr3UTF16LALE ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _antlr3UTF16ConsumeBE
_TEXT	SEGMENT
_ch2$ = -32						; size = 4
_ch$ = -20						; size = 4
_input$ = -8						; size = 4
_is$ = 8						; size = 4
_antlr3UTF16ConsumeBE PROC				; COMDAT
; Line 1280
	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1285
	mov	eax, DWORD PTR _is$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _input$[ebp], ecx
; Line 1289
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _input$[ebp]
	add	ecx, DWORD PTR [edx+24]
	mov	eax, DWORD PTR _input$[ebp]
	cmp	DWORD PTR [eax+20], ecx
	jae	$LN6@antlr3UTF1@7
; Line 1293
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	add	ecx, 1
	mov	edx, DWORD PTR _input$[ebp]
	mov	DWORD PTR [edx+36], ecx
; Line 1295
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	movzx	edx, WORD PTR [ecx]
	mov	eax, DWORD PTR _input$[ebp]
	cmp	edx, DWORD PTR [eax+112]
	jne	SHORT $LN4@antlr3UTF1@7
; Line 1299
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	add	ecx, 1
	mov	edx, DWORD PTR _input$[ebp]
	mov	DWORD PTR [edx+28], ecx
; Line 1300
	mov	eax, DWORD PTR _input$[ebp]
	mov	DWORD PTR [eax+36], 0
; Line 1301
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 2
	mov	edx, DWORD PTR _input$[ebp]
	mov	DWORD PTR [edx+32], ecx
$LN4@antlr3UTF1@7:
; Line 1308
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	movzx	edx, BYTE PTR [ecx+1]
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	movzx	eax, BYTE PTR [ecx]
	shl	eax, 8
	add	edx, eax
	mov	DWORD PTR _ch$[ebp], edx
; Line 1312
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 2
	mov	edx, DWORD PTR _input$[ebp]
	mov	DWORD PTR [edx+20], ecx
; Line 1317
	cmp	DWORD PTR _ch$[ebp], 55296		; 0000d800H
	jb	SHORT $LN6@antlr3UTF1@7
	cmp	DWORD PTR _ch$[ebp], 56319		; 0000dbffH
	ja	SHORT $LN6@antlr3UTF1@7
; Line 1321
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _input$[ebp]
	add	ecx, DWORD PTR [edx+24]
	mov	eax, DWORD PTR _input$[ebp]
	cmp	DWORD PTR [eax+20], ecx
	jae	SHORT $LN6@antlr3UTF1@7
; Line 1325
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	movzx	edx, BYTE PTR [ecx+1]
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	movzx	eax, BYTE PTR [ecx]
	shl	eax, 8
	add	edx, eax
	mov	DWORD PTR _ch2$[ebp], edx
; Line 1329
	cmp	DWORD PTR _ch2$[ebp], 56320		; 0000dc00H
	jb	SHORT $LN6@antlr3UTF1@7
	cmp	DWORD PTR _ch2$[ebp], 57343		; 0000dfffH
	ja	SHORT $LN6@antlr3UTF1@7
; Line 1333
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 2
	mov	edx, DWORD PTR _input$[ebp]
	mov	DWORD PTR [edx+20], ecx
$LN6@antlr3UTF1@7:
; Line 1348
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_antlr3UTF16ConsumeBE ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _antlr3UTF16LABE
_TEXT	SEGMENT
tv91 = -244						; size = 4
_nextChar$ = -44					; size = 4
_ch2$ = -32						; size = 4
_ch$ = -20						; size = 4
_input$ = -8						; size = 4
_is$ = 8						; size = 4
_la$ = 12						; size = 4
_antlr3UTF16LABE PROC					; COMDAT
; Line 1359
	push	ebp
	mov	ebp, esp
	sub	esp, 244				; 000000f4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 61					; 0000003dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1368
	mov	eax, DWORD PTR _is$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _input$[ebp], ecx
; Line 1369
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _nextChar$[ebp], ecx
; Line 1373
	cmp	DWORD PTR _la$[ebp], 0
	jl	$LN9@antlr3UTF1@8
$LN15@antlr3UTF1@8:
; Line 1375
	mov	eax, DWORD PTR _la$[ebp]
	sub	eax, 1
	mov	DWORD PTR _la$[ebp], eax
	cmp	DWORD PTR _la$[ebp], 0
	jle	SHORT $LN14@antlr3UTF1@8
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _input$[ebp]
	add	ecx, DWORD PTR [edx+24]
	cmp	DWORD PTR _nextChar$[ebp], ecx
	jae	SHORT $LN14@antlr3UTF1@8
; Line 1381
	mov	eax, DWORD PTR _nextChar$[ebp]
	mov	ecx, DWORD PTR [eax]
	shl	ecx, 8
	mov	edx, DWORD PTR _nextChar$[ebp]
	add	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR _ch$[ebp], ecx
; Line 1382
	mov	eax, DWORD PTR _nextChar$[ebp]
	add	eax, 8
	mov	DWORD PTR _nextChar$[ebp], eax
; Line 1387
	cmp	DWORD PTR _ch$[ebp], 55296		; 0000d800H
	jb	SHORT $LN13@antlr3UTF1@8
	cmp	DWORD PTR _ch$[ebp], 56319		; 0000dbffH
	ja	SHORT $LN13@antlr3UTF1@8
; Line 1391
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _input$[ebp]
	add	ecx, DWORD PTR [edx+24]
	cmp	DWORD PTR _nextChar$[ebp], ecx
	jae	SHORT $LN13@antlr3UTF1@8
; Line 1395
	mov	eax, DWORD PTR _nextChar$[ebp]
	mov	ecx, DWORD PTR [eax]
	shl	ecx, 8
	mov	edx, DWORD PTR _nextChar$[ebp]
	add	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR _ch2$[ebp], ecx
; Line 1399
	cmp	DWORD PTR _ch2$[ebp], 56320		; 0000dc00H
	jb	SHORT $LN13@antlr3UTF1@8
	cmp	DWORD PTR _ch2$[ebp], 57343		; 0000dfffH
	ja	SHORT $LN13@antlr3UTF1@8
; Line 1403
	mov	eax, DWORD PTR _nextChar$[ebp]
	add	eax, 8
	mov	DWORD PTR _nextChar$[ebp], eax
$LN13@antlr3UTF1@8:
; Line 1417
	jmp	$LN15@antlr3UTF1@8
$LN14@antlr3UTF1@8:
; Line 1419
	jmp	$LN10@antlr3UTF1@8
$LN9@antlr3UTF1@8:
; Line 1423
	mov	eax, DWORD PTR _la$[ebp]
	mov	ecx, DWORD PTR _la$[ebp]
	add	ecx, 1
	mov	DWORD PTR _la$[ebp], ecx
	test	eax, eax
	jge	SHORT $LN19@antlr3UTF1@8
	mov	DWORD PTR tv91[ebp], 1
	jmp	SHORT $LN20@antlr3UTF1@8
$LN19@antlr3UTF1@8:
	mov	DWORD PTR tv91[ebp], 0
$LN20@antlr3UTF1@8:
	cmp	DWORD PTR tv91[ebp], 0
	je	SHORT $LN10@antlr3UTF1@8
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR _nextChar$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jbe	SHORT $LN10@antlr3UTF1@8
; Line 1427
	mov	eax, DWORD PTR _nextChar$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, 2
	shl	ecx, 8
	mov	edx, DWORD PTR _nextChar$[ebp]
	mov	eax, DWORD PTR [edx]
	lea	ecx, DWORD PTR [ecx+eax-1]
	mov	DWORD PTR _ch$[ebp], ecx
; Line 1428
	mov	eax, DWORD PTR _nextChar$[ebp]
	sub	eax, 8
	mov	DWORD PTR _nextChar$[ebp], eax
; Line 1433
	cmp	DWORD PTR _ch$[ebp], 56320		; 0000dc00H
	jb	SHORT $LN7@antlr3UTF1@8
	cmp	DWORD PTR _ch$[ebp], 57343		; 0000dfffH
	ja	SHORT $LN7@antlr3UTF1@8
; Line 1435
	mov	eax, DWORD PTR _nextChar$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, 2
	shl	ecx, 8
	mov	edx, DWORD PTR _nextChar$[ebp]
	mov	eax, DWORD PTR [edx]
	lea	ecx, DWORD PTR [ecx+eax-1]
	mov	DWORD PTR _ch2$[ebp], ecx
; Line 1436
	cmp	DWORD PTR _ch2$[ebp], 55296		; 0000d800H
	jb	SHORT $LN7@antlr3UTF1@8
	cmp	DWORD PTR _ch2$[ebp], 56319		; 0000dbffH
	ja	SHORT $LN7@antlr3UTF1@8
; Line 1440
	mov	eax, DWORD PTR _nextChar$[ebp]
	sub	eax, 8
	mov	DWORD PTR _nextChar$[ebp], eax
$LN7@antlr3UTF1@8:
; Line 1443
	jmp	$LN9@antlr3UTF1@8
$LN10@antlr3UTF1@8:
; Line 1450
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _input$[ebp]
	add	ecx, DWORD PTR [edx+24]
	cmp	DWORD PTR _nextChar$[ebp], ecx
	jb	SHORT $LN5@antlr3UTF1@8
; Line 1452
	or	eax, -1
	jmp	SHORT $LN17@antlr3UTF1@8
; Line 1454
	jmp	SHORT $LN4@antlr3UTF1@8
$LN5@antlr3UTF1@8:
; Line 1458
	mov	eax, DWORD PTR _nextChar$[ebp]
	mov	ecx, DWORD PTR [eax]
	shl	ecx, 8
	mov	edx, DWORD PTR _nextChar$[ebp]
	add	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR _ch$[ebp], ecx
; Line 1459
	mov	eax, DWORD PTR _nextChar$[ebp]
	add	eax, 8
	mov	DWORD PTR _nextChar$[ebp], eax
; Line 1464
	cmp	DWORD PTR _ch$[ebp], 55296		; 0000d800H
	jb	SHORT $LN4@antlr3UTF1@8
	cmp	DWORD PTR _ch$[ebp], 56319		; 0000dbffH
	ja	SHORT $LN4@antlr3UTF1@8
; Line 1468
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _input$[ebp]
	add	ecx, DWORD PTR [edx+24]
	cmp	DWORD PTR _nextChar$[ebp], ecx
	jae	SHORT $LN4@antlr3UTF1@8
; Line 1472
	mov	eax, DWORD PTR _nextChar$[ebp]
	mov	ecx, DWORD PTR [eax]
	shl	ecx, 8
	mov	edx, DWORD PTR _nextChar$[ebp]
	add	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR _ch2$[ebp], ecx
; Line 1476
	cmp	DWORD PTR _ch2$[ebp], 56320		; 0000dc00H
	jb	SHORT $LN4@antlr3UTF1@8
	cmp	DWORD PTR _ch2$[ebp], 57343		; 0000dfffH
	ja	SHORT $LN4@antlr3UTF1@8
; Line 1481
	mov	eax, DWORD PTR _ch$[ebp]
	sub	eax, 55296				; 0000d800H
	shl	eax, 10					; 0000000aH
	mov	ecx, DWORD PTR _ch2$[ebp]
	lea	edx, DWORD PTR [eax+ecx+9216]
	mov	DWORD PTR _ch$[ebp], edx
$LN4@antlr3UTF1@8:
; Line 1492
	mov	eax, DWORD PTR _ch$[ebp]
$LN17@antlr3UTF1@8:
; Line 1493
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_antlr3UTF16LABE ENDP
_TEXT	ENDS
PUBLIC	_antlr3UTF32SetupStream
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _antlr3UTF32SetupStream
_TEXT	SEGMENT
tv73 = -196						; size = 4
_input$ = 8						; size = 4
_machineBigEndian$ = 12					; size = 1
_inputBigEndian$ = 16					; size = 1
_antlr3UTF32SetupStream PROC				; COMDAT
; Line 1501
	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1506
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR [eax+120]
	push	ecx
	call	_antlr3StringFactoryNew
	add	esp, 4
	mov	edx, DWORD PTR _input$[ebp]
	mov	DWORD PTR [edx+16], eax
; Line 1510
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [ecx+32], OFFSET _antlr3UTF32Index
; Line 1511
	mov	eax, DWORD PTR _input$[ebp]
	mov	DWORD PTR [eax+84], OFFSET _antlr3UTF32Substr
; Line 1512
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [ecx+48], OFFSET _antlr3UTF32Seek
; Line 1513
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [ecx+20], OFFSET _antlr3UTF32Consume
; Line 1519
	mov	al, BYTE PTR _machineBigEndian$[ebp]
	mov	BYTE PTR tv73[ebp], al
	cmp	BYTE PTR tv73[ebp], 0
	je	SHORT $LN3@antlr3UTF3
	cmp	BYTE PTR tv73[ebp], 1
	je	SHORT $LN6@antlr3UTF3
	jmp	SHORT $LN7@antlr3UTF3
$LN6@antlr3UTF3:
; Line 1527
	movzx	eax, BYTE PTR _inputBigEndian$[ebp]
	cmp	eax, 1
	jne	SHORT $LN5@antlr3UTF3
; Line 1531
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [ecx+24], OFFSET _antlr3UTF32LA
; Line 1533
	jmp	SHORT $LN4@antlr3UTF3
$LN5@antlr3UTF3:
; Line 1537
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [ecx+24], OFFSET _antlr3UTF32LALE
$LN4@antlr3UTF3:
; Line 1539
	jmp	SHORT $LN7@antlr3UTF3
$LN3@antlr3UTF3:
; Line 1547
	movzx	eax, BYTE PTR _inputBigEndian$[ebp]
	test	eax, eax
	jne	SHORT $LN2@antlr3UTF3
; Line 1551
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [ecx+24], OFFSET _antlr3UTF32LA
; Line 1553
	jmp	SHORT $LN7@antlr3UTF3
$LN2@antlr3UTF3:
; Line 1557
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [ecx+24], OFFSET _antlr3UTF32LABE
$LN7@antlr3UTF3:
; Line 1562
	mov	eax, DWORD PTR _input$[ebp]
	mov	BYTE PTR [eax+116], 4
; Line 1563
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 196				; 000000c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_antlr3UTF32SetupStream ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _antlr3UTF32Consume
_TEXT	SEGMENT
_input$ = -8						; size = 4
_is$ = 8						; size = 4
_antlr3UTF32Consume PROC				; COMDAT
; Line 1571
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1574
	mov	eax, DWORD PTR _is$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _input$[ebp], ecx
; Line 1578
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _input$[ebp]
	add	ecx, DWORD PTR [edx+24]
	mov	eax, DWORD PTR _input$[ebp]
	cmp	DWORD PTR [eax+20], ecx
	jae	SHORT $LN3@antlr3UTF3@2
; Line 1582
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	add	ecx, 1
	mov	edx, DWORD PTR _input$[ebp]
	mov	DWORD PTR [edx+36], ecx
; Line 1584
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _input$[ebp]
	mov	eax, DWORD PTR [ecx]
	cmp	eax, DWORD PTR [edx+112]
	jne	SHORT $LN1@antlr3UTF3@2
; Line 1588
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	add	ecx, 1
	mov	edx, DWORD PTR _input$[ebp]
	mov	DWORD PTR [edx+28], ecx
; Line 1589
	mov	eax, DWORD PTR _input$[ebp]
	mov	DWORD PTR [eax+36], 0
; Line 1590
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 4
	mov	edx, DWORD PTR _input$[ebp]
	mov	DWORD PTR [edx+32], ecx
$LN1@antlr3UTF3@2:
; Line 1595
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 4
	mov	edx, DWORD PTR _input$[ebp]
	mov	DWORD PTR [edx+20], ecx
$LN3@antlr3UTF3@2:
; Line 1597
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_antlr3UTF32Consume ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _antlr3UTF32Index
_TEXT	SEGMENT
_input$ = -8						; size = 4
_is$ = 8						; size = 4
_antlr3UTF32Index PROC					; COMDAT
; Line 1604
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1607
	mov	eax, DWORD PTR _is$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _input$[ebp], ecx
; Line 1609
	mov	eax, DWORD PTR _input$[ebp]
	mov	eax, DWORD PTR [eax+20]
; Line 1610
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_antlr3UTF32Index ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _antlr3UTF32Substr
_TEXT	SEGMENT
_input$ = 8						; size = 4
_start$ = 12						; size = 4
_stop$ = 16						; size = 4
_antlr3UTF32Substr PROC					; COMDAT
; Line 1621
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1622
	mov	eax, DWORD PTR _stop$[ebp]
	sub	eax, DWORD PTR _start$[ebp]
	shr	eax, 2
	add	eax, 1
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _start$[ebp]
	push	ecx
	mov	edx, DWORD PTR _input$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR _input$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1623
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_antlr3UTF32Substr ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _antlr3UTF32Seek
_TEXT	SEGMENT
_input$ = -8						; size = 4
_is$ = 8						; size = 4
_seekPoint$ = 12					; size = 4
_antlr3UTF32Seek PROC					; COMDAT
; Line 1634
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1637
	mov	eax, DWORD PTR _is$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _input$[ebp], ecx
; Line 1644
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR _seekPoint$[ebp]
	cmp	ecx, DWORD PTR [eax+20]
	jg	SHORT $LN2@antlr3UTF3@3
; Line 1646
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR _seekPoint$[ebp]
	mov	DWORD PTR [eax+20], ecx
; Line 1648
	jmp	SHORT $LN5@antlr3UTF3@3
$LN2@antlr3UTF3@3:
; Line 1652
	mov	esi, esp
	push	1
	mov	eax, DWORD PTR _is$[ebp]
	push	eax
	mov	ecx, DWORD PTR _is$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, -1
	je	SHORT $LN5@antlr3UTF3@3
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR _seekPoint$[ebp]
	cmp	ecx, DWORD PTR [eax+20]
	jge	SHORT $LN5@antlr3UTF3@3
; Line 1654
	mov	esi, esp
	mov	eax, DWORD PTR _is$[ebp]
	push	eax
	mov	ecx, DWORD PTR _is$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1655
	jmp	SHORT $LN2@antlr3UTF3@3
$LN5@antlr3UTF3@3:
; Line 1657
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_antlr3UTF32Seek ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _antlr3UTF32LA
_TEXT	SEGMENT
_input$ = -8						; size = 4
_is$ = 8						; size = 4
_la$ = 12						; size = 4
_antlr3UTF32LA PROC					; COMDAT
; Line 1668
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1671
	mov	eax, DWORD PTR _is$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _input$[ebp], ecx
; Line 1673
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _la$[ebp]
	lea	eax, DWORD PTR [ecx+edx-1]
	mov	ecx, DWORD PTR _input$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	ecx, DWORD PTR _input$[ebp]
	add	edx, DWORD PTR [ecx+24]
	cmp	eax, edx
	jb	SHORT $LN2@antlr3UTF3@4
; Line 1675
	or	eax, -1
	jmp	SHORT $LN3@antlr3UTF3@4
; Line 1677
	jmp	SHORT $LN3@antlr3UTF3@4
$LN2@antlr3UTF3@4:
; Line 1679
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _la$[ebp]
	mov	eax, DWORD PTR [ecx+edx*4-4]
$LN3@antlr3UTF3@4:
; Line 1681
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_antlr3UTF32LA ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _antlr3UTF32LALE
_TEXT	SEGMENT
_c$35450 = -20						; size = 4
_input$ = -8						; size = 4
_is$ = 8						; size = 4
_la$ = 12						; size = 4
_antlr3UTF32LALE PROC					; COMDAT
; Line 1692
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1695
	mov	eax, DWORD PTR _is$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _input$[ebp], ecx
; Line 1697
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _la$[ebp]
	lea	eax, DWORD PTR [ecx+edx-1]
	mov	ecx, DWORD PTR _input$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	ecx, DWORD PTR _input$[ebp]
	add	edx, DWORD PTR [ecx+24]
	cmp	eax, edx
	jb	SHORT $LN2@antlr3UTF3@5
; Line 1699
	or	eax, -1
	jmp	SHORT $LN3@antlr3UTF3@5
; Line 1701
	jmp	SHORT $LN3@antlr3UTF3@5
$LN2@antlr3UTF3@5:
; Line 1705
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _la$[ebp]
	mov	eax, DWORD PTR [ecx+edx*4-4]
	mov	DWORD PTR _c$35450[ebp], eax
; Line 1709
	mov	eax, DWORD PTR _c$35450[ebp]
	shr	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _c$35450[ebp]
	shl	ecx, 8
	and	ecx, 16711680				; 00ff0000H
	or	eax, ecx
	mov	edx, DWORD PTR _c$35450[ebp]
	shr	edx, 8
	and	edx, 65280				; 0000ff00H
	or	eax, edx
	mov	ecx, DWORD PTR _c$35450[ebp]
	shl	ecx, 24					; 00000018H
	or	eax, ecx
$LN3@antlr3UTF3@5:
; Line 1711
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_antlr3UTF32LALE ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _antlr3UTF32LABE
_TEXT	SEGMENT
_c$35464 = -20						; size = 4
_input$ = -8						; size = 4
_is$ = 8						; size = 4
_la$ = 12						; size = 4
_antlr3UTF32LABE PROC					; COMDAT
; Line 1723
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1726
	mov	eax, DWORD PTR _is$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _input$[ebp], ecx
; Line 1728
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _la$[ebp]
	lea	eax, DWORD PTR [ecx+edx-1]
	mov	ecx, DWORD PTR _input$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	ecx, DWORD PTR _input$[ebp]
	add	edx, DWORD PTR [ecx+24]
	cmp	eax, edx
	jb	SHORT $LN2@antlr3UTF3@6
; Line 1730
	or	eax, -1
	jmp	SHORT $LN3@antlr3UTF3@6
; Line 1732
	jmp	SHORT $LN3@antlr3UTF3@6
$LN2@antlr3UTF3@6:
; Line 1736
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _la$[ebp]
	mov	eax, DWORD PTR [ecx+edx*4-4]
	mov	DWORD PTR _c$35464[ebp], eax
; Line 1740
	mov	eax, DWORD PTR _c$35464[ebp]
	shr	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _c$35464[ebp]
	shl	ecx, 8
	and	ecx, 16711680				; 00ff0000H
	or	eax, ecx
	mov	edx, DWORD PTR _c$35464[ebp]
	shr	edx, 8
	and	edx, 65280				; 0000ff00H
	or	eax, edx
	mov	ecx, DWORD PTR _c$35464[ebp]
	shl	ecx, 24					; 00000018H
	or	eax, ecx
$LN3@antlr3UTF3@6:
; Line 1742
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_antlr3UTF32LABE ENDP
_TEXT	ENDS
PUBLIC	_antlr3UTF8SetupStream
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _antlr3UTF8SetupStream
_TEXT	SEGMENT
_input$ = 8						; size = 4
_antlr3UTF8SetupStream PROC				; COMDAT
; Line 1751
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1756
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR [eax+120]
	push	ecx
	call	_antlr3StringFactoryNew
	add	esp, 4
	mov	edx, DWORD PTR _input$[ebp]
	mov	DWORD PTR [edx+16], eax
; Line 1760
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [ecx+20], OFFSET _antlr3UTF8Consume
; Line 1761
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [ecx+24], OFFSET _antlr3UTF8LA
; Line 1762
	mov	eax, DWORD PTR _input$[ebp]
	mov	BYTE PTR [eax+116], 0
; Line 1763
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_antlr3UTF8SetupStream ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _antlr3UTF8Consume
_TEXT	SEGMENT
tv86 = -244						; size = 4
_nextChar$ = -44					; size = 4
_ch$ = -32						; size = 4
_extraBytesToRead$ = -20				; size = 4
_input$ = -8						; size = 4
_is$ = 8						; size = 4
_antlr3UTF8Consume PROC					; COMDAT
; Line 1805
	push	ebp
	mov	ebp, esp
	sub	esp, 244				; 000000f4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 61					; 0000003dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1811
	mov	eax, DWORD PTR _is$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _input$[ebp], ecx
; Line 1813
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _nextChar$[ebp], ecx
; Line 1815
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _input$[ebp]
	add	ecx, DWORD PTR [edx+24]
	cmp	DWORD PTR _nextChar$[ebp], ecx
	jae	$LN12@antlr3UTF8
; Line 1819
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	add	ecx, 1
	mov	edx, DWORD PTR _input$[ebp]
	mov	DWORD PTR [edx+36], ecx
; Line 1823
	mov	eax, DWORD PTR _nextChar$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _trailingBytesForUTF8[ecx*4]
	mov	DWORD PTR _extraBytesToRead$[ebp], edx
; Line 1825
	mov	eax, DWORD PTR _nextChar$[ebp]
	add	eax, DWORD PTR _extraBytesToRead$[ebp]
	mov	ecx, DWORD PTR _input$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	ecx, DWORD PTR _input$[ebp]
	add	edx, DWORD PTR [ecx+24]
	cmp	eax, edx
	jb	SHORT $LN10@antlr3UTF8
; Line 1827
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _input$[ebp]
	add	ecx, DWORD PTR [edx+24]
	mov	eax, DWORD PTR _input$[ebp]
	mov	DWORD PTR [eax+20], ecx
; Line 1828
	jmp	$LN12@antlr3UTF8
$LN10@antlr3UTF8:
; Line 1835
	mov	DWORD PTR _ch$[ebp], 0
; Line 1836
	mov	eax, DWORD PTR _extraBytesToRead$[ebp]
	mov	DWORD PTR tv86[ebp], eax
	cmp	DWORD PTR tv86[ebp], 5
	ja	$LN8@antlr3UTF8
	mov	ecx, DWORD PTR tv86[ebp]
	jmp	DWORD PTR $LN14@antlr3UTF8[ecx*4]
$LN7@antlr3UTF8:
; Line 1837
	mov	eax, DWORD PTR _nextChar$[ebp]
	movzx	ecx, BYTE PTR [eax]
	add	ecx, DWORD PTR _ch$[ebp]
	mov	DWORD PTR _ch$[ebp], ecx
	mov	edx, DWORD PTR _nextChar$[ebp]
	add	edx, 1
	mov	DWORD PTR _nextChar$[ebp], edx
	mov	eax, DWORD PTR _ch$[ebp]
	shl	eax, 6
	mov	DWORD PTR _ch$[ebp], eax
$LN6@antlr3UTF8:
; Line 1838
	mov	eax, DWORD PTR _nextChar$[ebp]
	movzx	ecx, BYTE PTR [eax]
	add	ecx, DWORD PTR _ch$[ebp]
	mov	DWORD PTR _ch$[ebp], ecx
	mov	edx, DWORD PTR _nextChar$[ebp]
	add	edx, 1
	mov	DWORD PTR _nextChar$[ebp], edx
	mov	eax, DWORD PTR _ch$[ebp]
	shl	eax, 6
	mov	DWORD PTR _ch$[ebp], eax
$LN5@antlr3UTF8:
; Line 1839
	mov	eax, DWORD PTR _nextChar$[ebp]
	movzx	ecx, BYTE PTR [eax]
	add	ecx, DWORD PTR _ch$[ebp]
	mov	DWORD PTR _ch$[ebp], ecx
	mov	edx, DWORD PTR _nextChar$[ebp]
	add	edx, 1
	mov	DWORD PTR _nextChar$[ebp], edx
	mov	eax, DWORD PTR _ch$[ebp]
	shl	eax, 6
	mov	DWORD PTR _ch$[ebp], eax
$LN4@antlr3UTF8:
; Line 1840
	mov	eax, DWORD PTR _nextChar$[ebp]
	movzx	ecx, BYTE PTR [eax]
	add	ecx, DWORD PTR _ch$[ebp]
	mov	DWORD PTR _ch$[ebp], ecx
	mov	edx, DWORD PTR _nextChar$[ebp]
	add	edx, 1
	mov	DWORD PTR _nextChar$[ebp], edx
	mov	eax, DWORD PTR _ch$[ebp]
	shl	eax, 6
	mov	DWORD PTR _ch$[ebp], eax
$LN3@antlr3UTF8:
; Line 1841
	mov	eax, DWORD PTR _nextChar$[ebp]
	movzx	ecx, BYTE PTR [eax]
	add	ecx, DWORD PTR _ch$[ebp]
	mov	DWORD PTR _ch$[ebp], ecx
	mov	edx, DWORD PTR _nextChar$[ebp]
	add	edx, 1
	mov	DWORD PTR _nextChar$[ebp], edx
	mov	eax, DWORD PTR _ch$[ebp]
	shl	eax, 6
	mov	DWORD PTR _ch$[ebp], eax
$LN2@antlr3UTF8:
; Line 1842
	mov	eax, DWORD PTR _nextChar$[ebp]
	movzx	ecx, BYTE PTR [eax]
	add	ecx, DWORD PTR _ch$[ebp]
	mov	DWORD PTR _ch$[ebp], ecx
	mov	edx, DWORD PTR _nextChar$[ebp]
	add	edx, 1
	mov	DWORD PTR _nextChar$[ebp], edx
$LN8@antlr3UTF8:
; Line 1847
	mov	eax, DWORD PTR _extraBytesToRead$[ebp]
	mov	ecx, DWORD PTR _ch$[ebp]
	sub	ecx, DWORD PTR _offsetsFromUTF8[eax*4]
	mov	DWORD PTR _ch$[ebp], ecx
; Line 1848
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR _ch$[ebp]
	cmp	ecx, DWORD PTR [eax+112]
	jne	SHORT $LN1@antlr3UTF8
; Line 1852
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	add	ecx, 1
	mov	edx, DWORD PTR _input$[ebp]
	mov	DWORD PTR [edx+28], ecx
; Line 1853
	mov	eax, DWORD PTR _input$[ebp]
	mov	DWORD PTR [eax+36], 0
; Line 1854
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR _nextChar$[ebp]
	mov	DWORD PTR [eax+32], ecx
$LN1@antlr3UTF8:
; Line 1859
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR _nextChar$[ebp]
	mov	DWORD PTR [eax+20], ecx
$LN12@antlr3UTF8:
; Line 1861
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN14@antlr3UTF8:
	DD	$LN2@antlr3UTF8
	DD	$LN3@antlr3UTF8
	DD	$LN4@antlr3UTF8
	DD	$LN5@antlr3UTF8
	DD	$LN6@antlr3UTF8
	DD	$LN7@antlr3UTF8
_antlr3UTF8Consume ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _antlr3UTF8LA
_TEXT	SEGMENT
tv133 = -244						; size = 4
tv86 = -244						; size = 4
_nextChar$ = -44					; size = 4
_ch$ = -32						; size = 4
_extraBytesToRead$ = -20				; size = 4
_input$ = -8						; size = 4
_is$ = 8						; size = 4
_la$ = 12						; size = 4
_antlr3UTF8LA PROC					; COMDAT
; Line 1871
	push	ebp
	mov	ebp, esp
	sub	esp, 244				; 000000f4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 61					; 0000003dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1877
	mov	eax, DWORD PTR _is$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _input$[ebp], ecx
; Line 1879
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _nextChar$[ebp], ecx
; Line 1887
	cmp	DWORD PTR _la$[ebp], 1
	jle	SHORT $LN13@antlr3UTF8@2
; Line 1892
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _input$[ebp]
	add	ecx, DWORD PTR [edx+24]
	cmp	DWORD PTR _nextChar$[ebp], ecx
	jae	SHORT $LN19@antlr3UTF8@2
$LN18@antlr3UTF8@2:
; Line 1896
	mov	eax, DWORD PTR _la$[ebp]
	sub	eax, 1
	mov	DWORD PTR _la$[ebp], eax
	cmp	DWORD PTR _la$[ebp], 0
	jle	SHORT $LN17@antlr3UTF8@2
; Line 1902
	mov	eax, DWORD PTR _nextChar$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _trailingBytesForUTF8[ecx*4]
	mov	eax, DWORD PTR _nextChar$[ebp]
	lea	ecx, DWORD PTR [eax+edx+1]
	mov	DWORD PTR _nextChar$[ebp], ecx
; Line 1906
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _input$[ebp]
	add	ecx, DWORD PTR [edx+24]
	cmp	DWORD PTR _nextChar$[ebp], ecx
	jb	SHORT $LN16@antlr3UTF8@2
; Line 1908
	or	eax, -1
	jmp	$LN21@antlr3UTF8@2
$LN16@antlr3UTF8@2:
; Line 1910
	jmp	SHORT $LN18@antlr3UTF8@2
$LN17@antlr3UTF8@2:
; Line 1912
	jmp	SHORT $LN15@antlr3UTF8@2
$LN19@antlr3UTF8@2:
; Line 1914
	or	eax, -1
	jmp	$LN21@antlr3UTF8@2
$LN15@antlr3UTF8@2:
; Line 1917
	jmp	SHORT $LN14@antlr3UTF8@2
$LN13@antlr3UTF8@2:
; Line 1921
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR _nextChar$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jbe	SHORT $LN14@antlr3UTF8@2
	mov	eax, DWORD PTR _la$[ebp]
	mov	ecx, DWORD PTR _la$[ebp]
	add	ecx, 1
	mov	DWORD PTR _la$[ebp], ecx
	test	eax, eax
	jge	SHORT $LN23@antlr3UTF8@2
	mov	DWORD PTR tv86[ebp], 1
	jmp	SHORT $LN24@antlr3UTF8@2
$LN23@antlr3UTF8@2:
	mov	DWORD PTR tv86[ebp], 0
$LN24@antlr3UTF8@2:
	cmp	DWORD PTR tv86[ebp], 0
	je	SHORT $LN14@antlr3UTF8@2
; Line 1929
	mov	eax, DWORD PTR _nextChar$[ebp]
	sub	eax, 1
	mov	DWORD PTR _nextChar$[ebp], eax
$LN11@antlr3UTF8@2:
; Line 1930
	mov	eax, DWORD PTR _nextChar$[ebp]
	movzx	ecx, BYTE PTR [eax]
	and	ecx, 192				; 000000c0H
	cmp	ecx, 128				; 00000080H
	jne	SHORT $LN10@antlr3UTF8@2
; Line 1932
	mov	eax, DWORD PTR _nextChar$[ebp]
	sub	eax, 1
	mov	DWORD PTR _nextChar$[ebp], eax
; Line 1933
	jmp	SHORT $LN11@antlr3UTF8@2
$LN10@antlr3UTF8@2:
; Line 1934
	jmp	SHORT $LN13@antlr3UTF8@2
$LN14@antlr3UTF8@2:
; Line 1942
	mov	eax, DWORD PTR _nextChar$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _trailingBytesForUTF8[ecx*4]
	mov	DWORD PTR _extraBytesToRead$[ebp], edx
; Line 1943
	mov	eax, DWORD PTR _nextChar$[ebp]
	add	eax, DWORD PTR _extraBytesToRead$[ebp]
	mov	ecx, DWORD PTR _input$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	ecx, DWORD PTR _input$[ebp]
	add	edx, DWORD PTR [ecx+24]
	cmp	eax, edx
	jb	SHORT $LN9@antlr3UTF8@2
; Line 1945
	or	eax, -1
	jmp	$LN21@antlr3UTF8@2
$LN9@antlr3UTF8@2:
; Line 1950
	mov	DWORD PTR _ch$[ebp], 0
; Line 1951
	mov	eax, DWORD PTR _extraBytesToRead$[ebp]
	mov	DWORD PTR tv133[ebp], eax
	cmp	DWORD PTR tv133[ebp], 5
	ja	$LN7@antlr3UTF8@2
	mov	ecx, DWORD PTR tv133[ebp]
	jmp	DWORD PTR $LN25@antlr3UTF8@2[ecx*4]
$LN6@antlr3UTF8@2:
; Line 1952
	mov	eax, DWORD PTR _nextChar$[ebp]
	movzx	ecx, BYTE PTR [eax]
	add	ecx, DWORD PTR _ch$[ebp]
	mov	DWORD PTR _ch$[ebp], ecx
	mov	edx, DWORD PTR _nextChar$[ebp]
	add	edx, 1
	mov	DWORD PTR _nextChar$[ebp], edx
	mov	eax, DWORD PTR _ch$[ebp]
	shl	eax, 6
	mov	DWORD PTR _ch$[ebp], eax
$LN5@antlr3UTF8@2:
; Line 1953
	mov	eax, DWORD PTR _nextChar$[ebp]
	movzx	ecx, BYTE PTR [eax]
	add	ecx, DWORD PTR _ch$[ebp]
	mov	DWORD PTR _ch$[ebp], ecx
	mov	edx, DWORD PTR _nextChar$[ebp]
	add	edx, 1
	mov	DWORD PTR _nextChar$[ebp], edx
	mov	eax, DWORD PTR _ch$[ebp]
	shl	eax, 6
	mov	DWORD PTR _ch$[ebp], eax
$LN4@antlr3UTF8@2:
; Line 1954
	mov	eax, DWORD PTR _nextChar$[ebp]
	movzx	ecx, BYTE PTR [eax]
	add	ecx, DWORD PTR _ch$[ebp]
	mov	DWORD PTR _ch$[ebp], ecx
	mov	edx, DWORD PTR _nextChar$[ebp]
	add	edx, 1
	mov	DWORD PTR _nextChar$[ebp], edx
	mov	eax, DWORD PTR _ch$[ebp]
	shl	eax, 6
	mov	DWORD PTR _ch$[ebp], eax
$LN3@antlr3UTF8@2:
; Line 1955
	mov	eax, DWORD PTR _nextChar$[ebp]
	movzx	ecx, BYTE PTR [eax]
	add	ecx, DWORD PTR _ch$[ebp]
	mov	DWORD PTR _ch$[ebp], ecx
	mov	edx, DWORD PTR _nextChar$[ebp]
	add	edx, 1
	mov	DWORD PTR _nextChar$[ebp], edx
	mov	eax, DWORD PTR _ch$[ebp]
	shl	eax, 6
	mov	DWORD PTR _ch$[ebp], eax
$LN2@antlr3UTF8@2:
; Line 1956
	mov	eax, DWORD PTR _nextChar$[ebp]
	movzx	ecx, BYTE PTR [eax]
	add	ecx, DWORD PTR _ch$[ebp]
	mov	DWORD PTR _ch$[ebp], ecx
	mov	edx, DWORD PTR _nextChar$[ebp]
	add	edx, 1
	mov	DWORD PTR _nextChar$[ebp], edx
	mov	eax, DWORD PTR _ch$[ebp]
	shl	eax, 6
	mov	DWORD PTR _ch$[ebp], eax
$LN1@antlr3UTF8@2:
; Line 1957
	mov	eax, DWORD PTR _nextChar$[ebp]
	movzx	ecx, BYTE PTR [eax]
	add	ecx, DWORD PTR _ch$[ebp]
	mov	DWORD PTR _ch$[ebp], ecx
	mov	edx, DWORD PTR _nextChar$[ebp]
	add	edx, 1
	mov	DWORD PTR _nextChar$[ebp], edx
$LN7@antlr3UTF8@2:
; Line 1962
	mov	eax, DWORD PTR _extraBytesToRead$[ebp]
	mov	ecx, DWORD PTR _ch$[ebp]
	sub	ecx, DWORD PTR _offsetsFromUTF8[eax*4]
	mov	DWORD PTR _ch$[ebp], ecx
; Line 1964
	mov	eax, DWORD PTR _ch$[ebp]
$LN21@antlr3UTF8@2:
; Line 1965
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN25@antlr3UTF8@2:
	DD	$LN1@antlr3UTF8@2
	DD	$LN2@antlr3UTF8@2
	DD	$LN3@antlr3UTF8@2
	DD	$LN4@antlr3UTF8@2
	DD	$LN5@antlr3UTF8@2
	DD	$LN6@antlr3UTF8@2
_antlr3UTF8LA ENDP
_TEXT	ENDS
PUBLIC	_antlr3EBCDICSetupStream
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _antlr3EBCDICSetupStream
_TEXT	SEGMENT
_input$ = 8						; size = 4
_antlr3EBCDICSetupStream PROC				; COMDAT
; Line 2014
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2017
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR [eax+120]
	push	ecx
	call	_antlr3StringFactoryNew
	add	esp, 4
	mov	edx, DWORD PTR _input$[ebp]
	mov	DWORD PTR [edx+16], eax
; Line 2021
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [ecx+24], OFFSET _antlr3EBCDICLA
; Line 2022
	mov	eax, DWORD PTR _input$[ebp]
	mov	BYTE PTR [eax+116], 1
; Line 2023
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_antlr3EBCDICSetupStream ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _antlr3EBCDICLA
_TEXT	SEGMENT
_input$ = -8						; size = 4
_is$ = 8						; size = 4
_la$ = 12						; size = 4
_antlr3EBCDICLA PROC					; COMDAT
; Line 2035
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2038
	mov	eax, DWORD PTR _is$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _input$[ebp], ecx
; Line 2040
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _la$[ebp]
	lea	eax, DWORD PTR [ecx+edx-1]
	mov	ecx, DWORD PTR _input$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	ecx, DWORD PTR _input$[ebp]
	add	edx, DWORD PTR [ecx+24]
	cmp	eax, edx
	jb	SHORT $LN2@antlr3EBCD
; Line 2042
	or	eax, -1
	jmp	SHORT $LN3@antlr3EBCD
; Line 2044
	jmp	SHORT $LN3@antlr3EBCD
$LN2@antlr3EBCD:
; Line 2048
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _la$[ebp]
	movzx	eax, BYTE PTR [ecx+edx-1]
	mov	eax, DWORD PTR _e2a[eax*4]
$LN3@antlr3EBCD:
; Line 2050
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_antlr3EBCDICLA ENDP
_TEXT	ENDS
END
