; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\Users\Ken\Documents\GitHub\spengine\Antlr\antlr3baserecognizer.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_antlr3MTExceptionNew
PUBLIC	_antlr3BaseRecognizerNew
EXTRN	_antlr3VectorNew:PROC
EXTRN	__imp__free:PROC
EXTRN	__imp__calloc:PROC
EXTRN	__imp__malloc:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\users\ken\documents\github\spengine\antlr\antlr3baserecognizer.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT _antlr3BaseRecognizerNew
_TEXT	SEGMENT
_recognizer$ = -8					; size = 4
_type$ = 8						; size = 4
_sizeHint$ = 12						; size = 4
_state$ = 16						; size = 4
_antlr3BaseRecognizerNew PROC				; COMDAT
; Line 85
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 90
	mov	esi, esp
	push	148					; 00000094H
	call	DWORD PTR __imp__malloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _recognizer$[ebp], eax
; Line 92
	cmp	DWORD PTR _recognizer$[ebp], 0
	jne	SHORT $LN5@antlr3Base
; Line 96
	xor	eax, eax
	jmp	$LN6@antlr3Base
$LN5@antlr3Base:
; Line 103
	cmp	DWORD PTR _state$[ebp], 0
	jne	$LN4@antlr3Base
; Line 105
	mov	esi, esp
	push	108					; 0000006cH
	push	1
	call	DWORD PTR __imp__calloc
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _recognizer$[ebp]
	mov	DWORD PTR [ecx+8], eax
; Line 107
	mov	eax, DWORD PTR _recognizer$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN3@antlr3Base
; Line 109
	mov	esi, esp
	mov	eax, DWORD PTR _recognizer$[ebp]
	push	eax
	call	DWORD PTR __imp__free
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 110
	xor	eax, eax
	jmp	$LN6@antlr3Base
$LN3@antlr3Base:
; Line 115
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	BYTE PTR [ecx+16], 0
; Line 116
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+20], -1
; Line 117
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	BYTE PTR [ecx+24], 0
; Line 118
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+28], 0
; Line 119
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+32], 0
; Line 120
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+12], 0
; Line 121
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+36], 0
; Line 122
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+40], 0
; Line 123
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _sizeHint$[ebp]
	mov	DWORD PTR [ecx+8], edx
; Line 124
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+56], 0
; Line 125
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+52], 0
; Line 132
	push	0
	call	_antlr3VectorNew
	add	esp, 4
	mov	ecx, DWORD PTR _recognizer$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+104], eax
; Line 134
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	cmp	DWORD PTR [ecx+104], 0
	jne	SHORT $LN2@antlr3Base
; Line 138
	mov	esi, esp
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	DWORD PTR __imp__free
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 139
	mov	esi, esp
	mov	eax, DWORD PTR _recognizer$[ebp]
	push	eax
	call	DWORD PTR __imp__free
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 140
	xor	eax, eax
	jmp	$LN6@antlr3Base
$LN2@antlr3Base:
; Line 143
	jmp	SHORT $LN1@antlr3Base
$LN4@antlr3Base:
; Line 149
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN1@antlr3Base:
; Line 154
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	DWORD PTR [eax+116], OFFSET _alreadyParsedRule
; Line 155
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	DWORD PTR [eax+52], OFFSET _beginResync
; Line 156
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	DWORD PTR [eax+76], OFFSET _combineFollows
; Line 157
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	DWORD PTR [eax+60], OFFSET _beginBacktrack
; Line 158
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	DWORD PTR [eax+64], OFFSET _endBacktrack
; Line 159
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	DWORD PTR [eax+72], OFFSET _computeCSRuleFollow
; Line 160
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	DWORD PTR [eax+68], OFFSET _computeErrorRecoverySet
; Line 161
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	DWORD PTR [eax+92], OFFSET _consumeUntil
; Line 162
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	DWORD PTR [eax+96], OFFSET _consumeUntilSet
; Line 163
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	DWORD PTR [eax+40], OFFSET _displayRecognitionError
; Line 164
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	DWORD PTR [eax+56], OFFSET _endResync
; Line 165
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	DWORD PTR [eax+136], OFFSET _antlr3MTExceptionNew
; Line 166
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	DWORD PTR [eax+100], OFFSET _getRuleInvocationStack
; Line 167
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	DWORD PTR [eax+104], OFFSET _getRuleInvocationStackNamed
; Line 168
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	DWORD PTR [eax+112], OFFSET _getRuleMemoization
; Line 169
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	DWORD PTR [eax+16], OFFSET _match
; Line 170
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	DWORD PTR [eax+20], OFFSET _matchAny
; Line 171
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	DWORD PTR [eax+120], OFFSET _memoize
; Line 172
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	DWORD PTR [eax+32], OFFSET _mismatch
; Line 173
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	DWORD PTR [eax+24], OFFSET _mismatchIsUnwantedToken
; Line 174
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	DWORD PTR [eax+28], OFFSET _mismatchIsMissingToken
; Line 175
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	DWORD PTR [eax+48], OFFSET _recover
; Line 176
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	DWORD PTR [eax+88], OFFSET _recoverFromMismatchedElement
; Line 177
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	DWORD PTR [eax+84], OFFSET _recoverFromMismatchedSet
; Line 178
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	DWORD PTR [eax+80], OFFSET _recoverFromMismatchedToken
; Line 179
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	DWORD PTR [eax+44], OFFSET _getNumberOfSyntaxErrors
; Line 180
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	DWORD PTR [eax+36], OFFSET _reportError
; Line 181
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	DWORD PTR [eax+140], OFFSET _reset
; Line 182
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	DWORD PTR [eax+132], OFFSET _synpred
; Line 183
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	DWORD PTR [eax+108], OFFSET _toStrings
; Line 184
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	DWORD PTR [eax+124], OFFSET _getCurrentInputSymbol
; Line 185
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	DWORD PTR [eax+128], OFFSET _getMissingSymbol
; Line 186
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	DWORD PTR [eax+12], 0
; Line 188
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	DWORD PTR [eax+144], OFFSET _freeBR
; Line 192
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	ecx, DWORD PTR _type$[ebp]
	mov	DWORD PTR [eax+4], ecx
; Line 195
	mov	eax, DWORD PTR _recognizer$[ebp]
$LN6@antlr3Base:
; Line 196
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_antlr3BaseRecognizerNew ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _freeBR
_TEXT	SEGMENT
_thisE$ = -8						; size = 4
_recognizer$ = 8					; size = 4
_freeBR	PROC						; COMDAT
; Line 199
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 204
	mov	eax, DWORD PTR _recognizer$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	$LN5@freeBR
; Line 208
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	cmp	DWORD PTR [ecx+36], 0
	je	SHORT $LN4@freeBR
; Line 210
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	esi, esp
	mov	edx, DWORD PTR [ecx+36]
	push	edx
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+36]
	mov	eax, DWORD PTR [edx+28]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 211
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+36], 0
$LN4@freeBR:
; Line 216
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _thisE$[ebp], edx
; Line 217
	cmp	DWORD PTR _thisE$[ebp], 0
	je	SHORT $LN3@freeBR
; Line 219
	mov	esi, esp
	mov	eax, DWORD PTR _thisE$[ebp]
	push	eax
	mov	ecx, DWORD PTR _thisE$[ebp]
	mov	edx, DWORD PTR [ecx+84]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@freeBR:
; Line 224
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	cmp	DWORD PTR [ecx+104], 0
	je	SHORT $LN2@freeBR
; Line 226
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	esi, esp
	mov	edx, DWORD PTR [ecx+104]
	push	edx
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+104]
	mov	eax, DWORD PTR [edx+144]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@freeBR:
; Line 231
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	cmp	DWORD PTR [ecx+52], 0
	je	SHORT $LN1@freeBR
; Line 233
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	esi, esp
	mov	edx, DWORD PTR [ecx+52]
	push	edx
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+52]
	mov	eax, DWORD PTR [edx+176]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@freeBR:
; Line 237
	mov	esi, esp
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	DWORD PTR __imp__free
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN5@freeBR:
; Line 242
	mov	esi, esp
	mov	eax, DWORD PTR _recognizer$[ebp]
	push	eax
	call	DWORD PTR __imp__free
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 243
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_freeBR	ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CL@GOBGIMMF@org?4antlr?4runtime?4MismatchedToke@ ; `string'
PUBLIC	_antlr3RecognitionExceptionNew
;	COMDAT ??_C@_0CL@GOBGIMMF@org?4antlr?4runtime?4MismatchedToke@
CONST	SEGMENT
??_C@_0CL@GOBGIMMF@org?4antlr?4runtime?4MismatchedToke@ DB 'org.antlr.run'
	DB	'time.MismatchedTokenException', 00H		; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT _antlr3MTExceptionNew
_TEXT	SEGMENT
_recognizer$ = 8					; size = 4
_antlr3MTExceptionNew PROC				; COMDAT
; Line 255
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 258
	mov	eax, DWORD PTR _recognizer$[ebp]
	push	eax
	call	_antlr3RecognitionExceptionNew
	add	esp, 4
; Line 262
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], OFFSET ??_C@_0CL@GOBGIMMF@org?4antlr?4runtime?4MismatchedToke@
; Line 263
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx], 2
; Line 266
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_antlr3MTExceptionNew ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BA@IGJLDFLP@Unexpected?5node?$AA@	; `string'
PUBLIC	??_C@_0BB@DHPGECBL@?9unknown?5source?9?$AA@	; `string'
PUBLIC	??_C@_0BB@FKAIECKK@Unexpected?5token?$AA@	; `string'
PUBLIC	??_C@_0BF@BIIJEBMB@Unexpected?5character?$AA@	; `string'
PUBLIC	??_C@_0CH@CEOAHODC@org?4antlr?4runtime?4RecognitionExc@ ; `string'
PUBLIC	??_C@_0HL@JIGEPJEO@Base?5recognizer?5function?5antlr3R@ ; `string'
EXTRN	_antlr3ExceptionNew:PROC
EXTRN	__imp__fprintf:PROC
EXTRN	__imp____iob_func:PROC
;	COMDAT ??_C@_0BA@IGJLDFLP@Unexpected?5node?$AA@
CONST	SEGMENT
??_C@_0BA@IGJLDFLP@Unexpected?5node?$AA@ DB 'Unexpected node', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@DHPGECBL@?9unknown?5source?9?$AA@
CONST	SEGMENT
??_C@_0BB@DHPGECBL@?9unknown?5source?9?$AA@ DB '-unknown source-', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@FKAIECKK@Unexpected?5token?$AA@
CONST	SEGMENT
??_C@_0BB@FKAIECKK@Unexpected?5token?$AA@ DB 'Unexpected token', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@BIIJEBMB@Unexpected?5character?$AA@
CONST	SEGMENT
??_C@_0BF@BIIJEBMB@Unexpected?5character?$AA@ DB 'Unexpected character', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@CEOAHODC@org?4antlr?4runtime?4RecognitionExc@
CONST	SEGMENT
??_C@_0CH@CEOAHODC@org?4antlr?4runtime?4RecognitionExc@ DB 'org.antlr.run'
	DB	'time.RecognitionException', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0HL@JIGEPJEO@Base?5recognizer?5function?5antlr3R@
CONST	SEGMENT
??_C@_0HL@JIGEPJEO@Base?5recognizer?5function?5antlr3R@ DB 'Base recogniz'
	DB	'er function antlr3RecognitionExceptionNew called by unknown p'
	DB	'arser type - provide override for this function', 0aH, 00H ; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT _antlr3RecognitionExceptionNew
_TEXT	SEGMENT
tv87 = -304						; size = 4
tv65 = -304						; size = 4
_tnode$36149 = -104					; size = 4
_tns$ = -92						; size = 4
_cts$ = -80						; size = 4
_is$ = -68						; size = 4
_ins$ = -56						; size = 4
_tparser$ = -44						; size = 4
_parser$ = -32						; size = 4
_lexer$ = -20						; size = 4
_ex$ = -8						; size = 4
_recognizer$ = 8					; size = 4
_antlr3RecognitionExceptionNew PROC			; COMDAT
; Line 270
	push	ebp
	mov	ebp, esp
	sub	esp, 304				; 00000130H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-304]
	mov	ecx, 76					; 0000004cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 281
	mov	DWORD PTR _ins$[ebp], 0
; Line 282
	mov	DWORD PTR _cts$[ebp], 0
; Line 283
	mov	DWORD PTR _tns$[ebp], 0
; Line 284
	mov	DWORD PTR _is$[ebp], 0
; Line 285
	mov	DWORD PTR _lexer$[ebp], 0
; Line 286
	mov	DWORD PTR _parser$[ebp], 0
; Line 287
	mov	DWORD PTR _tparser$[ebp], 0
; Line 289
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR tv65[ebp], ecx
	cmp	DWORD PTR tv65[ebp], 1
	je	SHORT $LN15@antlr3Reco
	cmp	DWORD PTR tv65[ebp], 2
	je	SHORT $LN14@antlr3Reco
	cmp	DWORD PTR tv65[ebp], 4
	je	SHORT $LN13@antlr3Reco
	jmp	SHORT $LN12@antlr3Reco
$LN15@antlr3Reco:
; Line 293
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _lexer$[ebp], ecx
; Line 294
	mov	eax, DWORD PTR _lexer$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _ins$[ebp], ecx
; Line 295
	mov	eax, DWORD PTR _ins$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _is$[ebp], ecx
; Line 297
	jmp	SHORT $LN16@antlr3Reco
$LN14@antlr3Reco:
; Line 301
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _parser$[ebp], ecx
; Line 302
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _cts$[ebp], edx
; Line 303
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _is$[ebp], edx
; Line 305
	jmp	SHORT $LN16@antlr3Reco
$LN13@antlr3Reco:
; Line 309
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _tparser$[ebp], ecx
; Line 310
	mov	eax, DWORD PTR _tparser$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _tns$[ebp], edx
; Line 311
	mov	eax, DWORD PTR _tns$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _is$[ebp], ecx
; Line 313
	jmp	SHORT $LN16@antlr3Reco
$LN12@antlr3Reco:
; Line 317
	mov	esi, esp
	push	OFFSET ??_C@_0HL@JIGEPJEO@Base?5recognizer?5function?5antlr3R@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 318
	jmp	$LN18@antlr3Reco
$LN16@antlr3Reco:
; Line 328
	push	0
	push	0
	push	OFFSET ??_C@_0CH@CEOAHODC@org?4antlr?4runtime?4RecognitionExc@
	push	1
	call	_antlr3ExceptionNew
	add	esp, 16					; 00000010H
	mov	DWORD PTR _ex$[ebp], eax
; Line 333
	mov	eax, DWORD PTR _is$[ebp]
	mov	ecx, DWORD PTR [eax]
	and	ecx, 7
	mov	DWORD PTR tv87[ebp], ecx
	cmp	DWORD PTR tv87[ebp], 1
	je	SHORT $LN9@antlr3Reco
	cmp	DWORD PTR tv87[ebp], 2
	je	$LN8@antlr3Reco
	cmp	DWORD PTR tv87[ebp], 4
	je	$LN5@antlr3Reco
	jmp	$LN10@antlr3Reco
$LN9@antlr3Reco:
; Line 337
	mov	esi, esp
	push	1
	mov	eax, DWORD PTR _is$[ebp]
	push	eax
	mov	ecx, DWORD PTR _is$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _ex$[ebp]
	mov	DWORD PTR [ecx+40], eax
; Line 338
	mov	esi, esp
	mov	eax, DWORD PTR _ins$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ins$[ebp]
	mov	edx, DWORD PTR [ecx+88]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _ex$[ebp]
	mov	DWORD PTR [ecx+44], eax
; Line 339
	mov	esi, esp
	mov	eax, DWORD PTR _ins$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ins$[ebp]
	mov	edx, DWORD PTR [ecx+96]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _ex$[ebp]
	mov	DWORD PTR [ecx+48], eax
; Line 340
	mov	esi, esp
	mov	eax, DWORD PTR _is$[ebp]
	push	eax
	mov	ecx, DWORD PTR _is$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _ex$[ebp]
	mov	DWORD PTR [ecx+20], eax
; Line 341
	mov	eax, DWORD PTR _ex$[ebp]
	mov	ecx, DWORD PTR _ins$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	mov	DWORD PTR [eax+12], edx
; Line 342
	mov	eax, DWORD PTR _ex$[ebp]
	mov	DWORD PTR [eax+8], OFFSET ??_C@_0BF@BIIJEBMB@Unexpected?5character?$AA@
; Line 343
	jmp	$LN10@antlr3Reco
$LN8@antlr3Reco:
; Line 347
	mov	esi, esp
	push	1
	mov	eax, DWORD PTR _cts$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _cts$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	edx, DWORD PTR _ex$[ebp]
	mov	DWORD PTR [edx+24], eax
; Line 348
	mov	esi, esp
	mov	eax, DWORD PTR _ex$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	mov	edx, DWORD PTR _ex$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	ecx, DWORD PTR [eax+92]
	call	ecx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	edx, DWORD PTR _ex$[ebp]
	mov	DWORD PTR [edx+44], eax
; Line 349
	mov	esi, esp
	mov	eax, DWORD PTR _ex$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	mov	edx, DWORD PTR _ex$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	ecx, DWORD PTR [eax+100]
	call	ecx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	edx, DWORD PTR _ex$[ebp]
	mov	DWORD PTR [edx+48], eax
; Line 350
	mov	eax, DWORD PTR _cts$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _cts$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [edx+32]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _ex$[ebp]
	mov	DWORD PTR [ecx+20], eax
; Line 351
	mov	eax, DWORD PTR _ex$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	cmp	DWORD PTR [ecx], -1
	jne	SHORT $LN7@antlr3Reco
; Line 353
	mov	eax, DWORD PTR _ex$[ebp]
	mov	DWORD PTR [eax+12], 0
; Line 355
	jmp	SHORT $LN6@antlr3Reco
$LN7@antlr3Reco:
; Line 357
	mov	eax, DWORD PTR _ex$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR _ex$[ebp]
	mov	ecx, DWORD PTR [edx+48]
	mov	DWORD PTR [eax+12], ecx
$LN6@antlr3Reco:
; Line 359
	mov	eax, DWORD PTR _ex$[ebp]
	mov	DWORD PTR [eax+8], OFFSET ??_C@_0BB@FKAIECKK@Unexpected?5token?$AA@
; Line 360
	jmp	$LN10@antlr3Reco
$LN5@antlr3Reco:
; Line 364
	mov	esi, esp
	push	1
	mov	eax, DWORD PTR _tns$[ebp]
	push	eax
	mov	ecx, DWORD PTR _tns$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _ex$[ebp]
	mov	DWORD PTR [ecx+24], eax
; Line 365
	mov	esi, esp
	mov	eax, DWORD PTR _ex$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	mov	edx, DWORD PTR _ex$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	ecx, DWORD PTR [eax+88]
	call	ecx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	edx, DWORD PTR _ex$[ebp]
	mov	DWORD PTR [edx+44], eax
; Line 366
	mov	esi, esp
	mov	eax, DWORD PTR _ex$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	mov	edx, DWORD PTR _ex$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	ecx, DWORD PTR [eax+52]
	call	ecx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	edx, DWORD PTR _ex$[ebp]
	mov	DWORD PTR [edx+48], eax
; Line 367
	mov	esi, esp
	mov	eax, DWORD PTR _tns$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _tns$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [eax+32]
	call	ecx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	edx, DWORD PTR _ex$[ebp]
	mov	DWORD PTR [edx+20], eax
; Line 374
	mov	eax, DWORD PTR _ex$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _tnode$36149[ebp], edx
; Line 376
	mov	eax, DWORD PTR _tnode$36149[ebp]
	cmp	DWORD PTR [eax+12], 0
	jne	SHORT $LN4@antlr3Reco
; Line 378
	mov	esi, esp
	push	OFFSET ??_C@_0BB@DHPGECBL@?9unknown?5source?9?$AA@
	mov	eax, DWORD PTR _ex$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR _ex$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _ex$[ebp]
	mov	DWORD PTR [ecx+12], eax
; Line 380
	jmp	SHORT $LN3@antlr3Reco
$LN4@antlr3Reco:
; Line 382
	mov	eax, DWORD PTR _tnode$36149[ebp]
	mov	ecx, DWORD PTR [eax+12]
	cmp	DWORD PTR [ecx+28], 0
	jne	SHORT $LN2@antlr3Reco
; Line 384
	mov	eax, DWORD PTR _ex$[ebp]
	mov	DWORD PTR [eax+12], 0
; Line 386
	jmp	SHORT $LN3@antlr3Reco
$LN2@antlr3Reco:
; Line 388
	mov	eax, DWORD PTR _tnode$36149[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR _ex$[ebp]
	mov	ecx, DWORD PTR [edx+48]
	mov	DWORD PTR [eax+12], ecx
$LN3@antlr3Reco:
; Line 391
	mov	eax, DWORD PTR _ex$[ebp]
	mov	DWORD PTR [eax+8], OFFSET ??_C@_0BA@IGJLDFLP@Unexpected?5node?$AA@
$LN10@antlr3Reco:
; Line 396
	mov	eax, DWORD PTR _ex$[ebp]
	mov	ecx, DWORD PTR _is$[ebp]
	mov	DWORD PTR [eax+68], ecx
; Line 397
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _ex$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+64], eax
; Line 398
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _ex$[ebp]
	mov	DWORD PTR [ecx+4], edx
; Line 399
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	BYTE PTR [ecx], 1
$LN18@antlr3Reco:
; Line 402
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 304				; 00000130H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_antlr3RecognitionExceptionNew ENDP
_TEXT	ENDS
PUBLIC	??_C@_0GF@OHPBBBJJ@Base?5recognizer?5function?5?8match?8@ ; `string'
;	COMDAT ??_C@_0GF@OHPBBBJJ@Base?5recognizer?5function?5?8match?8@
CONST	SEGMENT
??_C@_0GF@OHPBBBJJ@Base?5recognizer?5function?5?8match?8@ DB 'Base recogn'
	DB	'izer function ''match'' called by unknown parser type - provi'
	DB	'de override for this function', 0aH, 00H	; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT _match
_TEXT	SEGMENT
tv65 = -244						; size = 4
_matchedSymbol$ = -44					; size = 4
_is$ = -32						; size = 4
_tparser$ = -20						; size = 4
_parser$ = -8						; size = 4
_recognizer$ = 8					; size = 4
_ttype$ = 12						; size = 4
_follow$ = 16						; size = 4
_match	PROC						; COMDAT
; Line 417
	push	ebp
	mov	ebp, esp
	sub	esp, 244				; 000000f4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 61					; 0000003dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 423
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR tv65[ebp], ecx
	cmp	DWORD PTR tv65[ebp], 2
	je	SHORT $LN5@match
	cmp	DWORD PTR tv65[ebp], 4
	je	SHORT $LN4@match
	jmp	SHORT $LN3@match
$LN5@match:
; Line 427
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _parser$[ebp], ecx
; Line 428
	mov	DWORD PTR _tparser$[ebp], 0
; Line 429
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _is$[ebp], edx
; Line 431
	jmp	SHORT $LN6@match
$LN4@match:
; Line 435
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _tparser$[ebp], ecx
; Line 436
	mov	DWORD PTR _parser$[ebp], 0
; Line 437
	mov	eax, DWORD PTR _tparser$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _is$[ebp], eax
; Line 439
	jmp	SHORT $LN6@match
$LN3@match:
; Line 443
	mov	esi, esp
	push	OFFSET ??_C@_0GF@OHPBBBJJ@Base?5recognizer?5function?5?8match?8@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 444
	xor	eax, eax
	jmp	$LN8@match
$LN6@match:
; Line 451
	mov	esi, esp
	mov	eax, DWORD PTR _is$[ebp]
	push	eax
	mov	ecx, DWORD PTR _recognizer$[ebp]
	push	ecx
	mov	edx, DWORD PTR _recognizer$[ebp]
	mov	eax, DWORD PTR [edx+124]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _matchedSymbol$[ebp], eax
; Line 453
	mov	esi, esp
	push	1
	mov	eax, DWORD PTR _is$[ebp]
	push	eax
	mov	ecx, DWORD PTR _is$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, DWORD PTR _ttype$[ebp]
	jne	SHORT $LN2@match
; Line 457
	mov	esi, esp
	mov	eax, DWORD PTR _is$[ebp]
	push	eax
	mov	ecx, DWORD PTR _is$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 458
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	BYTE PTR [ecx+16], 0
; Line 459
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	BYTE PTR [ecx+24], 0
; Line 460
	mov	eax, DWORD PTR _matchedSymbol$[ebp]
	jmp	SHORT $LN8@match
$LN2@match:
; Line 466
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	cmp	DWORD PTR [ecx+32], 0
	jle	SHORT $LN1@match
; Line 470
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	BYTE PTR [ecx+24], 1
; Line 471
	mov	eax, DWORD PTR _matchedSymbol$[ebp]
	jmp	SHORT $LN8@match
$LN1@match:
; Line 478
	mov	esi, esp
	mov	eax, DWORD PTR _follow$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ttype$[ebp]
	push	ecx
	mov	edx, DWORD PTR _recognizer$[ebp]
	push	edx
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	ecx, DWORD PTR [eax+80]
	call	ecx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _matchedSymbol$[ebp], eax
; Line 479
	mov	eax, DWORD PTR _matchedSymbol$[ebp]
$LN8@match:
; Line 480
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_match	ENDP
_TEXT	ENDS
PUBLIC	??_C@_0GI@PFDGGJHE@Base?5recognizer?5function?5?8matchA@ ; `string'
;	COMDAT ??_C@_0GI@PFDGGJHE@Base?5recognizer?5function?5?8matchA@
CONST	SEGMENT
??_C@_0GI@PFDGGJHE@Base?5recognizer?5function?5?8matchA@ DB 'Base recogni'
	DB	'zer function ''matchAny'' called by unknown parser type - pro'
	DB	'vide override for this function', 0aH, 00H	; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT _matchAny
_TEXT	SEGMENT
tv65 = -232						; size = 4
_is$ = -32						; size = 4
_tparser$ = -20						; size = 4
_parser$ = -8						; size = 4
_recognizer$ = 8					; size = 4
_matchAny PROC						; COMDAT
; Line 490
	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 495
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR tv65[ebp], ecx
	cmp	DWORD PTR tv65[ebp], 2
	je	SHORT $LN3@matchAny
	cmp	DWORD PTR tv65[ebp], 4
	je	SHORT $LN2@matchAny
	jmp	SHORT $LN1@matchAny
$LN3@matchAny:
; Line 499
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _parser$[ebp], ecx
; Line 500
	mov	DWORD PTR _tparser$[ebp], 0
; Line 501
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _is$[ebp], edx
; Line 503
	jmp	SHORT $LN4@matchAny
$LN2@matchAny:
; Line 507
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _tparser$[ebp], ecx
; Line 508
	mov	DWORD PTR _parser$[ebp], 0
; Line 509
	mov	eax, DWORD PTR _tparser$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _is$[ebp], eax
; Line 511
	jmp	SHORT $LN4@matchAny
$LN1@matchAny:
; Line 515
	mov	esi, esp
	push	OFFSET ??_C@_0GI@PFDGGJHE@Base?5recognizer?5function?5?8matchA@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 516
	jmp	SHORT $LN6@matchAny
$LN4@matchAny:
; Line 520
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	BYTE PTR [ecx+16], 0
; Line 521
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	BYTE PTR [ecx+24], 0
; Line 522
	mov	esi, esp
	mov	eax, DWORD PTR _is$[ebp]
	push	eax
	mov	ecx, DWORD PTR _is$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN6@matchAny:
; Line 525
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 232				; 000000e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_matchAny ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _mismatchIsUnwantedToken
_TEXT	SEGMENT
_nextt$ = -8						; size = 4
_recognizer$ = 8					; size = 4
_is$ = 12						; size = 4
_ttype$ = 16						; size = 4
_mismatchIsUnwantedToken PROC				; COMDAT
; Line 530
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 533
	mov	esi, esp
	push	2
	mov	eax, DWORD PTR _is$[ebp]
	push	eax
	mov	ecx, DWORD PTR _is$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _nextt$[ebp], eax
; Line 535
	mov	eax, DWORD PTR _nextt$[ebp]
	cmp	eax, DWORD PTR _ttype$[ebp]
	jne	SHORT $LN3@mismatchIs
; Line 537
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	cmp	DWORD PTR [ecx+4], 0
	je	SHORT $LN2@mismatchIs
; Line 539
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _nextt$[ebp]
	mov	DWORD PTR [edx+28], eax
$LN2@mismatchIs:
; Line 541
	mov	al, 1
	jmp	SHORT $LN4@mismatchIs
; Line 543
	jmp	SHORT $LN4@mismatchIs
$LN3@mismatchIs:
; Line 545
	xor	al, al
$LN4@mismatchIs:
; Line 547
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_mismatchIsUnwantedToken ENDP
_TEXT	ENDS
EXTRN	_antlr3BitsetLoad:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _mismatchIsMissingToken
_TEXT	SEGMENT
_viableTokensFollowingThisRule$ = -32			; size = 4
_followClone$ = -20					; size = 4
_retcode$ = -5						; size = 1
_recognizer$ = 8					; size = 4
_is$ = 12						; size = 4
_follow$ = 16						; size = 4
_mismatchIsMissingToken PROC				; COMDAT
; Line 553
	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 558
	cmp	DWORD PTR _follow$[ebp], 0
	jne	SHORT $LN9@mismatchIs@2
; Line 565
	xor	al, al
	jmp	$LN10@mismatchIs@2
$LN9@mismatchIs@2:
; Line 568
	mov	DWORD PTR _followClone$[ebp], 0
; Line 569
	mov	DWORD PTR _viableTokensFollowingThisRule$[ebp], 0
; Line 576
	mov	eax, DWORD PTR _follow$[ebp]
	push	eax
	call	_antlr3BitsetLoad
	add	esp, 4
	mov	DWORD PTR _followClone$[ebp], eax
; Line 577
	cmp	DWORD PTR _followClone$[ebp], 0
	jne	SHORT $LN8@mismatchIs@2
; Line 579
	xor	al, al
	jmp	$LN10@mismatchIs@2
$LN8@mismatchIs@2:
; Line 584
	mov	esi, esp
	push	1
	mov	eax, DWORD PTR _followClone$[ebp]
	push	eax
	mov	ecx, DWORD PTR _followClone$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN7@mismatchIs@2
; Line 589
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx]
	cmp	DWORD PTR [eax+4], 0
	jb	SHORT $LN6@mismatchIs@2
; Line 591
	mov	esi, esp
	push	1
	mov	eax, DWORD PTR _followClone$[ebp]
	push	eax
	mov	ecx, DWORD PTR _followClone$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN6@mismatchIs@2:
; Line 597
	mov	esi, esp
	mov	eax, DWORD PTR _recognizer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _recognizer$[ebp]
	mov	edx, DWORD PTR [ecx+72]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _viableTokensFollowingThisRule$[ebp], eax
; Line 598
	mov	esi, esp
	mov	eax, DWORD PTR _viableTokensFollowingThisRule$[ebp]
	push	eax
	mov	ecx, DWORD PTR _followClone$[ebp]
	push	ecx
	mov	edx, DWORD PTR _followClone$[ebp]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN7@mismatchIs@2:
; Line 611
	mov	esi, esp
	push	1
	mov	eax, DWORD PTR _is$[ebp]
	push	eax
	mov	ecx, DWORD PTR _is$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	eax
	mov	eax, DWORD PTR _followClone$[ebp]
	push	eax
	mov	ecx, DWORD PTR _followClone$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN4@mismatchIs@2
	mov	esi, esp
	push	1
	mov	eax, DWORD PTR _followClone$[ebp]
	push	eax
	mov	ecx, DWORD PTR _followClone$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN5@mismatchIs@2
$LN4@mismatchIs@2:
; Line 613
	mov	BYTE PTR _retcode$[ebp], 1
; Line 615
	jmp	SHORT $LN3@mismatchIs@2
$LN5@mismatchIs@2:
; Line 617
	mov	BYTE PTR _retcode$[ebp], 0
$LN3@mismatchIs@2:
; Line 620
	cmp	DWORD PTR _viableTokensFollowingThisRule$[ebp], 0
	je	SHORT $LN2@mismatchIs@2
; Line 622
	mov	esi, esp
	mov	eax, DWORD PTR _viableTokensFollowingThisRule$[ebp]
	push	eax
	mov	ecx, DWORD PTR _viableTokensFollowingThisRule$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@mismatchIs@2:
; Line 624
	cmp	DWORD PTR _followClone$[ebp], 0
	je	SHORT $LN1@mismatchIs@2
; Line 626
	mov	esi, esp
	mov	eax, DWORD PTR _followClone$[ebp]
	push	eax
	mov	ecx, DWORD PTR _followClone$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@mismatchIs@2:
; Line 629
	mov	al, BYTE PTR _retcode$[ebp]
$LN10@mismatchIs@2:
; Line 631
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_mismatchIsMissingToken ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CI@FIMBDEFG@org?4antlr?4runtime?4MissingTokenEx@ ; `string'
PUBLIC	??_C@_0CJ@DEJOPFAB@org?4antlr?4runtime?4UnwantedTokenE@ ; `string'
PUBLIC	??_C@_0GI@PGJHCPC@Base?5recognizer?5function?5?8mismat@ ; `string'
;	COMDAT ??_C@_0CI@FIMBDEFG@org?4antlr?4runtime?4MissingTokenEx@
CONST	SEGMENT
??_C@_0CI@FIMBDEFG@org?4antlr?4runtime?4MissingTokenEx@ DB 'org.antlr.run'
	DB	'time.MissingTokenException', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@DEJOPFAB@org?4antlr?4runtime?4UnwantedTokenE@
CONST	SEGMENT
??_C@_0CJ@DEJOPFAB@org?4antlr?4runtime?4UnwantedTokenE@ DB 'org.antlr.run'
	DB	'time.UnwantedTokenException', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0GI@PGJHCPC@Base?5recognizer?5function?5?8mismat@
CONST	SEGMENT
??_C@_0GI@PGJHCPC@Base?5recognizer?5function?5?8mismat@ DB 'Base recogniz'
	DB	'er function ''mismatch'' called by unknown parser type - prov'
	DB	'ide override for this function', 0aH, 00H	; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT _mismatch
_TEXT	SEGMENT
tv69 = -232						; size = 4
_is$ = -32						; size = 4
_tparser$ = -20						; size = 4
_parser$ = -8						; size = 4
_recognizer$ = 8					; size = 4
_ttype$ = 12						; size = 4
_follow$ = 16						; size = 4
_mismatch PROC						; COMDAT
; Line 643
	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 650
	mov	eax, DWORD PTR _recognizer$[ebp]
	push	eax
	call	_antlr3MTExceptionNew
	add	esp, 4
; Line 651
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _ttype$[ebp]
	mov	DWORD PTR [edx+28], eax
; Line 653
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR tv69[ebp], ecx
	cmp	DWORD PTR tv69[ebp], 2
	je	SHORT $LN4@mismatch
	jmp	SHORT $LN3@mismatch
$LN4@mismatch:
; Line 657
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _parser$[ebp], ecx
; Line 658
	mov	DWORD PTR _tparser$[ebp], 0
; Line 659
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _is$[ebp], edx
; Line 661
	jmp	SHORT $LN5@mismatch
$LN3@mismatch:
; Line 665
	mov	esi, esp
	push	OFFSET ??_C@_0GI@PGJHCPC@Base?5recognizer?5function?5?8mismat@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 666
	jmp	$LN7@mismatch
$LN5@mismatch:
; Line 671
	mov	eax, DWORD PTR _ttype$[ebp]
	push	eax
	mov	ecx, DWORD PTR _is$[ebp]
	push	ecx
	mov	edx, DWORD PTR _recognizer$[ebp]
	push	edx
	call	_mismatchIsUnwantedToken
	add	esp, 12					; 0000000cH
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@mismatch
; Line 675
	mov	eax, DWORD PTR _recognizer$[ebp]
	push	eax
	call	_antlr3RecognitionExceptionNew
	add	esp, 4
; Line 679
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], OFFSET ??_C@_0CJ@DEJOPFAB@org?4antlr?4runtime?4UnwantedTokenE@
; Line 680
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx], 9
; Line 682
	jmp	SHORT $LN7@mismatch
$LN2@mismatch:
; Line 685
	mov	eax, DWORD PTR _follow$[ebp]
	push	eax
	mov	ecx, DWORD PTR _is$[ebp]
	push	ecx
	mov	edx, DWORD PTR _recognizer$[ebp]
	push	edx
	call	_mismatchIsMissingToken
	add	esp, 12					; 0000000cH
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN1@mismatch
; Line 689
	mov	eax, DWORD PTR _recognizer$[ebp]
	push	eax
	call	_antlr3RecognitionExceptionNew
	add	esp, 4
; Line 693
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], OFFSET ??_C@_0CI@FIMBDEFG@org?4antlr?4runtime?4MissingTokenEx@
; Line 694
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx], 10			; 0000000aH
; Line 696
	jmp	SHORT $LN7@mismatch
$LN1@mismatch:
; Line 701
	mov	eax, DWORD PTR _recognizer$[ebp]
	push	eax
	call	_antlr3MTExceptionNew
	add	esp, 4
$LN7@mismatch:
; Line 704
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 232				; 000000e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_mismatch ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _reportError
_TEXT	SEGMENT
_recognizer$ = 8					; size = 4
_reportError PROC					; COMDAT
; Line 722
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 725
	mov	eax, DWORD PTR _recognizer$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN2@reportErro
; Line 727
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	esi, esp
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _recognizer$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax+96]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@reportErro:
; Line 730
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	movzx	edx, BYTE PTR [ecx+16]
	cmp	edx, 1
	jne	SHORT $LN1@reportErro
; Line 734
	jmp	SHORT $LN3@reportErro
$LN1@reportErro:
; Line 739
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	BYTE PTR [ecx+16], 1
; Line 743
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+28]
	add	edx, 1
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+28], edx
; Line 747
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	esi, esp
	mov	edx, DWORD PTR [ecx+40]
	push	edx
	mov	eax, DWORD PTR _recognizer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _recognizer$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@reportErro:
; Line 748
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_reportError ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _beginBacktrack
_TEXT	SEGMENT
_recognizer$ = 8					; size = 4
_level$ = 12						; size = 4
_beginBacktrack PROC					; COMDAT
; Line 752
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 753
	mov	eax, DWORD PTR _recognizer$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN2@beginBackt
; Line 755
	mov	esi, esp
	mov	eax, DWORD PTR _level$[ebp]
	push	eax
	mov	ecx, DWORD PTR _recognizer$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+84]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@beginBackt:
; Line 757
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_beginBacktrack ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _endBacktrack
_TEXT	SEGMENT
_recognizer$ = 8					; size = 4
_level$ = 12						; size = 4
_successful$ = 16					; size = 1
_endBacktrack PROC					; COMDAT
; Line 761
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 762
	mov	eax, DWORD PTR _recognizer$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN2@endBacktra
; Line 764
	mov	esi, esp
	movzx	eax, BYTE PTR _successful$[ebp]
	push	eax
	mov	ecx, DWORD PTR _level$[ebp]
	push	ecx
	mov	edx, DWORD PTR _recognizer$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _recognizer$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx+88]
	call	eax
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@endBacktra:
; Line 766
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_endBacktrack ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _beginResync
_TEXT	SEGMENT
_recognizer$ = 8					; size = 4
_beginResync PROC					; COMDAT
; Line 769
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 770
	mov	eax, DWORD PTR _recognizer$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN2@beginResyn
; Line 772
	mov	esi, esp
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _recognizer$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax+100]
	call	ecx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@beginResyn:
; Line 774
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_beginResync ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _endResync
_TEXT	SEGMENT
_recognizer$ = 8					; size = 4
_endResync PROC						; COMDAT
; Line 778
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 779
	mov	eax, DWORD PTR _recognizer$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN2@endResync
; Line 781
	mov	esi, esp
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _recognizer$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax+104]
	call	ecx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@endResync:
; Line 783
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_endResync ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _computeErrorRecoverySet
_TEXT	SEGMENT
_recognizer$ = 8					; size = 4
_computeErrorRecoverySet PROC				; COMDAT
; Line 880
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 881
	mov	esi, esp
	push	0
	mov	eax, DWORD PTR _recognizer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _recognizer$[ebp]
	mov	edx, DWORD PTR [ecx+76]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 882
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_computeErrorRecoverySet ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _computeCSRuleFollow
_TEXT	SEGMENT
_recognizer$ = 8					; size = 4
_computeCSRuleFollow PROC				; COMDAT
; Line 940
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 941
	mov	esi, esp
	push	0
	mov	eax, DWORD PTR _recognizer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _recognizer$[ebp]
	mov	edx, DWORD PTR [ecx+76]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 942
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_computeCSRuleFollow ENDP
_TEXT	ENDS
EXTRN	_antlr3BitsetNew:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _combineFollows
_TEXT	SEGMENT
_i$ = -44						; size = 4
_top$ = -32						; size = 4
_localFollowSet$ = -20					; size = 4
_followSet$ = -8					; size = 4
_recognizer$ = 8					; size = 4
_exact$ = 12						; size = 1
_combineFollows PROC					; COMDAT
; Line 948
	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 954
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	esi, esp
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _top$[ebp], eax
; Line 956
	push	0
	call	_antlr3BitsetNew
	add	esp, 4
	mov	DWORD PTR _followSet$[ebp], eax
; Line 957
	mov	DWORD PTR _localFollowSet$[ebp], 0
; Line 959
	mov	eax, DWORD PTR _top$[ebp]
	mov	DWORD PTR _i$[ebp], eax
	jmp	SHORT $LN9@combineFol
$LN8@combineFol:
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN9@combineFol:
	cmp	DWORD PTR _i$[ebp], 0
	jbe	$LN7@combineFol
; Line 961
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _recognizer$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _recognizer$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax+16]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_antlr3BitsetLoad
	add	esp, 4
	mov	DWORD PTR _localFollowSet$[ebp], eax
; Line 963
	cmp	DWORD PTR _localFollowSet$[ebp], 0
	je	$LN6@combineFol
; Line 965
	mov	esi, esp
	mov	eax, DWORD PTR _localFollowSet$[ebp]
	push	eax
	mov	ecx, DWORD PTR _followSet$[ebp]
	push	ecx
	mov	edx, DWORD PTR _followSet$[ebp]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 967
	movzx	eax, BYTE PTR _exact$[ebp]
	cmp	eax, 1
	jne	SHORT $LN5@combineFol
; Line 969
	mov	esi, esp
	push	1
	mov	eax, DWORD PTR _localFollowSet$[ebp]
	push	eax
	mov	ecx, DWORD PTR _localFollowSet$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN4@combineFol
; Line 974
	cmp	DWORD PTR _i$[ebp], 1
	jbe	SHORT $LN3@combineFol
; Line 976
	mov	esi, esp
	push	1
	mov	eax, DWORD PTR _followSet$[ebp]
	push	eax
	mov	ecx, DWORD PTR _followSet$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@combineFol:
; Line 979
	jmp	SHORT $LN5@combineFol
$LN4@combineFol:
; Line 981
	jmp	SHORT $LN7@combineFol
$LN5@combineFol:
; Line 984
	mov	esi, esp
	mov	eax, DWORD PTR _localFollowSet$[ebp]
	push	eax
	mov	ecx, DWORD PTR _localFollowSet$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 985
	mov	DWORD PTR _localFollowSet$[ebp], 0
$LN6@combineFol:
; Line 987
	jmp	$LN8@combineFol
$LN7@combineFol:
; Line 989
	cmp	DWORD PTR _localFollowSet$[ebp], 0
	je	SHORT $LN1@combineFol
; Line 991
	mov	esi, esp
	mov	eax, DWORD PTR _localFollowSet$[ebp]
	push	eax
	mov	ecx, DWORD PTR _localFollowSet$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@combineFol:
; Line 993
	mov	eax, DWORD PTR _followSet$[ebp]
; Line 994
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_combineFollows ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BN@OMNOHKEK@?5?3?5syntax?5not?5recognized?4?4?4?6?$AA@ ; `string'
PUBLIC	??_C@_0BI@LEAIIGMG@?5?3?5missing?5elements?4?4?4?6?$AA@ ; `string'
PUBLIC	??_C@_0EL@LCDOFIDJ@I?5could?5not?5work?5out?5what?5I?5was?5@ ; `string'
PUBLIC	??_C@_0EK@GLJFAOIP@Actually?5dude?0?5we?5didn?8t?5seem?5to@ ; `string'
PUBLIC	??_C@_01EEMJAFIK@?6?$AA@			; `string'
PUBLIC	??_C@_04HDOCAJNK@?$CFs?$CFs?$AA@		; `string'
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	??_C@_02KEGNLNML@?0?5?$AA@			; `string'
PUBLIC	??_C@_0CM@CIKJCOFM@?5?3?5unexpected?5input?4?4?4?6?5?5expecte@ ; `string'
PUBLIC	??_C@_0CL@DEBMMGOB@?5?3?5cannot?5match?5to?5any?5predicted@ ; `string'
PUBLIC	??_C@_0BE@KIMOAPGN@?5?3?5expected?5?$CFs?5?4?4?4?6?$AA@ ; `string'
PUBLIC	??_C@_0BD@GBFOJBLI@?5?3?5expected?5?$DMEOF?$DO?6?$AA@ ; `string'
PUBLIC	??_C@_0BE@CLJLAAJJ@?5?3?5syntax?5error?4?4?4?6?$AA@ ; `string'
PUBLIC	??_C@_0BA@JJEGDFKK@?5?3?5Missing?5?$CFs?5?6?$AA@ ; `string'
PUBLIC	??_C@_0BC@DMIEBDKC@?5?3?5Missing?5?$DMEOF?$DO?6?$AA@ ; `string'
PUBLIC	??_C@_0BK@FIODKMIN@?5?3?5Missing?5token?5?$CI?$CFd?$CJ?4?4?4?6?$AA@ ; `string'
PUBLIC	??_C@_0CH@BICFKPGJ@?5?3?5Extraneous?5input?5?9?5expected?5?$CF@ ; `string'
PUBLIC	??_C@_0CG@FKGGLHMC@?5?3?5Extraneous?5input?5?9?5expected?5?$DM@ ; `string'
PUBLIC	??_C@_0BH@MJPMEPDL@?5?3?5Extraneous?5input?4?4?4?$AA@ ; `string'
PUBLIC	??_C@_0HF@PILNDIMB@Base?5recognizer?5function?5display@ ; `string'
PUBLIC	??_C@_09NBGEJOP@?0?5near?5?$CFs?$AA@		; `string'
PUBLIC	??_C@_0BC@FCBIMOGO@?6?5?5?5?5near?5?$CFs?6?5?5?5?5?$AA@ ; `string'
PUBLIC	??_C@_0BI@JEIKDPEP@?$DMno?5text?5for?5the?5token?$DO?$AA@ ; `string'
PUBLIC	??_C@_0L@OOBCNBEJ@?0?5at?5?$DMEOF?$DO?$AA@	; `string'
PUBLIC	??_C@_0P@FFBCLMBE@?0?5at?5offset?5?$CFd?$AA@	; `string'
PUBLIC	??_C@_0BB@IEOPNPCE@?5?3?5error?5?$CFd?5?3?5?$CFs?$AA@ ; `string'
PUBLIC	??_C@_04CGKAJBAP@?$CFd?$CJ?5?$AA@		; `string'
PUBLIC	??_C@_03ECLNAHEM@?$CFs?$CI?$AA@			; `string'
PUBLIC	??_C@_0BC@NHAPJBAE@?9unknown?5source?9?$CI?$AA@	; `string'
PUBLIC	??_C@_0BA@NHDJPBJB@?9end?5of?5input?9?$CI?$AA@	; `string'
;	COMDAT ??_C@_0BN@OMNOHKEK@?5?3?5syntax?5not?5recognized?4?4?4?6?$AA@
CONST	SEGMENT
??_C@_0BN@OMNOHKEK@?5?3?5syntax?5not?5recognized?4?4?4?6?$AA@ DB ' : synt'
	DB	'ax not recognized...', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@LEAIIGMG@?5?3?5missing?5elements?4?4?4?6?$AA@
CONST	SEGMENT
??_C@_0BI@LEAIIGMG@?5?3?5missing?5elements?4?4?4?6?$AA@ DB ' : missing el'
	DB	'ements...', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0EL@LCDOFIDJ@I?5could?5not?5work?5out?5what?5I?5was?5@
CONST	SEGMENT
??_C@_0EL@LCDOFIDJ@I?5could?5not?5work?5out?5what?5I?5was?5@ DB 'I could '
	DB	'not work out what I was expecting, like so many of us these d'
	DB	'ays!', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0EK@GLJFAOIP@Actually?5dude?0?5we?5didn?8t?5seem?5to@
CONST	SEGMENT
??_C@_0EK@GLJFAOIP@Actually?5dude?0?5we?5didn?8t?5seem?5to@ DB 'Actually '
	DB	'dude, we didn''t seem to be expecting anything here, or at le'
	DB	'ast', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_01EEMJAFIK@?6?$AA@
CONST	SEGMENT
??_C@_01EEMJAFIK@?6?$AA@ DB 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04HDOCAJNK@?$CFs?$CFs?$AA@
CONST	SEGMENT
??_C@_04HDOCAJNK@?$CFs?$CFs?$AA@ DB '%s%s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_02KEGNLNML@?0?5?$AA@
CONST	SEGMENT
??_C@_02KEGNLNML@?0?5?$AA@ DB ', ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@CIKJCOFM@?5?3?5unexpected?5input?4?4?4?6?5?5expecte@
CONST	SEGMENT
??_C@_0CM@CIKJCOFM@?5?3?5unexpected?5input?4?4?4?6?5?5expecte@ DB ' : une'
	DB	'xpected input...', 0aH, '  expected one of : ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@DEBMMGOB@?5?3?5cannot?5match?5to?5any?5predicted@
CONST	SEGMENT
??_C@_0CL@DEBMMGOB@?5?3?5cannot?5match?5to?5any?5predicted@ DB ' : cannot'
	DB	' match to any predicted input...', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@KIMOAPGN@?5?3?5expected?5?$CFs?5?4?4?4?6?$AA@
CONST	SEGMENT
??_C@_0BE@KIMOAPGN@?5?3?5expected?5?$CFs?5?4?4?4?6?$AA@ DB ' : expected %'
	DB	's ...', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@GBFOJBLI@?5?3?5expected?5?$DMEOF?$DO?6?$AA@
CONST	SEGMENT
??_C@_0BD@GBFOJBLI@?5?3?5expected?5?$DMEOF?$DO?6?$AA@ DB ' : expected <EO'
	DB	'F>', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@CLJLAAJJ@?5?3?5syntax?5error?4?4?4?6?$AA@
CONST	SEGMENT
??_C@_0BE@CLJLAAJJ@?5?3?5syntax?5error?4?4?4?6?$AA@ DB ' : syntax error..'
	DB	'.', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@JJEGDFKK@?5?3?5Missing?5?$CFs?5?6?$AA@
CONST	SEGMENT
??_C@_0BA@JJEGDFKK@?5?3?5Missing?5?$CFs?5?6?$AA@ DB ' : Missing %s ', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@DMIEBDKC@?5?3?5Missing?5?$DMEOF?$DO?6?$AA@
CONST	SEGMENT
??_C@_0BC@DMIEBDKC@?5?3?5Missing?5?$DMEOF?$DO?6?$AA@ DB ' : Missing <EOF>'
	DB	0aH, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@FIODKMIN@?5?3?5Missing?5token?5?$CI?$CFd?$CJ?4?4?4?6?$AA@
CONST	SEGMENT
??_C@_0BK@FIODKMIN@?5?3?5Missing?5token?5?$CI?$CFd?$CJ?4?4?4?6?$AA@ DB ' '
	DB	': Missing token (%d)...', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@BICFKPGJ@?5?3?5Extraneous?5input?5?9?5expected?5?$CF@
CONST	SEGMENT
??_C@_0CH@BICFKPGJ@?5?3?5Extraneous?5input?5?9?5expected?5?$CF@ DB ' : Ex'
	DB	'traneous input - expected %s ...', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@FKGGLHMC@?5?3?5Extraneous?5input?5?9?5expected?5?$DM@
CONST	SEGMENT
??_C@_0CG@FKGGLHMC@?5?3?5Extraneous?5input?5?9?5expected?5?$DM@ DB ' : Ex'
	DB	'traneous input - expected <EOF>', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@MJPMEPDL@?5?3?5Extraneous?5input?4?4?4?$AA@
CONST	SEGMENT
??_C@_0BH@MJPMEPDL@?5?3?5Extraneous?5input?4?4?4?$AA@ DB ' : Extraneous i'
	DB	'nput...', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0HF@PILNDIMB@Base?5recognizer?5function?5display@
CONST	SEGMENT
??_C@_0HF@PILNDIMB@Base?5recognizer?5function?5display@ DB 'Base recogniz'
	DB	'er function displayRecognitionError called by unknown parser '
	DB	'type - provide override for this function', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09NBGEJOP@?0?5near?5?$CFs?$AA@
CONST	SEGMENT
??_C@_09NBGEJOP@?0?5near?5?$CFs?$AA@ DB ', near %s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@FCBIMOGO@?6?5?5?5?5near?5?$CFs?6?5?5?5?5?$AA@
CONST	SEGMENT
??_C@_0BC@FCBIMOGO@?6?5?5?5?5near?5?$CFs?6?5?5?5?5?$AA@ DB 0aH, '    near'
	DB	' %s', 0aH, '    ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@JEIKDPEP@?$DMno?5text?5for?5the?5token?$DO?$AA@
CONST	SEGMENT
??_C@_0BI@JEIKDPEP@?$DMno?5text?5for?5the?5token?$DO?$AA@ DB '<no text fo'
	DB	'r the token>', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@OOBCNBEJ@?0?5at?5?$DMEOF?$DO?$AA@
CONST	SEGMENT
??_C@_0L@OOBCNBEJ@?0?5at?5?$DMEOF?$DO?$AA@ DB ', at <EOF>', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@FFBCLMBE@?0?5at?5offset?5?$CFd?$AA@
CONST	SEGMENT
??_C@_0P@FFBCLMBE@?0?5at?5offset?5?$CFd?$AA@ DB ', at offset %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@IEOPNPCE@?5?3?5error?5?$CFd?5?3?5?$CFs?$AA@
CONST	SEGMENT
??_C@_0BB@IEOPNPCE@?5?3?5error?5?$CFd?5?3?5?$CFs?$AA@ DB ' : error %d : %'
	DB	's', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_04CGKAJBAP@?$CFd?$CJ?5?$AA@
CONST	SEGMENT
??_C@_04CGKAJBAP@?$CFd?$CJ?5?$AA@ DB '%d) ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03ECLNAHEM@?$CFs?$CI?$AA@
CONST	SEGMENT
??_C@_03ECLNAHEM@?$CFs?$CI?$AA@ DB '%s(', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@NHAPJBAE@?9unknown?5source?9?$CI?$AA@
CONST	SEGMENT
??_C@_0BC@NHAPJBAE@?9unknown?5source?9?$CI?$AA@ DB '-unknown source-(', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@NHDJPBJB@?9end?5of?5input?9?$CI?$AA@
CONST	SEGMENT
??_C@_0BA@NHDJPBJB@?9end?5of?5input?9?$CI?$AA@ DB '-end of input-(', 00H ; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT _displayRecognitionError
_TEXT	SEGMENT
tv302 = -364						; size = 4
tv208 = -364						; size = 4
tv169 = -364						; size = 4
tv143 = -364						; size = 4
_errBits$36425 = -164					; size = 4
_numbits$36424 = -152					; size = 4
_size$36423 = -140					; size = 4
_bit$36422 = -128					; size = 4
_count$36421 = -116					; size = 4
_theCommonTree$ = -104					; size = 4
_theBaseTree$ = -92					; size = 4
_theToken$ = -80					; size = 4
_ex$ = -68						; size = 4
_ftext$ = -56						; size = 4
_ttext$ = -44						; size = 4
_is$ = -32						; size = 4
_tparser$ = -20						; size = 4
_parser$ = -8						; size = 4
_recognizer$ = 8					; size = 4
_tokenNames$ = 12					; size = 4
_displayRecognitionError PROC				; COMDAT
; Line 1009
	push	ebp
	mov	ebp, esp
	sub	esp, 364				; 0000016cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-364]
	mov	ecx, 91					; 0000005bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1022
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _ex$[ebp], edx
; Line 1023
	mov	DWORD PTR _ttext$[ebp], 0
; Line 1027
	mov	eax, DWORD PTR _ex$[ebp]
	cmp	DWORD PTR [eax+12], 0
	jne	SHORT $LN42@displayRec
; Line 1029
	mov	eax, DWORD PTR _ex$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	cmp	DWORD PTR [ecx], -1
	jne	SHORT $LN41@displayRec
; Line 1031
	mov	esi, esp
	push	OFFSET ??_C@_0BA@NHDJPBJB@?9end?5of?5input?9?$CI?$AA@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1033
	jmp	SHORT $LN40@displayRec
$LN41@displayRec:
; Line 1035
	mov	esi, esp
	push	OFFSET ??_C@_0BC@NHAPJBAE@?9unknown?5source?9?$CI?$AA@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN40@displayRec:
; Line 1038
	jmp	SHORT $LN39@displayRec
$LN42@displayRec:
; Line 1040
	mov	esi, esp
	mov	eax, DWORD PTR _ex$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _ex$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax+96]
	call	ecx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _ftext$[ebp], eax
; Line 1041
	mov	esi, esp
	mov	eax, DWORD PTR _ftext$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	push	OFFSET ??_C@_03ECLNAHEM@?$CFs?$CI?$AA@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN39@displayRec:
; Line 1047
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+4]
	mov	esi, esp
	mov	eax, DWORD PTR [edx+44]
	push	eax
	push	OFFSET ??_C@_04CGKAJBAP@?$CFd?$CJ?5?$AA@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1050
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+4]
	mov	esi, esp
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _recognizer$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	push	OFFSET ??_C@_0BB@IEOPNPCE@?5?3?5error?5?$CFd?5?3?5?$CFs?$AA@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1056
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR tv143[ebp], ecx
	cmp	DWORD PTR tv143[ebp], 2
	je	SHORT $LN36@displayRec
	cmp	DWORD PTR tv143[ebp], 4
	je	$LN32@displayRec
	jmp	$LN29@displayRec
$LN36@displayRec:
; Line 1062
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _parser$[ebp], ecx
; Line 1063
	mov	DWORD PTR _tparser$[ebp], 0
; Line 1064
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _is$[ebp], edx
; Line 1065
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+24]
	mov	DWORD PTR _theToken$[ebp], eax
; Line 1066
	mov	esi, esp
	mov	eax, DWORD PTR _theToken$[ebp]
	push	eax
	mov	ecx, DWORD PTR _theToken$[ebp]
	mov	edx, DWORD PTR [ecx+140]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _ttext$[ebp], eax
; Line 1068
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+4]
	mov	esi, esp
	mov	eax, DWORD PTR [edx+48]
	push	eax
	push	OFFSET ??_C@_0P@FFBCLMBE@?0?5at?5offset?5?$CFd?$AA@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1069
	cmp	DWORD PTR _theToken$[ebp], 0
	je	$LN35@displayRec
; Line 1071
	mov	eax, DWORD PTR _theToken$[ebp]
	cmp	DWORD PTR [eax], -1
	jne	SHORT $LN34@displayRec
; Line 1073
	mov	esi, esp
	push	OFFSET ??_C@_0L@OOBCNBEJ@?0?5at?5?$DMEOF?$DO?$AA@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1075
	jmp	SHORT $LN35@displayRec
$LN34@displayRec:
; Line 1079
	cmp	DWORD PTR _ttext$[ebp], 0
	jne	SHORT $LN45@displayRec
	mov	DWORD PTR tv169[ebp], OFFSET ??_C@_0BI@JEIKDPEP@?$DMno?5text?5for?5the?5token?$DO?$AA@
	jmp	SHORT $LN46@displayRec
$LN45@displayRec:
	mov	eax, DWORD PTR _ttext$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR tv169[ebp], ecx
$LN46@displayRec:
	mov	esi, esp
	mov	edx, DWORD PTR tv169[ebp]
	push	edx
	push	OFFSET ??_C@_0BC@FCBIMOGO@?6?5?5?5?5near?5?$CFs?6?5?5?5?5?$AA@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN35@displayRec:
; Line 1082
	jmp	$LN37@displayRec
$LN32@displayRec:
; Line 1086
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _tparser$[ebp], ecx
; Line 1087
	mov	DWORD PTR _parser$[ebp], 0
; Line 1088
	mov	eax, DWORD PTR _tparser$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _is$[ebp], eax
; Line 1089
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+24]
	mov	DWORD PTR _theBaseTree$[ebp], eax
; Line 1090
	mov	esi, esp
	mov	eax, DWORD PTR _theBaseTree$[ebp]
	push	eax
	mov	ecx, DWORD PTR _theBaseTree$[ebp]
	mov	edx, DWORD PTR [ecx+104]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _ttext$[ebp], eax
; Line 1092
	cmp	DWORD PTR _theBaseTree$[ebp], 0
	je	$LN31@displayRec
; Line 1094
	mov	eax, DWORD PTR _theBaseTree$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _theCommonTree$[ebp], ecx
; Line 1096
	cmp	DWORD PTR _theCommonTree$[ebp], 0
	je	SHORT $LN30@displayRec
; Line 1098
	mov	esi, esp
	mov	eax, DWORD PTR _theBaseTree$[ebp]
	push	eax
	mov	ecx, DWORD PTR _theBaseTree$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _theToken$[ebp], eax
$LN30@displayRec:
; Line 1100
	mov	esi, esp
	mov	eax, DWORD PTR _theBaseTree$[ebp]
	push	eax
	mov	ecx, DWORD PTR _theBaseTree$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_0P@FFBCLMBE@?0?5at?5offset?5?$CFd?$AA@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1101
	mov	esi, esp
	mov	eax, DWORD PTR _ttext$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	push	OFFSET ??_C@_09NBGEJOP@?0?5near?5?$CFs?$AA@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN31@displayRec:
; Line 1103
	jmp	SHORT $LN37@displayRec
$LN29@displayRec:
; Line 1107
	mov	esi, esp
	push	OFFSET ??_C@_0HF@PILNDIMB@Base?5recognizer?5function?5display@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1108
	jmp	$LN43@displayRec
$LN37@displayRec:
; Line 1124
	mov	eax, DWORD PTR _ex$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv208[ebp], ecx
	mov	edx, DWORD PTR tv208[ebp]
	sub	edx, 1
	mov	DWORD PTR tv208[ebp], edx
	cmp	DWORD PTR tv208[ebp], 9
	ja	$LN1@displayRec
	mov	eax, DWORD PTR tv208[ebp]
	jmp	DWORD PTR $LN49@displayRec[eax*4]
$LN26@displayRec:
; Line 1134
	cmp	DWORD PTR _tokenNames$[ebp], 0
	jne	SHORT $LN25@displayRec
; Line 1136
	mov	esi, esp
	push	OFFSET ??_C@_0BH@MJPMEPDL@?5?3?5Extraneous?5input?4?4?4?$AA@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1138
	jmp	SHORT $LN24@displayRec
$LN25@displayRec:
; Line 1140
	mov	eax, DWORD PTR _ex$[ebp]
	cmp	DWORD PTR [eax+28], -1
	jne	SHORT $LN23@displayRec
; Line 1142
	mov	esi, esp
	push	OFFSET ??_C@_0CG@FKGGLHMC@?5?3?5Extraneous?5input?5?9?5expected?5?$DM@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1144
	jmp	SHORT $LN24@displayRec
$LN23@displayRec:
; Line 1146
	mov	eax, DWORD PTR _ex$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	esi, esp
	mov	edx, DWORD PTR _tokenNames$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4]
	push	eax
	push	OFFSET ??_C@_0CH@BICFKPGJ@?5?3?5Extraneous?5input?5?9?5expected?5?$CF@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN24@displayRec:
; Line 1149
	jmp	$LN43@displayRec
$LN21@displayRec:
; Line 1158
	cmp	DWORD PTR _tokenNames$[ebp], 0
	jne	SHORT $LN20@displayRec
; Line 1160
	mov	esi, esp
	mov	eax, DWORD PTR _ex$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	push	ecx
	push	OFFSET ??_C@_0BK@FIODKMIN@?5?3?5Missing?5token?5?$CI?$CFd?$CJ?4?4?4?6?$AA@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1162
	jmp	SHORT $LN19@displayRec
$LN20@displayRec:
; Line 1164
	mov	eax, DWORD PTR _ex$[ebp]
	cmp	DWORD PTR [eax+28], -1
	jne	SHORT $LN18@displayRec
; Line 1166
	mov	esi, esp
	push	OFFSET ??_C@_0BC@DMIEBDKC@?5?3?5Missing?5?$DMEOF?$DO?6?$AA@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1168
	jmp	SHORT $LN19@displayRec
$LN18@displayRec:
; Line 1170
	mov	eax, DWORD PTR _ex$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	esi, esp
	mov	edx, DWORD PTR _tokenNames$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4]
	push	eax
	push	OFFSET ??_C@_0BA@JJEGDFKK@?5?3?5Missing?5?$CFs?5?6?$AA@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN19@displayRec:
; Line 1173
	jmp	$LN43@displayRec
$LN16@displayRec:
; Line 1183
	mov	esi, esp
	push	OFFSET ??_C@_0BE@CLJLAAJJ@?5?3?5syntax?5error?4?4?4?6?$AA@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1184
	jmp	$LN43@displayRec
$LN15@displayRec:
; Line 1197
	cmp	DWORD PTR _tokenNames$[ebp], 0
	jne	SHORT $LN14@displayRec
; Line 1199
	mov	esi, esp
	push	OFFSET ??_C@_0BE@CLJLAAJJ@?5?3?5syntax?5error?4?4?4?6?$AA@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1201
	jmp	SHORT $LN13@displayRec
$LN14@displayRec:
; Line 1203
	mov	eax, DWORD PTR _ex$[ebp]
	cmp	DWORD PTR [eax+28], -1
	jne	SHORT $LN12@displayRec
; Line 1205
	mov	esi, esp
	push	OFFSET ??_C@_0BD@GBFOJBLI@?5?3?5expected?5?$DMEOF?$DO?6?$AA@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1207
	jmp	SHORT $LN13@displayRec
$LN12@displayRec:
; Line 1209
	mov	eax, DWORD PTR _ex$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	esi, esp
	mov	edx, DWORD PTR _tokenNames$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4]
	push	eax
	push	OFFSET ??_C@_0BE@KIMOAPGN@?5?3?5expected?5?$CFs?5?4?4?4?6?$AA@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN13@displayRec:
; Line 1212
	jmp	$LN43@displayRec
$LN10@displayRec:
; Line 1221
	mov	esi, esp
	push	OFFSET ??_C@_0CL@DEBMMGOB@?5?3?5cannot?5match?5to?5any?5predicted@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1223
	jmp	$LN43@displayRec
$LN9@displayRec:
; Line 1238
	mov	esi, esp
	push	OFFSET ??_C@_0CM@CIKJCOFM@?5?3?5unexpected?5input?4?4?4?6?5?5expecte@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1243
	mov	DWORD PTR _count$36421[ebp], 0
; Line 1244
	mov	eax, DWORD PTR _ex$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	call	_antlr3BitsetLoad
	add	esp, 4
	mov	DWORD PTR _errBits$36425[ebp], eax
; Line 1245
	mov	esi, esp
	mov	eax, DWORD PTR _errBits$36425[ebp]
	push	eax
	mov	ecx, DWORD PTR _errBits$36425[ebp]
	mov	edx, DWORD PTR [ecx+40]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _numbits$36424[ebp], eax
; Line 1246
	mov	esi, esp
	mov	eax, DWORD PTR _errBits$36425[ebp]
	push	eax
	mov	ecx, DWORD PTR _errBits$36425[ebp]
	mov	edx, DWORD PTR [ecx+20]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _size$36423[ebp], eax
; Line 1248
	cmp	DWORD PTR _size$36423[ebp], 0
	jbe	$LN8@displayRec
; Line 1255
	mov	DWORD PTR _bit$36422[ebp], 1
	jmp	SHORT $LN7@displayRec
$LN6@displayRec:
	mov	eax, DWORD PTR _bit$36422[ebp]
	add	eax, 1
	mov	DWORD PTR _bit$36422[ebp], eax
$LN7@displayRec:
	mov	eax, DWORD PTR _bit$36422[ebp]
	cmp	eax, DWORD PTR _numbits$36424[ebp]
	jae	$LN5@displayRec
	cmp	DWORD PTR _count$36421[ebp], 8
	jae	SHORT $LN5@displayRec
	mov	eax, DWORD PTR _count$36421[ebp]
	cmp	eax, DWORD PTR _size$36423[ebp]
	jae	SHORT $LN5@displayRec
; Line 1259
	mov	eax, DWORD PTR _bit$36422[ebp]
	mov	ecx, DWORD PTR _tokenNames$[ebp]
	cmp	DWORD PTR [ecx+eax*4], 0
	je	SHORT $LN4@displayRec
; Line 1261
	cmp	DWORD PTR _count$36421[ebp], 0
	jbe	SHORT $LN47@displayRec
	mov	DWORD PTR tv302[ebp], OFFSET ??_C@_02KEGNLNML@?0?5?$AA@
	jmp	SHORT $LN48@displayRec
$LN47@displayRec:
	mov	DWORD PTR tv302[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN48@displayRec:
	mov	esi, esp
	mov	eax, DWORD PTR _bit$36422[ebp]
	mov	ecx, DWORD PTR _tokenNames$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	push	edx
	mov	eax, DWORD PTR tv302[ebp]
	push	eax
	push	OFFSET ??_C@_04HDOCAJNK@?$CFs?$CFs?$AA@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1262
	mov	eax, DWORD PTR _count$36421[ebp]
	add	eax, 1
	mov	DWORD PTR _count$36421[ebp], eax
$LN4@displayRec:
; Line 1264
	jmp	$LN6@displayRec
$LN5@displayRec:
; Line 1265
	mov	esi, esp
	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1267
	jmp	SHORT $LN3@displayRec
$LN8@displayRec:
; Line 1269
	mov	esi, esp
	push	OFFSET ??_C@_0EK@GLJFAOIP@Actually?5dude?0?5we?5didn?8t?5seem?5to@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1270
	mov	esi, esp
	push	OFFSET ??_C@_0EL@LCDOFIDJ@I?5could?5not?5work?5out?5what?5I?5was?5@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@displayRec:
; Line 1273
	jmp	SHORT $LN43@displayRec
$LN2@displayRec:
; Line 1281
	mov	esi, esp
	push	OFFSET ??_C@_0BI@LEAIIGMG@?5?3?5missing?5elements?4?4?4?6?$AA@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1282
	jmp	SHORT $LN43@displayRec
$LN1@displayRec:
; Line 1291
	mov	esi, esp
	push	OFFSET ??_C@_0BN@OMNOHKEK@?5?3?5syntax?5not?5recognized?4?4?4?6?$AA@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN43@displayRec:
; Line 1305
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 364				; 0000016cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN49@displayRec:
	DD	$LN16@displayRec
	DD	$LN15@displayRec
	DD	$LN10@displayRec
	DD	$LN9@displayRec
	DD	$LN2@displayRec
	DD	$LN1@displayRec
	DD	$LN1@displayRec
	DD	$LN1@displayRec
	DD	$LN26@displayRec
	DD	$LN21@displayRec
_displayRecognitionError ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _getNumberOfSyntaxErrors
_TEXT	SEGMENT
_recognizer$ = 8					; size = 4
_getNumberOfSyntaxErrors PROC				; COMDAT
; Line 1311
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1312
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	eax, DWORD PTR [ecx+28]
; Line 1313
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_getNumberOfSyntaxErrors ENDP
_TEXT	ENDS
PUBLIC	??_C@_0GF@LHIHPDDL@Base?5recognizer?5function?5recover@ ; `string'
;	COMDAT ??_C@_0GF@LHIHPDDL@Base?5recognizer?5function?5recover@
CONST	SEGMENT
??_C@_0GF@LHIHPDDL@Base?5recognizer?5function?5recover@ DB 'Base recogniz'
	DB	'er function recover called by unknown parser type - provide o'
	DB	'verride for this function', 0aH, 00H	; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT _recover
_TEXT	SEGMENT
tv65 = -244						; size = 4
_is$ = -44						; size = 4
_tparser$ = -32						; size = 4
_parser$ = -20						; size = 4
_followSet$ = -8					; size = 4
_recognizer$ = 8					; size = 4
_recover PROC						; COMDAT
; Line 1321
	push	ebp
	mov	ebp, esp
	sub	esp, 244				; 000000f4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 61					; 0000003dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1329
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR tv65[ebp], ecx
	cmp	DWORD PTR tv65[ebp], 2
	je	SHORT $LN4@recover
	cmp	DWORD PTR tv65[ebp], 4
	je	SHORT $LN3@recover
	jmp	SHORT $LN2@recover
$LN4@recover:
; Line 1333
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _parser$[ebp], ecx
; Line 1334
	mov	DWORD PTR _tparser$[ebp], 0
; Line 1335
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _is$[ebp], edx
; Line 1337
	jmp	SHORT $LN5@recover
$LN3@recover:
; Line 1341
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _tparser$[ebp], ecx
; Line 1342
	mov	DWORD PTR _parser$[ebp], 0
; Line 1343
	mov	eax, DWORD PTR _tparser$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _is$[ebp], eax
; Line 1345
	jmp	SHORT $LN5@recover
$LN2@recover:
; Line 1349
	mov	esi, esp
	push	OFFSET ??_C@_0GF@LHIHPDDL@Base?5recognizer?5function?5recover@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1350
	jmp	$LN7@recover
$LN5@recover:
; Line 1357
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	esi, DWORD PTR [eax+8]
	mov	edi, esp
	mov	ecx, DWORD PTR _is$[ebp]
	push	ecx
	mov	edx, DWORD PTR _is$[ebp]
	mov	eax, DWORD PTR [edx+32]
	call	eax
	add	esp, 4
	cmp	edi, esp
	call	__RTC_CheckEsp
	cmp	DWORD PTR [esi+20], eax
	jne	SHORT $LN1@recover
; Line 1364
	mov	esi, esp
	mov	eax, DWORD PTR _is$[ebp]
	push	eax
	mov	ecx, DWORD PTR _is$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@recover:
; Line 1369
	mov	esi, esp
	mov	eax, DWORD PTR _is$[ebp]
	push	eax
	mov	ecx, DWORD PTR _is$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _recognizer$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+20], eax
; Line 1373
	mov	esi, esp
	mov	eax, DWORD PTR _recognizer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _recognizer$[ebp]
	mov	edx, DWORD PTR [ecx+68]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _followSet$[ebp], eax
; Line 1377
	mov	esi, esp
	mov	eax, DWORD PTR _recognizer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _recognizer$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1381
	mov	esi, esp
	mov	eax, DWORD PTR _followSet$[ebp]
	push	eax
	mov	ecx, DWORD PTR _recognizer$[ebp]
	push	ecx
	mov	edx, DWORD PTR _recognizer$[ebp]
	mov	eax, DWORD PTR [edx+96]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1385
	mov	esi, esp
	mov	eax, DWORD PTR _recognizer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _recognizer$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1389
	mov	esi, esp
	mov	eax, DWORD PTR _followSet$[ebp]
	push	eax
	mov	ecx, DWORD PTR _followSet$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1393
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	BYTE PTR [ecx], 0
; Line 1394
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	BYTE PTR [ecx+24], 0
$LN7@recover:
; Line 1395
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_recover ENDP
_TEXT	ENDS
PUBLIC	??_C@_0HI@JHLMLNCB@Base?5recognizer?5function?5recover@ ; `string'
;	COMDAT ??_C@_0HI@JHLMLNCB@Base?5recognizer?5function?5recover@
CONST	SEGMENT
??_C@_0HI@JHLMLNCB@Base?5recognizer?5function?5recover@ DB 'Base recogniz'
	DB	'er function recoverFromMismatchedToken called by unknown pars'
	DB	'er type - provide override for this function', 0aH, 00H ; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT _recoverFromMismatchedToken
_TEXT	SEGMENT
tv65 = -244						; size = 4
_matchedSymbol$ = -44					; size = 4
_is$ = -32						; size = 4
_tparser$ = -20						; size = 4
_parser$ = -8						; size = 4
_recognizer$ = 8					; size = 4
_ttype$ = 12						; size = 4
_follow$ = 16						; size = 4
_recoverFromMismatchedToken PROC			; COMDAT
; Line 1433
	push	ebp
	mov	ebp, esp
	sub	esp, 244				; 000000f4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 61					; 0000003dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1441
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR tv65[ebp], ecx
	cmp	DWORD PTR tv65[ebp], 2
	je	SHORT $LN8@recoverFro
	cmp	DWORD PTR tv65[ebp], 4
	je	SHORT $LN7@recoverFro
	jmp	SHORT $LN6@recoverFro
$LN8@recoverFro:
; Line 1445
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _parser$[ebp], ecx
; Line 1446
	mov	DWORD PTR _tparser$[ebp], 0
; Line 1447
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _is$[ebp], edx
; Line 1449
	jmp	SHORT $LN9@recoverFro
$LN7@recoverFro:
; Line 1453
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _tparser$[ebp], ecx
; Line 1454
	mov	DWORD PTR _parser$[ebp], 0
; Line 1455
	mov	eax, DWORD PTR _tparser$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _is$[ebp], eax
; Line 1457
	jmp	SHORT $LN9@recoverFro
$LN6@recoverFro:
; Line 1461
	mov	esi, esp
	push	OFFSET ??_C@_0HI@JHLMLNCB@Base?5recognizer?5function?5recover@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1462
	xor	eax, eax
	jmp	$LN11@recoverFro
$LN9@recoverFro:
; Line 1469
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	cmp	DWORD PTR [ecx+4], 0
	jne	SHORT $LN5@recoverFro
; Line 1471
	mov	eax, DWORD PTR _recognizer$[ebp]
	push	eax
	call	_antlr3RecognitionExceptionNew
	add	esp, 4
$LN5@recoverFro:
; Line 1479
	mov	esi, esp
	mov	eax, DWORD PTR _ttype$[ebp]
	push	eax
	mov	ecx, DWORD PTR _is$[ebp]
	push	ecx
	mov	edx, DWORD PTR _recognizer$[ebp]
	push	edx
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	call	ecx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	movzx	edx, al
	cmp	edx, 1
	jne	$LN4@recoverFro
; Line 1481
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx], 9
; Line 1482
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+8], OFFSET ??_C@_0CJ@DEJOPFAB@org?4antlr?4runtime?4UnwantedTokenE@
; Line 1486
	mov	eax, DWORD PTR _recognizer$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN3@recoverFro
; Line 1488
	mov	esi, esp
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _recognizer$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax+100]
	call	ecx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@recoverFro:
; Line 1493
	mov	esi, esp
	mov	eax, DWORD PTR _recognizer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _recognizer$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1494
	mov	esi, esp
	mov	eax, DWORD PTR _is$[ebp]
	push	eax
	mov	ecx, DWORD PTR _is$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1495
	mov	esi, esp
	mov	eax, DWORD PTR _recognizer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _recognizer$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1498
	mov	eax, DWORD PTR _recognizer$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN2@recoverFro
; Line 1500
	mov	esi, esp
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _recognizer$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax+104]
	call	ecx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@recoverFro:
; Line 1506
	mov	esi, esp
	mov	eax, DWORD PTR _recognizer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _recognizer$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1510
	mov	esi, esp
	mov	eax, DWORD PTR _is$[ebp]
	push	eax
	mov	ecx, DWORD PTR _recognizer$[ebp]
	push	ecx
	mov	edx, DWORD PTR _recognizer$[ebp]
	mov	eax, DWORD PTR [edx+124]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _matchedSymbol$[ebp], eax
; Line 1515
	mov	esi, esp
	mov	eax, DWORD PTR _is$[ebp]
	push	eax
	mov	ecx, DWORD PTR _is$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1517
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	BYTE PTR [ecx], 0
; Line 1519
	mov	eax, DWORD PTR _matchedSymbol$[ebp]
	jmp	$LN11@recoverFro
$LN4@recoverFro:
; Line 1526
	mov	eax, DWORD PTR _follow$[ebp]
	push	eax
	mov	ecx, DWORD PTR _is$[ebp]
	push	ecx
	mov	edx, DWORD PTR _recognizer$[ebp]
	push	edx
	call	_mismatchIsMissingToken
	add	esp, 12					; 0000000cH
	movzx	eax, al
	test	eax, eax
	je	$LN1@recoverFro
; Line 1530
	mov	esi, esp
	mov	eax, DWORD PTR _follow$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ttype$[ebp]
	push	ecx
	mov	edx, DWORD PTR _recognizer$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _is$[ebp]
	push	edx
	mov	eax, DWORD PTR _recognizer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _recognizer$[ebp]
	mov	edx, DWORD PTR [ecx+128]
	call	edx
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _matchedSymbol$[ebp], eax
; Line 1531
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx], 10			; 0000000aH
; Line 1532
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+8], OFFSET ??_C@_0CI@FIMBDEFG@org?4antlr?4runtime?4MissingTokenEx@
; Line 1533
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _matchedSymbol$[ebp]
	mov	DWORD PTR [edx+24], eax
; Line 1534
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _ttype$[ebp]
	mov	DWORD PTR [edx+28], eax
; Line 1539
	mov	esi, esp
	mov	eax, DWORD PTR _recognizer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _recognizer$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1541
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	BYTE PTR [ecx], 0
; Line 1543
	mov	eax, DWORD PTR _matchedSymbol$[ebp]
	jmp	SHORT $LN11@recoverFro
$LN1@recoverFro:
; Line 1550
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	BYTE PTR [ecx], 1
; Line 1551
	xor	eax, eax
$LN11@recoverFro:
; Line 1552
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_recoverFromMismatchedToken ENDP
_TEXT	ENDS
PUBLIC	??_C@_0HG@PBJLBMBD@Base?5recognizer?5function?5recover@ ; `string'
;	COMDAT ??_C@_0HG@PBJLBMBD@Base?5recognizer?5function?5recover@
CONST	SEGMENT
??_C@_0HG@PBJLBMBD@Base?5recognizer?5function?5recover@ DB 'Base recogniz'
	DB	'er function recoverFromMismatchedSet called by unknown parser'
	DB	' type - provide override for this function', 0aH, 00H ; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT _recoverFromMismatchedSet
_TEXT	SEGMENT
tv65 = -244						; size = 4
_matchedSymbol$ = -44					; size = 4
_is$ = -32						; size = 4
_tparser$ = -20						; size = 4
_parser$ = -8						; size = 4
_recognizer$ = 8					; size = 4
_follow$ = 12						; size = 4
_recoverFromMismatchedSet PROC				; COMDAT
; Line 1556
	push	ebp
	mov	ebp, esp
	sub	esp, 244				; 000000f4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 61					; 0000003dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1562
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR tv65[ebp], ecx
	cmp	DWORD PTR tv65[ebp], 2
	je	SHORT $LN4@recoverFro@2
	cmp	DWORD PTR tv65[ebp], 4
	je	SHORT $LN3@recoverFro@2
	jmp	SHORT $LN2@recoverFro@2
$LN4@recoverFro@2:
; Line 1566
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _parser$[ebp], ecx
; Line 1567
	mov	DWORD PTR _tparser$[ebp], 0
; Line 1568
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _is$[ebp], edx
; Line 1570
	jmp	SHORT $LN5@recoverFro@2
$LN3@recoverFro@2:
; Line 1574
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _tparser$[ebp], ecx
; Line 1575
	mov	DWORD PTR _parser$[ebp], 0
; Line 1576
	mov	eax, DWORD PTR _tparser$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _is$[ebp], eax
; Line 1578
	jmp	SHORT $LN5@recoverFro@2
$LN2@recoverFro@2:
; Line 1582
	mov	esi, esp
	push	OFFSET ??_C@_0HG@PBJLBMBD@Base?5recognizer?5function?5recover@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1583
	xor	eax, eax
	jmp	$LN7@recoverFro@2
$LN5@recoverFro@2:
; Line 1588
	mov	esi, esp
	mov	eax, DWORD PTR _follow$[ebp]
	push	eax
	mov	ecx, DWORD PTR _is$[ebp]
	push	ecx
	mov	edx, DWORD PTR _recognizer$[ebp]
	push	edx
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	call	ecx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	movzx	edx, al
	cmp	edx, 1
	jne	SHORT $LN1@recoverFro@2
; Line 1592
	mov	esi, esp
	mov	eax, DWORD PTR _follow$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _recognizer$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _is$[ebp]
	push	ecx
	mov	edx, DWORD PTR _recognizer$[ebp]
	push	edx
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	ecx, DWORD PTR [eax+128]
	call	ecx
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _matchedSymbol$[ebp], eax
; Line 1593
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx], 10			; 0000000aH
; Line 1594
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _matchedSymbol$[ebp]
	mov	DWORD PTR [edx+24], eax
; Line 1599
	mov	esi, esp
	mov	eax, DWORD PTR _recognizer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _recognizer$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1601
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	BYTE PTR [ecx], 0
; Line 1603
	mov	eax, DWORD PTR _matchedSymbol$[ebp]
	jmp	SHORT $LN7@recoverFro@2
$LN1@recoverFro@2:
; Line 1608
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	BYTE PTR [ecx], 1
; Line 1609
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	BYTE PTR [ecx+24], 1
; Line 1610
	xor	eax, eax
$LN7@recoverFro@2:
; Line 1611
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_recoverFromMismatchedSet ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _recoverFromMismatchedElement
_TEXT	SEGMENT
tv65 = -256						; size = 4
_is$ = -56						; size = 4
_tparser$ = -44						; size = 4
_parser$ = -32						; size = 4
_follow$ = -20						; size = 4
_viableToksFollowingRule$ = -8				; size = 4
_recognizer$ = 8					; size = 4
_followBits$ = 12					; size = 4
_recoverFromMismatchedElement PROC			; COMDAT
; Line 1620
	push	ebp
	mov	ebp, esp
	sub	esp, 256				; 00000100H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-256]
	mov	ecx, 64					; 00000040H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1627
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR tv65[ebp], ecx
	cmp	DWORD PTR tv65[ebp], 2
	je	SHORT $LN8@recoverFro@3
	cmp	DWORD PTR tv65[ebp], 4
	je	SHORT $LN7@recoverFro@3
	jmp	SHORT $LN6@recoverFro@3
$LN8@recoverFro@3:
; Line 1631
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _parser$[ebp], ecx
; Line 1632
	mov	DWORD PTR _tparser$[ebp], 0
; Line 1633
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _is$[ebp], edx
; Line 1635
	jmp	SHORT $LN9@recoverFro@3
$LN7@recoverFro@3:
; Line 1639
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _tparser$[ebp], ecx
; Line 1640
	mov	DWORD PTR _parser$[ebp], 0
; Line 1641
	mov	eax, DWORD PTR _tparser$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _is$[ebp], eax
; Line 1643
	jmp	SHORT $LN9@recoverFro@3
$LN6@recoverFro@3:
; Line 1647
	mov	esi, esp
	push	OFFSET ??_C@_0GF@LHIHPDDL@Base?5recognizer?5function?5recover@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1648
	xor	al, al
	jmp	$LN11@recoverFro@3
$LN9@recoverFro@3:
; Line 1653
	mov	eax, DWORD PTR _followBits$[ebp]
	push	eax
	call	_antlr3BitsetLoad
	add	esp, 4
	mov	DWORD PTR _follow$[ebp], eax
; Line 1655
	cmp	DWORD PTR _follow$[ebp], 0
	jne	SHORT $LN5@recoverFro@3
; Line 1662
	xor	al, al
	jmp	$LN11@recoverFro@3
$LN5@recoverFro@3:
; Line 1668
	mov	esi, esp
	push	1
	mov	eax, DWORD PTR _follow$[ebp]
	push	eax
	mov	ecx, DWORD PTR _follow$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	movzx	eax, al
	cmp	eax, 1
	jne	SHORT $LN4@recoverFro@3
; Line 1673
	mov	esi, esp
	mov	eax, DWORD PTR _recognizer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _recognizer$[ebp]
	mov	edx, DWORD PTR [ecx+72]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _viableToksFollowingRule$[ebp], eax
; Line 1677
	mov	esi, esp
	push	1
	mov	eax, DWORD PTR _follow$[ebp]
	push	eax
	mov	ecx, DWORD PTR _follow$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1678
	mov	esi, esp
	mov	eax, DWORD PTR _viableToksFollowingRule$[ebp]
	push	eax
	mov	ecx, DWORD PTR _viableToksFollowingRule$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN4@recoverFro@3:
; Line 1688
	mov	esi, esp
	push	1
	mov	eax, DWORD PTR _is$[ebp]
	push	eax
	mov	ecx, DWORD PTR _is$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	eax
	mov	eax, DWORD PTR _follow$[ebp]
	push	eax
	mov	ecx, DWORD PTR _follow$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	movzx	eax, al
	cmp	eax, 1
	jne	SHORT $LN3@recoverFro@3
; Line 1692
	mov	esi, esp
	mov	eax, DWORD PTR _recognizer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _recognizer$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1693
	cmp	DWORD PTR _follow$[ebp], 0
	je	SHORT $LN2@recoverFro@3
; Line 1695
	mov	esi, esp
	mov	eax, DWORD PTR _follow$[ebp]
	push	eax
	mov	ecx, DWORD PTR _follow$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@recoverFro@3:
; Line 1697
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	BYTE PTR [ecx], 0
; Line 1698
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	BYTE PTR [ecx+24], 0
; Line 1699
	mov	al, 1
	jmp	SHORT $LN11@recoverFro@3
$LN3@recoverFro@3:
; Line 1702
	cmp	DWORD PTR _follow$[ebp], 0
	je	SHORT $LN1@recoverFro@3
; Line 1704
	mov	esi, esp
	mov	eax, DWORD PTR _follow$[ebp]
	push	eax
	mov	ecx, DWORD PTR _follow$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@recoverFro@3:
; Line 1710
	xor	al, al
$LN11@recoverFro@3:
; Line 1711
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 256				; 00000100H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_recoverFromMismatchedElement ENDP
_TEXT	ENDS
PUBLIC	??_C@_0GM@GBPBPFEJ@Base?5recognizer?5function?5?8consum@ ; `string'
;	COMDAT ??_C@_0GM@GBPBPFEJ@Base?5recognizer?5function?5?8consum@
CONST	SEGMENT
??_C@_0GM@GBPBPFEJ@Base?5recognizer?5function?5?8consum@ DB 'Base recogni'
	DB	'zer function ''consumeUntil'' called by unknown parser type -'
	DB	' provide override for this function', 0aH, 00H ; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT _consumeUntil
_TEXT	SEGMENT
tv65 = -244						; size = 4
_is$ = -44						; size = 4
_tparser$ = -32						; size = 4
_parser$ = -20						; size = 4
_ttype$ = -8						; size = 4
_recognizer$ = 8					; size = 4
_tokenType$ = 12					; size = 4
_consumeUntil PROC					; COMDAT
; Line 1717
	push	ebp
	mov	ebp, esp
	sub	esp, 244				; 000000f4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 61					; 0000003dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1723
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR tv65[ebp], ecx
	cmp	DWORD PTR tv65[ebp], 2
	je	SHORT $LN5@consumeUnt
	cmp	DWORD PTR tv65[ebp], 4
	je	SHORT $LN4@consumeUnt
	jmp	SHORT $LN3@consumeUnt
$LN5@consumeUnt:
; Line 1727
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _parser$[ebp], ecx
; Line 1728
	mov	DWORD PTR _tparser$[ebp], 0
; Line 1729
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _is$[ebp], edx
; Line 1731
	jmp	SHORT $LN6@consumeUnt
$LN4@consumeUnt:
; Line 1735
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _tparser$[ebp], ecx
; Line 1736
	mov	DWORD PTR _parser$[ebp], 0
; Line 1737
	mov	eax, DWORD PTR _tparser$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _is$[ebp], eax
; Line 1739
	jmp	SHORT $LN6@consumeUnt
$LN3@consumeUnt:
; Line 1743
	mov	esi, esp
	push	OFFSET ??_C@_0GM@GBPBPFEJ@Base?5recognizer?5function?5?8consum@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1744
	jmp	SHORT $LN8@consumeUnt
$LN6@consumeUnt:
; Line 1751
	mov	esi, esp
	push	1
	mov	eax, DWORD PTR _is$[ebp]
	push	eax
	mov	ecx, DWORD PTR _is$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _ttype$[ebp], eax
$LN2@consumeUnt:
; Line 1755
	cmp	DWORD PTR _ttype$[ebp], -1
	je	SHORT $LN8@consumeUnt
	mov	eax, DWORD PTR _ttype$[ebp]
	cmp	eax, DWORD PTR _tokenType$[ebp]
	je	SHORT $LN8@consumeUnt
; Line 1757
	mov	esi, esp
	mov	eax, DWORD PTR _is$[ebp]
	push	eax
	mov	ecx, DWORD PTR _is$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1758
	mov	esi, esp
	push	1
	mov	eax, DWORD PTR _is$[ebp]
	push	eax
	mov	ecx, DWORD PTR _is$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _ttype$[ebp], eax
; Line 1759
	jmp	SHORT $LN2@consumeUnt
$LN8@consumeUnt:
; Line 1760
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_consumeUntil ENDP
_TEXT	ENDS
PUBLIC	??_C@_0GP@DAFOBMIL@Base?5recognizer?5function?5?8consum@ ; `string'
;	COMDAT ??_C@_0GP@DAFOBMIL@Base?5recognizer?5function?5?8consum@
CONST	SEGMENT
??_C@_0GP@DAFOBMIL@Base?5recognizer?5function?5?8consum@ DB 'Base recogni'
	DB	'zer function ''consumeUntilSet'' called by unknown parser typ'
	DB	'e - provide override for this function', 0aH, 00H ; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT _consumeUntilSet
_TEXT	SEGMENT
tv65 = -244						; size = 4
_is$ = -44						; size = 4
_tparser$ = -32						; size = 4
_parser$ = -20						; size = 4
_ttype$ = -8						; size = 4
_recognizer$ = 8					; size = 4
_set$ = 12						; size = 4
_consumeUntilSet PROC					; COMDAT
; Line 1767
	push	ebp
	mov	ebp, esp
	sub	esp, 244				; 000000f4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 61					; 0000003dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1773
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR tv65[ebp], ecx
	cmp	DWORD PTR tv65[ebp], 2
	je	SHORT $LN5@consumeUnt@2
	cmp	DWORD PTR tv65[ebp], 4
	je	SHORT $LN4@consumeUnt@2
	jmp	SHORT $LN3@consumeUnt@2
$LN5@consumeUnt@2:
; Line 1777
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _parser$[ebp], ecx
; Line 1778
	mov	DWORD PTR _tparser$[ebp], 0
; Line 1779
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _is$[ebp], edx
; Line 1781
	jmp	SHORT $LN6@consumeUnt@2
$LN4@consumeUnt@2:
; Line 1785
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _tparser$[ebp], ecx
; Line 1786
	mov	DWORD PTR _parser$[ebp], 0
; Line 1787
	mov	eax, DWORD PTR _tparser$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _is$[ebp], eax
; Line 1789
	jmp	SHORT $LN6@consumeUnt@2
$LN3@consumeUnt@2:
; Line 1793
	mov	esi, esp
	push	OFFSET ??_C@_0GP@DAFOBMIL@Base?5recognizer?5function?5?8consum@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1794
	jmp	SHORT $LN8@consumeUnt@2
$LN6@consumeUnt@2:
; Line 1801
	mov	esi, esp
	push	1
	mov	eax, DWORD PTR _is$[ebp]
	push	eax
	mov	ecx, DWORD PTR _is$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _ttype$[ebp], eax
$LN2@consumeUnt@2:
; Line 1805
	cmp	DWORD PTR _ttype$[ebp], -1
	je	SHORT $LN8@consumeUnt@2
	mov	esi, esp
	mov	eax, DWORD PTR _ttype$[ebp]
	push	eax
	mov	ecx, DWORD PTR _set$[ebp]
	push	ecx
	mov	edx, DWORD PTR _set$[ebp]
	mov	eax, DWORD PTR [edx+36]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN8@consumeUnt@2
; Line 1807
	mov	esi, esp
	mov	eax, DWORD PTR _is$[ebp]
	push	eax
	mov	ecx, DWORD PTR _is$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1808
	mov	esi, esp
	push	1
	mov	eax, DWORD PTR _is$[ebp]
	push	eax
	mov	ecx, DWORD PTR _is$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _ttype$[ebp], eax
; Line 1809
	jmp	SHORT $LN2@consumeUnt@2
$LN8@consumeUnt@2:
; Line 1810
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_consumeUntilSet ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _getRuleInvocationStack
_TEXT	SEGMENT
_recognizer$ = 8					; size = 4
_getRuleInvocationStack PROC				; COMDAT
; Line 1819
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1820
	xor	eax, eax
; Line 1821
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_getRuleInvocationStack ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _getRuleInvocationStackNamed
_TEXT	SEGMENT
_recognizer$ = 8					; size = 4
_name$ = 12						; size = 4
_getRuleInvocationStackNamed PROC			; COMDAT
; Line 1825
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1826
	xor	eax, eax
; Line 1827
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_getRuleInvocationStackNamed ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _toStrings
_TEXT	SEGMENT
_recognizer$ = 8					; size = 4
_tokens$ = 12						; size = 4
_toStrings PROC						; COMDAT
; Line 1833
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1834
	xor	eax, eax
; Line 1835
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_toStrings ENDP
_TEXT	ENDS
EXTRN	_antlr3IntTrieNew:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _getRuleMemoization
_TEXT	SEGMENT
_entry$ = -32						; size = 4
_stopIndex$ = -20					; size = 4
_ruleList$ = -8						; size = 4
_recognizer$ = 8					; size = 4
_ruleIndex$ = 12					; size = 4
_ruleParseStart$ = 16					; size = 4
_getRuleMemoization PROC				; COMDAT
; Line 1856
	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1866
	mov	esi, esp
	mov	eax, DWORD PTR _ruleIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _recognizer$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [edx+36]
	push	eax
	mov	ecx, DWORD PTR _recognizer$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [edx+36]
	mov	ecx, DWORD PTR [eax+16]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _entry$[ebp], eax
; Line 1868
	cmp	DWORD PTR _entry$[ebp], 0
	jne	SHORT $LN4@getRuleMem
; Line 1877
	push	63					; 0000003fH
	call	_antlr3IntTrieNew
	add	esp, 4
	mov	DWORD PTR _ruleList$[ebp], eax
; Line 1879
	cmp	DWORD PTR _ruleList$[ebp], 0
	je	SHORT $LN3@getRuleMem
; Line 1881
	mov	esi, esp
	push	OFFSET _freeIntTrie
	mov	eax, DWORD PTR _ruleList$[ebp]
	push	eax
	push	0
	push	1
	mov	ecx, DWORD PTR _ruleIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _recognizer$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [eax+36]
	push	ecx
	mov	edx, DWORD PTR _recognizer$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR [ecx+24]
	call	edx
	add	esp, 24					; 00000018H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@getRuleMem:
; Line 1886
	or	eax, -1
	jmp	SHORT $LN5@getRuleMem
$LN4@getRuleMem:
; Line 1889
	mov	eax, DWORD PTR _entry$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _ruleList$[ebp], ecx
; Line 1893
	mov	DWORD PTR _stopIndex$[ebp], 0
; Line 1895
	mov	esi, esp
	mov	eax, DWORD PTR _ruleParseStart$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ruleList$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ruleList$[ebp]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _entry$[ebp], eax
; Line 1896
	cmp	DWORD PTR _entry$[ebp], 0
	je	SHORT $LN2@getRuleMem
; Line 1898
	mov	eax, DWORD PTR _entry$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _stopIndex$[ebp], ecx
$LN2@getRuleMem:
; Line 1901
	cmp	DWORD PTR _stopIndex$[ebp], 0
	jne	SHORT $LN1@getRuleMem
; Line 1903
	or	eax, -1
	jmp	SHORT $LN5@getRuleMem
$LN1@getRuleMem:
; Line 1906
	mov	eax, DWORD PTR _stopIndex$[ebp]
$LN5@getRuleMem:
; Line 1907
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_getRuleMemoization ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _freeIntTrie
_TEXT	SEGMENT
_trie$ = 8						; size = 4
_freeIntTrie PROC					; COMDAT
; Line 1839
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1840
	mov	esi, esp
	mov	eax, DWORD PTR _trie$[ebp]
	push	eax
	mov	ecx, DWORD PTR _trie$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1841
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_freeIntTrie ENDP
_TEXT	ENDS
PUBLIC	??_C@_0HB@KELCLOME@Base?5recognizer?5function?5?8alread@ ; `string'
;	COMDAT ??_C@_0HB@KELCLOME@Base?5recognizer?5function?5?8alread@
CONST	SEGMENT
??_C@_0HB@KELCLOME@Base?5recognizer?5function?5?8alread@ DB 'Base recogni'
	DB	'zer function ''alreadyParsedRule'' called by unknown parser t'
	DB	'ype - provide override for this function', 0aH, 00H ; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT _alreadyParsedRule
_TEXT	SEGMENT
tv65 = -256						; size = 4
_is$ = -56						; size = 4
_tparser$ = -44						; size = 4
_parser$ = -32						; size = 4
_lexer$ = -20						; size = 4
_stopIndex$ = -8					; size = 4
_recognizer$ = 8					; size = 4
_ruleIndex$ = 12					; size = 4
_alreadyParsedRule PROC					; COMDAT
; Line 1919
	push	ebp
	mov	ebp, esp
	sub	esp, 256				; 00000100H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-256]
	mov	ecx, 64					; 00000040H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1926
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR tv65[ebp], ecx
	cmp	DWORD PTR tv65[ebp], 1
	je	SHORT $LN5@alreadyPar
	cmp	DWORD PTR tv65[ebp], 2
	je	SHORT $LN7@alreadyPar
	cmp	DWORD PTR tv65[ebp], 4
	je	SHORT $LN6@alreadyPar
	jmp	SHORT $LN4@alreadyPar
$LN7@alreadyPar:
; Line 1930
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _parser$[ebp], ecx
; Line 1931
	mov	DWORD PTR _tparser$[ebp], 0
; Line 1932
	mov	DWORD PTR _lexer$[ebp], 0
; Line 1933
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _is$[ebp], edx
; Line 1935
	jmp	SHORT $LN8@alreadyPar
$LN6@alreadyPar:
; Line 1939
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _tparser$[ebp], ecx
; Line 1940
	mov	DWORD PTR _parser$[ebp], 0
; Line 1941
	mov	DWORD PTR _lexer$[ebp], 0
; Line 1942
	mov	eax, DWORD PTR _tparser$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _is$[ebp], eax
; Line 1944
	jmp	SHORT $LN8@alreadyPar
$LN5@alreadyPar:
; Line 1948
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _lexer$[ebp], ecx
; Line 1949
	mov	DWORD PTR _parser$[ebp], 0
; Line 1950
	mov	DWORD PTR _tparser$[ebp], 0
; Line 1951
	mov	eax, DWORD PTR _lexer$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _is$[ebp], edx
; Line 1952
	jmp	SHORT $LN8@alreadyPar
$LN4@alreadyPar:
; Line 1956
	mov	esi, esp
	push	OFFSET ??_C@_0HB@KELCLOME@Base?5recognizer?5function?5?8alread@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1957
	xor	al, al
	jmp	SHORT $LN10@alreadyPar
$LN8@alreadyPar:
; Line 1964
	mov	esi, esp
	mov	eax, DWORD PTR _is$[ebp]
	push	eax
	mov	ecx, DWORD PTR _is$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	eax
	mov	eax, DWORD PTR _ruleIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _recognizer$[ebp]
	push	ecx
	mov	edx, DWORD PTR _recognizer$[ebp]
	mov	eax, DWORD PTR [edx+112]
	call	eax
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _stopIndex$[ebp], eax
; Line 1966
	cmp	DWORD PTR _stopIndex$[ebp], -1
	jne	SHORT $LN3@alreadyPar
; Line 1968
	xor	al, al
	jmp	SHORT $LN10@alreadyPar
$LN3@alreadyPar:
; Line 1971
	cmp	DWORD PTR _stopIndex$[ebp], -2		; fffffffeH
	jne	SHORT $LN2@alreadyPar
; Line 1973
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	BYTE PTR [ecx+24], 1
; Line 1975
	jmp	SHORT $LN1@alreadyPar
$LN2@alreadyPar:
; Line 1977
	mov	eax, DWORD PTR _stopIndex$[ebp]
	add	eax, 1
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _is$[ebp]
	push	ecx
	mov	edx, DWORD PTR _is$[ebp]
	mov	eax, DWORD PTR [edx+48]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@alreadyPar:
; Line 1982
	mov	al, 1
$LN10@alreadyPar:
; Line 1983
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 256				; 00000100H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_alreadyParsedRule ENDP
_TEXT	ENDS
PUBLIC	??_C@_0GN@OCPDGBBI@Base?5recognizer?5function?5consume@ ; `string'
;	COMDAT ??_C@_0GN@OCPDGBBI@Base?5recognizer?5function?5consume@
CONST	SEGMENT
??_C@_0GN@OCPDGBBI@Base?5recognizer?5function?5consume@ DB 'Base recogniz'
	DB	'er function consumeUntilSet called by unknown parser type - p'
	DB	'rovide override for this function', 0aH, 00H ; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT _memoize
_TEXT	SEGMENT
tv88 = -280						; size = 4
tv65 = -280						; size = 4
_is$ = -80						; size = 4
_tparser$ = -68						; size = 4
_parser$ = -56						; size = 4
_lexer$ = -44						; size = 4
_stopIndex$ = -32					; size = 4
_entry$ = -20						; size = 4
_ruleList$ = -8						; size = 4
_recognizer$ = 8					; size = 4
_ruleIndex$ = 12					; size = 4
_ruleParseStart$ = 16					; size = 4
_memoize PROC						; COMDAT
; Line 1990
	push	ebp
	mov	ebp, esp
	sub	esp, 280				; 00000118H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-280]
	mov	ecx, 70					; 00000046H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2001
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR tv65[ebp], ecx
	cmp	DWORD PTR tv65[ebp], 1
	je	SHORT $LN3@memoize
	cmp	DWORD PTR tv65[ebp], 2
	je	SHORT $LN5@memoize
	cmp	DWORD PTR tv65[ebp], 4
	je	SHORT $LN4@memoize
	jmp	SHORT $LN2@memoize
$LN5@memoize:
; Line 2005
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _parser$[ebp], ecx
; Line 2006
	mov	DWORD PTR _tparser$[ebp], 0
; Line 2007
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _is$[ebp], edx
; Line 2009
	jmp	SHORT $LN6@memoize
$LN4@memoize:
; Line 2013
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _tparser$[ebp], ecx
; Line 2014
	mov	DWORD PTR _parser$[ebp], 0
; Line 2015
	mov	eax, DWORD PTR _tparser$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _is$[ebp], eax
; Line 2017
	jmp	SHORT $LN6@memoize
$LN3@memoize:
; Line 2021
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _lexer$[ebp], ecx
; Line 2022
	mov	DWORD PTR _parser$[ebp], 0
; Line 2023
	mov	DWORD PTR _tparser$[ebp], 0
; Line 2024
	mov	eax, DWORD PTR _lexer$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _is$[ebp], edx
; Line 2025
	jmp	SHORT $LN6@memoize
$LN2@memoize:
; Line 2029
	mov	esi, esp
	push	OFFSET ??_C@_0GN@OCPDGBBI@Base?5recognizer?5function?5consume@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2030
	jmp	$LN8@memoize
$LN6@memoize:
; Line 2035
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	movzx	edx, BYTE PTR [ecx+24]
	cmp	edx, 1
	jne	SHORT $LN10@memoize
	mov	DWORD PTR tv88[ebp], -2			; fffffffeH
	jmp	SHORT $LN11@memoize
$LN10@memoize:
	mov	esi, esp
	mov	eax, DWORD PTR _is$[ebp]
	push	eax
	mov	ecx, DWORD PTR _is$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	sub	eax, 1
	mov	DWORD PTR tv88[ebp], eax
$LN11@memoize:
	mov	eax, DWORD PTR tv88[ebp]
	mov	DWORD PTR _stopIndex$[ebp], eax
; Line 2037
	mov	esi, esp
	mov	eax, DWORD PTR _ruleIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _recognizer$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [edx+36]
	push	eax
	mov	ecx, DWORD PTR _recognizer$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [edx+36]
	mov	ecx, DWORD PTR [eax+16]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _entry$[ebp], eax
; Line 2039
	cmp	DWORD PTR _entry$[ebp], 0
	je	SHORT $LN8@memoize
; Line 2041
	mov	eax, DWORD PTR _entry$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _ruleList$[ebp], ecx
; Line 2047
	mov	esi, esp
	push	0
	push	0
	mov	eax, DWORD PTR _stopIndex$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _ruleParseStart$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ruleList$[ebp]
	push	edx
	mov	eax, DWORD PTR _ruleList$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	call	ecx
	add	esp, 24					; 00000018H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN8@memoize:
; Line 2049
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 280				; 00000118H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_memoize ENDP
_TEXT	ENDS
PUBLIC	??_C@_0GH@CJOFJAFO@Base?5recognizer?5function?5?8synPre@ ; `string'
;	COMDAT ??_C@_0GH@CJOFJAFO@Base?5recognizer?5function?5?8synPre@
CONST	SEGMENT
??_C@_0GH@CJOFJAFO@Base?5recognizer?5function?5?8synPre@ DB 'Base recogni'
	DB	'zer function ''synPred'' called by unknown parser type - prov'
	DB	'ide override for this function', 0aH, 00H	; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT _synpred
_TEXT	SEGMENT
tv65 = -244						; size = 4
_is$ = -44						; size = 4
_tparser$ = -32						; size = 4
_parser$ = -20						; size = 4
_start$ = -8						; size = 4
_recognizer$ = 8					; size = 4
_ctx$ = 12						; size = 4
_predicate$ = 16					; size = 4
_synpred PROC						; COMDAT
; Line 2056
	push	ebp
	mov	ebp, esp
	sub	esp, 244				; 000000f4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 61					; 0000003dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2062
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR tv65[ebp], ecx
	cmp	DWORD PTR tv65[ebp], 2
	je	SHORT $LN5@synpred
	cmp	DWORD PTR tv65[ebp], 4
	je	SHORT $LN4@synpred
	jmp	SHORT $LN3@synpred
$LN5@synpred:
; Line 2066
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _parser$[ebp], ecx
; Line 2067
	mov	DWORD PTR _tparser$[ebp], 0
; Line 2068
	mov	eax, DWORD PTR _parser$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _is$[ebp], edx
; Line 2070
	jmp	SHORT $LN6@synpred
$LN4@synpred:
; Line 2074
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _tparser$[ebp], ecx
; Line 2075
	mov	DWORD PTR _parser$[ebp], 0
; Line 2076
	mov	eax, DWORD PTR _tparser$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _is$[ebp], eax
; Line 2078
	jmp	SHORT $LN6@synpred
$LN3@synpred:
; Line 2082
	mov	esi, esp
	push	OFFSET ??_C@_0GH@CJOFJAFO@Base?5recognizer?5function?5?8synPre@
	mov	edi, esp
	call	DWORD PTR __imp____iob_func
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2083
	xor	al, al
	jmp	$LN8@synpred
$LN6@synpred:
; Line 2091
	mov	esi, esp
	mov	eax, DWORD PTR _is$[ebp]
	push	eax
	mov	ecx, DWORD PTR _is$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _start$[ebp], eax
; Line 2092
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+32]
	add	edx, 1
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+32], edx
; Line 2096
	mov	esi, esp
	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	call	DWORD PTR _predicate$[ebp]
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2100
	mov	esi, esp
	mov	eax, DWORD PTR _start$[ebp]
	push	eax
	mov	ecx, DWORD PTR _is$[ebp]
	push	ecx
	mov	edx, DWORD PTR _is$[ebp]
	mov	eax, DWORD PTR [edx+36]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2101
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+32]
	sub	edx, 1
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+32], edx
; Line 2103
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	movzx	edx, BYTE PTR [ecx+24]
	cmp	edx, 1
	jne	SHORT $LN2@synpred
; Line 2107
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	BYTE PTR [ecx+24], 0
; Line 2108
	xor	al, al
	jmp	SHORT $LN8@synpred
; Line 2110
	jmp	SHORT $LN8@synpred
$LN2@synpred:
; Line 2114
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	BYTE PTR [ecx+24], 0
; Line 2115
	mov	al, 1
$LN8@synpred:
; Line 2117
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_synpred ENDP
_TEXT	ENDS
EXTRN	_antlr3StackNew:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _reset
_TEXT	SEGMENT
_recognizer$ = 8					; size = 4
_reset	PROC						; COMDAT
; Line 2121
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2122
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	cmp	DWORD PTR [ecx+12], 0
	je	SHORT $LN3@reset
; Line 2124
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	esi, esp
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@reset:
; Line 2129
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	BYTE PTR [ecx+16], 0
; Line 2130
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+20], -1
; Line 2131
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	BYTE PTR [ecx+24], 0
; Line 2132
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+28], 0
; Line 2133
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+32], 0
; Line 2134
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+12], 0
; Line 2136
	mov	eax, DWORD PTR _recognizer$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN2@reset
; Line 2138
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	cmp	DWORD PTR [ecx+36], 0
	je	SHORT $LN2@reset
; Line 2140
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	esi, esp
	mov	edx, DWORD PTR [ecx+36]
	push	edx
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+36]
	mov	eax, DWORD PTR [edx+28]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2141
	push	15					; 0000000fH
	call	_antlr3IntTrieNew
	add	esp, 4
	mov	ecx, DWORD PTR _recognizer$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+36], eax
$LN2@reset:
; Line 2148
	push	8
	call	_antlr3StackNew
	add	esp, 4
	mov	ecx, DWORD PTR _recognizer$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+12], eax
; Line 2150
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_reset	ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _getCurrentInputSymbol
_TEXT	SEGMENT
_recognizer$ = 8					; size = 4
_istream$ = 12						; size = 4
_getCurrentInputSymbol PROC				; COMDAT
; Line 2157
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2158
	mov	esi, esp
	push	1
	mov	eax, DWORD PTR _istream$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _istream$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [eax+20]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2159
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_getCurrentInputSymbol ENDP
_TEXT	ENDS
PUBLIC	??_C@_01PPODPGHN@?$DO?$AA@			; `string'
PUBLIC	??_C@_09MLMDPBIO@?$DMmissing?5?$AA@		; `string'
EXTRN	_antlr3TokenFactoryNew:PROC
;	COMDAT ??_C@_01PPODPGHN@?$DO?$AA@
CONST	SEGMENT
??_C@_01PPODPGHN@?$DO?$AA@ DB '>', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_09MLMDPBIO@?$DMmissing?5?$AA@
CONST	SEGMENT
??_C@_09MLMDPBIO@?$DMmissing?5?$AA@ DB '<missing ', 00H	; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT _getMissingSymbol
_TEXT	SEGMENT
_text$ = -56						; size = 4
_current$ = -44						; size = 4
_token$ = -32						; size = 4
_cts$ = -20						; size = 4
_ts$ = -8						; size = 4
_recognizer$ = 8					; size = 4
_istream$ = 12						; size = 4
_e$ = 16						; size = 4
_expectedTokenType$ = 20				; size = 4
_follow$ = 24						; size = 4
_getMissingSymbol PROC					; COMDAT
; Line 2167
	push	ebp
	mov	ebp, esp
	sub	esp, 252				; 000000fcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-252]
	mov	ecx, 63					; 0000003fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2176
	mov	eax, DWORD PTR _istream$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _ts$[ebp], ecx
; Line 2177
	mov	eax, DWORD PTR _ts$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _cts$[ebp], ecx
; Line 2182
	mov	esi, esp
	push	1
	mov	eax, DWORD PTR _ts$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ts$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _current$[ebp], eax
; Line 2183
	mov	esi, esp
	mov	eax, DWORD PTR _current$[ebp]
	push	eax
	mov	ecx, DWORD PTR _current$[ebp]
	mov	edx, DWORD PTR [ecx+84]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, -1
	jne	SHORT $LN3@getMissing
; Line 2185
	mov	esi, esp
	push	-1
	mov	eax, DWORD PTR _ts$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ts$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _current$[ebp], eax
$LN3@getMissing:
; Line 2190
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	cmp	DWORD PTR [ecx+52], 0
	jne	SHORT $LN2@getMissing
; Line 2196
	mov	eax, DWORD PTR _current$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	push	ecx
	call	_antlr3TokenFactoryNew
	add	esp, 4
	mov	edx, DWORD PTR _recognizer$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+52], eax
$LN2@getMissing:
; Line 2198
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	esi, esp
	mov	edx, DWORD PTR [ecx+52]
	push	edx
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+52]
	mov	eax, DWORD PTR [edx+164]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _token$[ebp], eax
; Line 2202
	mov	esi, esp
	mov	eax, DWORD PTR _current$[ebp]
	push	eax
	mov	ecx, DWORD PTR _current$[ebp]
	mov	edx, DWORD PTR [ecx+92]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	eax
	mov	eax, DWORD PTR _token$[ebp]
	push	eax
	mov	ecx, DWORD PTR _token$[ebp]
	mov	edx, DWORD PTR [ecx+96]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2203
	mov	esi, esp
	mov	eax, DWORD PTR _current$[ebp]
	push	eax
	mov	ecx, DWORD PTR _current$[ebp]
	mov	edx, DWORD PTR [ecx+100]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	eax
	mov	eax, DWORD PTR _token$[ebp]
	push	eax
	mov	ecx, DWORD PTR _token$[ebp]
	mov	edx, DWORD PTR [ecx+104]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2204
	mov	esi, esp
	push	0
	mov	eax, DWORD PTR _token$[ebp]
	push	eax
	mov	ecx, DWORD PTR _token$[ebp]
	mov	edx, DWORD PTR [ecx+112]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2205
	mov	esi, esp
	mov	eax, DWORD PTR _expectedTokenType$[ebp]
	push	eax
	mov	ecx, DWORD PTR _token$[ebp]
	push	ecx
	mov	edx, DWORD PTR _token$[ebp]
	mov	eax, DWORD PTR [edx+88]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2206
	mov	eax, DWORD PTR _token$[ebp]
	mov	ecx, DWORD PTR _current$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	mov	DWORD PTR [eax+52], edx
; Line 2207
	mov	eax, DWORD PTR _token$[ebp]
	mov	ecx, DWORD PTR _current$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	DWORD PTR [eax+56], edx
; Line 2208
	mov	eax, DWORD PTR _token$[ebp]
	mov	ecx, DWORD PTR _current$[ebp]
	mov	edx, DWORD PTR [ecx+60]
	mov	DWORD PTR [eax+60], edx
; Line 2209
	mov	eax, DWORD PTR _token$[ebp]
	mov	ecx, DWORD PTR _current$[ebp]
	mov	edx, DWORD PTR [ecx+64]
	mov	DWORD PTR [eax+64], edx
; Line 2210
	mov	eax, DWORD PTR _token$[ebp]
	mov	ecx, DWORD PTR _current$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+16], edx
; Line 2214
	mov	esi, esp
	push	OFFSET ??_C@_09MLMDPBIO@?$DMmissing?5?$AA@
	mov	eax, DWORD PTR _token$[ebp]
	push	eax
	mov	ecx, DWORD PTR _token$[ebp]
	mov	edx, DWORD PTR [ecx+80]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2215
	mov	esi, esp
	mov	eax, DWORD PTR _token$[ebp]
	push	eax
	mov	ecx, DWORD PTR _token$[ebp]
	mov	edx, DWORD PTR [ecx+72]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _text$[ebp], eax
; Line 2217
	cmp	DWORD PTR _text$[ebp], 0
	je	SHORT $LN1@getMissing
; Line 2219
	mov	eax, DWORD PTR _recognizer$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+40]
	mov	esi, esp
	mov	eax, DWORD PTR _expectedTokenType$[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	push	ecx
	mov	edx, DWORD PTR _text$[ebp]
	push	edx
	mov	eax, DWORD PTR _text$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2220
	mov	esi, esp
	push	OFFSET ??_C@_01PPODPGHN@?$DO?$AA@
	mov	eax, DWORD PTR _text$[ebp]
	push	eax
	mov	ecx, DWORD PTR _text$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@getMissing:
; Line 2225
	mov	eax, DWORD PTR _token$[ebp]
; Line 2226
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 252				; 000000fcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_getMissingSymbol ENDP
_TEXT	ENDS
END
