; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\Users\Ken\Documents\GitHub\spengine\Antlr\antlr3bitset.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_antlr3BitsetSetAPI
PUBLIC	_antlr3BitsetNew
EXTRN	__imp__free:PROC
EXTRN	_memset:PROC
EXTRN	__imp__malloc:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\users\ken\documents\github\spengine\antlr\antlr3bitset.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT _antlr3BitsetNew
_TEXT	SEGMENT
_numelements$ = -20					; size = 4
_bitset$ = -8						; size = 4
_numBits$ = 8						; size = 4
_antlr3BitsetNew PROC					; COMDAT
; Line 77
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 84
	mov	esi, esp
	push	60					; 0000003cH
	call	DWORD PTR __imp__malloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _bitset$[ebp], eax
; Line 86
	cmp	DWORD PTR _bitset$[ebp], 0
	jne	SHORT $LN3@antlr3Bits
; Line 88
	xor	eax, eax
	jmp	$LN4@antlr3Bits
$LN3@antlr3Bits:
; Line 93
	cmp	DWORD PTR _numBits$[ebp], 512		; 00000200H
	jae	SHORT $LN2@antlr3Bits
; Line 95
	mov	DWORD PTR _numBits$[ebp], 512		; 00000200H
$LN2@antlr3Bits:
; Line 101
	mov	eax, DWORD PTR _numBits$[ebp]
	sub	eax, 1
	shr	eax, 6
	add	eax, 1
	mov	DWORD PTR _numelements$[ebp], eax
; Line 103
	mov	eax, DWORD PTR _numelements$[ebp]
	shl	eax, 3
	mov	esi, esp
	push	eax
	call	DWORD PTR __imp__malloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _bitset$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 104
	mov	eax, DWORD PTR _numelements$[ebp]
	shl	eax, 3
	push	eax
	push	0
	mov	ecx, DWORD PTR _bitset$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH
; Line 105
	mov	eax, DWORD PTR _bitset$[ebp]
	mov	ecx, DWORD PTR _numelements$[ebp]
	mov	DWORD PTR [eax+4], ecx
; Line 107
	mov	eax, DWORD PTR _bitset$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN1@antlr3Bits
; Line 109
	mov	esi, esp
	mov	eax, DWORD PTR _bitset$[ebp]
	push	eax
	call	DWORD PTR __imp__free
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 110
	xor	eax, eax
	jmp	SHORT $LN4@antlr3Bits
$LN1@antlr3Bits:
; Line 113
	mov	eax, DWORD PTR _bitset$[ebp]
	push	eax
	call	_antlr3BitsetSetAPI
	add	esp, 4
; Line 118
	mov	eax, DWORD PTR _bitset$[ebp]
$LN4@antlr3Bits:
; Line 119
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_antlr3BitsetNew ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _antlr3BitsetSetAPI
_TEXT	SEGMENT
_bitset$ = 8						; size = 4
_antlr3BitsetSetAPI PROC				; COMDAT
; Line 123
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 124
	mov	eax, DWORD PTR _bitset$[ebp]
	mov	DWORD PTR [eax+8], OFFSET _antlr3BitsetClone
; Line 125
	mov	eax, DWORD PTR _bitset$[ebp]
	mov	DWORD PTR [eax+12], OFFSET _antlr3BitsetOR
; Line 126
	mov	eax, DWORD PTR _bitset$[ebp]
	mov	DWORD PTR [eax+16], OFFSET _antlr3BitsetORInPlace
; Line 127
	mov	eax, DWORD PTR _bitset$[ebp]
	mov	DWORD PTR [eax+20], OFFSET _antlr3BitsetSize
; Line 128
	mov	eax, DWORD PTR _bitset$[ebp]
	mov	DWORD PTR [eax+24], OFFSET _antlr3BitsetAdd
; Line 129
	mov	eax, DWORD PTR _bitset$[ebp]
	mov	DWORD PTR [eax+28], OFFSET _grow
; Line 130
	mov	eax, DWORD PTR _bitset$[ebp]
	mov	DWORD PTR [eax+32], OFFSET _antlr3BitsetEquals
; Line 131
	mov	eax, DWORD PTR _bitset$[ebp]
	mov	DWORD PTR [eax+36], OFFSET _antlr3BitsetMember
; Line 132
	mov	eax, DWORD PTR _bitset$[ebp]
	mov	DWORD PTR [eax+40], OFFSET _antlr3BitsetNumBits
; Line 133
	mov	eax, DWORD PTR _bitset$[ebp]
	mov	DWORD PTR [eax+44], OFFSET _antlr3BitsetRemove
; Line 134
	mov	eax, DWORD PTR _bitset$[ebp]
	mov	DWORD PTR [eax+48], OFFSET _antlr3BitsetIsNil
; Line 135
	mov	eax, DWORD PTR _bitset$[ebp]
	mov	DWORD PTR [eax+52], OFFSET _antlr3BitsetToIntList
; Line 137
	mov	eax, DWORD PTR _bitset$[ebp]
	mov	DWORD PTR [eax+56], OFFSET _antlr3BitsetFree
; Line 138
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_antlr3BitsetSetAPI ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _antlr3BitsetFree
_TEXT	SEGMENT
_bitset$ = 8						; size = 4
_antlr3BitsetFree PROC					; COMDAT
; Line 64
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 65
	mov	eax, DWORD PTR _bitset$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN1@antlr3Bits@2
; Line 67
	mov	esi, esp
	mov	eax, DWORD PTR _bitset$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	DWORD PTR __imp__free
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 68
	mov	eax, DWORD PTR _bitset$[ebp]
	mov	DWORD PTR [eax], 0
$LN1@antlr3Bits@2:
; Line 70
	mov	esi, esp
	mov	eax, DWORD PTR _bitset$[ebp]
	push	eax
	call	DWORD PTR __imp__free
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 73
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_antlr3BitsetFree ENDP
_TEXT	ENDS
PUBLIC	_antlr3BitsetCopy
EXTRN	_memcpy:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _antlr3BitsetCopy
_TEXT	SEGMENT
_numElements$ = -20					; size = 4
_bitset$ = -8						; size = 4
_blist$ = 8						; size = 4
_antlr3BitsetCopy PROC					; COMDAT
; Line 142
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 148
	mov	esi, esp
	push	60					; 0000003cH
	call	DWORD PTR __imp__malloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _bitset$[ebp], eax
; Line 150
	cmp	DWORD PTR _bitset$[ebp], 0
	jne	SHORT $LN3@antlr3Bits@3
; Line 152
	xor	eax, eax
	jmp	SHORT $LN4@antlr3Bits@3
$LN3@antlr3Bits@3:
; Line 155
	mov	eax, DWORD PTR _blist$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _numElements$[ebp], ecx
; Line 159
	cmp	DWORD PTR _numElements$[ebp], 8
	jge	SHORT $LN2@antlr3Bits@3
; Line 161
	mov	DWORD PTR _numElements$[ebp], 8
$LN2@antlr3Bits@3:
; Line 166
	mov	eax, DWORD PTR _bitset$[ebp]
	mov	ecx, DWORD PTR _numElements$[ebp]
	mov	DWORD PTR [eax+4], ecx
; Line 168
	mov	eax, DWORD PTR _numElements$[ebp]
	shl	eax, 3
	mov	esi, esp
	push	eax
	call	DWORD PTR __imp__malloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _bitset$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 170
	mov	eax, DWORD PTR _bitset$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN1@antlr3Bits@3
; Line 172
	mov	esi, esp
	mov	eax, DWORD PTR _bitset$[ebp]
	push	eax
	call	DWORD PTR __imp__free
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 173
	xor	eax, eax
	jmp	SHORT $LN4@antlr3Bits@3
$LN1@antlr3Bits@3:
; Line 176
	mov	eax, DWORD PTR _numElements$[ebp]
	shl	eax, 3
	push	eax
	mov	ecx, DWORD PTR _blist$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _bitset$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 180
	mov	eax, DWORD PTR _bitset$[ebp]
$LN4@antlr3Bits@3:
; Line 181
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_antlr3BitsetCopy ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _antlr3BitsetClone
_TEXT	SEGMENT
_bitset$ = -8						; size = 4
_inSet$ = 8						; size = 4
_antlr3BitsetClone PROC					; COMDAT
; Line 185
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 190
	mov	eax, DWORD PTR _inSet$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	shl	ecx, 6
	push	ecx
	call	_antlr3BitsetNew
	add	esp, 4
	mov	DWORD PTR _bitset$[ebp], eax
; Line 192
	cmp	DWORD PTR _bitset$[ebp], 0
	jne	SHORT $LN1@antlr3Bits@4
; Line 194
	xor	eax, eax
	jmp	SHORT $LN2@antlr3Bits@4
$LN1@antlr3Bits@4:
; Line 199
	mov	eax, DWORD PTR _inSet$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	shl	ecx, 3
	push	ecx
	mov	edx, DWORD PTR _inSet$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _bitset$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 203
	mov	eax, DWORD PTR _bitset$[ebp]
$LN2@antlr3Bits@4:
; Line 204
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_antlr3BitsetClone ENDP
_TEXT	ENDS
PUBLIC	_antlr3BitsetList
EXTRN	_antlr3EnumNew:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _antlr3BitsetList
_TEXT	SEGMENT
_bit$ = -48						; size = 8
_key$ = -32						; size = 4
_en$ = -20						; size = 4
_bitSet$ = -8						; size = 4
_list$ = 8						; size = 4
_antlr3BitsetList PROC					; COMDAT
; Line 209
	push	ebp
	mov	ebp, esp
	sub	esp, 244				; 000000f4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 61					; 0000003dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 219
	push	0
	call	_antlr3BitsetNew
	add	esp, 4
	mov	DWORD PTR _bitSet$[ebp], eax
; Line 221
	mov	eax, DWORD PTR _list$[ebp]
	push	eax
	call	_antlr3EnumNew
	add	esp, 4
	mov	DWORD PTR _en$[ebp], eax
$LN2@antlr3Bits@5:
; Line 223
	mov	esi, esp
	lea	eax, DWORD PTR _bit$[ebp]
	push	eax
	lea	ecx, DWORD PTR _key$[ebp]
	push	ecx
	mov	edx, DWORD PTR _en$[ebp]
	push	edx
	mov	eax, DWORD PTR _en$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	call	ecx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN1@antlr3Bits@5
; Line 225
	mov	eax, DWORD PTR _bit$[ebp]
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _bitSet$[ebp]
	push	ecx
	mov	edx, DWORD PTR _bitSet$[ebp]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 226
	jmp	SHORT $LN2@antlr3Bits@5
$LN1@antlr3Bits@5:
; Line 227
	mov	esi, esp
	mov	eax, DWORD PTR _en$[ebp]
	push	eax
	mov	ecx, DWORD PTR _en$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 229
	xor	eax, eax
; Line 230
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@antlr3Bits@5
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN8@antlr3Bits@5:
	DD	2
	DD	$LN7@antlr3Bits@5
$LN7@antlr3Bits@5:
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN5@antlr3Bits@5
	DD	-48					; ffffffd0H
	DD	8
	DD	$LN6@antlr3Bits@5
$LN6@antlr3Bits@5:
	DB	98					; 00000062H
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	0
$LN5@antlr3Bits@5:
	DB	107					; 0000006bH
	DB	101					; 00000065H
	DB	121					; 00000079H
	DB	0
_antlr3BitsetList ENDP
_TEXT	ENDS
PUBLIC	_antlr3BitsetLoad
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _antlr3BitsetLoad
_TEXT	SEGMENT
_count$ = -20						; size = 4
_bitset$ = -8						; size = 4
_inBits$ = 8						; size = 4
_antlr3BitsetLoad PROC					; COMDAT
; Line 255
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 267
	push	0
	call	_antlr3BitsetNew
	add	esp, 4
	mov	DWORD PTR _bitset$[ebp], eax
; Line 269
	cmp	DWORD PTR _bitset$[ebp], 0
	jne	SHORT $LN5@antlr3Bits@6
; Line 271
	xor	eax, eax
	jmp	SHORT $LN6@antlr3Bits@6
$LN5@antlr3Bits@6:
; Line 274
	cmp	DWORD PTR _inBits$[ebp], 0
	je	SHORT $LN4@antlr3Bits@6
; Line 278
	mov	DWORD PTR _count$[ebp], 0
$LN3@antlr3Bits@6:
; Line 279
	mov	eax, DWORD PTR _inBits$[ebp]
	mov	ecx, DWORD PTR _count$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jae	SHORT $LN4@antlr3Bits@6
; Line 281
	mov	eax, DWORD PTR _bitset$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cmp	ecx, DWORD PTR _count$[ebp]
	ja	SHORT $LN1@antlr3Bits@6
; Line 283
	mov	eax, DWORD PTR _count$[ebp]
	add	eax, 1
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _bitset$[ebp]
	push	ecx
	mov	edx, DWORD PTR _bitset$[ebp]
	mov	eax, DWORD PTR [edx+28]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@antlr3Bits@6:
; Line 286
	mov	eax, DWORD PTR _inBits$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _bitset$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR _count$[ebp]
	mov	esi, DWORD PTR _count$[ebp]
	mov	edi, DWORD PTR [ecx+esi*8]
	mov	DWORD PTR [eax+edx*8], edi
	mov	ecx, DWORD PTR [ecx+esi*8+4]
	mov	DWORD PTR [eax+edx*8+4], ecx
; Line 287
	mov	eax, DWORD PTR _count$[ebp]
	add	eax, 1
	mov	DWORD PTR _count$[ebp], eax
; Line 288
	jmp	SHORT $LN3@antlr3Bits@6
$LN4@antlr3Bits@6:
; Line 293
	mov	eax, DWORD PTR _bitset$[ebp]
$LN6@antlr3Bits@6:
; Line 294
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_antlr3BitsetLoad ENDP
_TEXT	ENDS
PUBLIC	_antlr3BitsetOf
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _antlr3BitsetOf
_TEXT	SEGMENT
_ap$ = -20						; size = 4
_bitset$ = -8						; size = 4
_bit$ = 8						; size = 4
_antlr3BitsetOf PROC					; COMDAT
; Line 318
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 331
	push	0
	call	_antlr3BitsetNew
	add	esp, 4
	mov	DWORD PTR _bitset$[ebp], eax
; Line 333
	cmp	DWORD PTR _bitset$[ebp], 0
	jne	SHORT $LN3@antlr3Bits@7
; Line 335
	xor	eax, eax
	jmp	SHORT $LN4@antlr3Bits@7
$LN3@antlr3Bits@7:
; Line 340
	lea	eax, DWORD PTR _bit$[ebp+4]
	mov	DWORD PTR _ap$[ebp], eax
$LN2@antlr3Bits@7:
; Line 341
	cmp	DWORD PTR _bit$[ebp], -1
	je	SHORT $LN1@antlr3Bits@7
; Line 343
	mov	eax, DWORD PTR _bit$[ebp]
	push	eax
	mov	ecx, DWORD PTR _bitset$[ebp]
	push	ecx
	call	_antlr3BitsetAdd
	add	esp, 8
; Line 344
	mov	eax, DWORD PTR _ap$[ebp]
	add	eax, 4
	mov	DWORD PTR _ap$[ebp], eax
	mov	ecx, DWORD PTR _ap$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	mov	DWORD PTR _bit$[ebp], edx
; Line 345
	jmp	SHORT $LN2@antlr3Bits@7
$LN1@antlr3Bits@7:
; Line 346
	mov	DWORD PTR _ap$[ebp], 0
; Line 350
	mov	eax, DWORD PTR _bitset$[ebp]
$LN4@antlr3Bits@7:
; Line 351
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_antlr3BitsetOf ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _antlr3BitsetOR
_TEXT	SEGMENT
_bitset$ = -8						; size = 4
_bitset1$ = 8						; size = 4
_bitset2$ = 12						; size = 4
_antlr3BitsetOR PROC					; COMDAT
; Line 355
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 358
	cmp	DWORD PTR _bitset1$[ebp], 0
	jne	SHORT $LN2@antlr3Bits@8
; Line 360
	mov	eax, DWORD PTR _bitset2$[ebp]
	push	eax
	call	_antlr3BitsetClone
	add	esp, 4
	jmp	SHORT $LN3@antlr3Bits@8
$LN2@antlr3Bits@8:
; Line 363
	cmp	DWORD PTR _bitset2$[ebp], 0
	jne	SHORT $LN1@antlr3Bits@8
; Line 365
	mov	eax, DWORD PTR _bitset1$[ebp]
	push	eax
	call	_antlr3BitsetClone
	add	esp, 4
	jmp	SHORT $LN3@antlr3Bits@8
$LN1@antlr3Bits@8:
; Line 370
	mov	eax, DWORD PTR _bitset1$[ebp]
	push	eax
	call	_antlr3BitsetClone
	add	esp, 4
	mov	DWORD PTR _bitset$[ebp], eax
; Line 372
	mov	eax, DWORD PTR _bitset2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _bitset$[ebp]
	push	ecx
	call	_antlr3BitsetORInPlace
	add	esp, 8
; Line 374
	mov	eax, DWORD PTR _bitset$[ebp]
$LN3@antlr3Bits@8:
; Line 376
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_antlr3BitsetOR ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _antlr3BitsetAdd
_TEXT	SEGMENT
_word$ = -8						; size = 4
_bitset$ = 8						; size = 4
_bit$ = 12						; size = 4
_antlr3BitsetAdd PROC					; COMDAT
; Line 380
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 383
	mov	eax, DWORD PTR _bit$[ebp]
	push	eax
	call	_wordNumber
	add	esp, 4
	mov	DWORD PTR _word$[ebp], eax
; Line 385
	mov	eax, DWORD PTR _bitset$[ebp]
	mov	ecx, DWORD PTR _word$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jb	SHORT $LN1@antlr3Bits@9
; Line 387
	mov	eax, DWORD PTR _bit$[ebp]
	push	eax
	mov	ecx, DWORD PTR _bitset$[ebp]
	push	ecx
	call	_growToInclude
	add	esp, 8
$LN1@antlr3Bits@9:
; Line 390
	mov	eax, DWORD PTR _bitset$[ebp]
	mov	esi, DWORD PTR [eax]
	mov	ecx, DWORD PTR _bit$[ebp]
	push	ecx
	call	_bitMask
	add	esp, 4
	mov	ecx, DWORD PTR _word$[ebp]
	or	eax, DWORD PTR [esi+ecx*8]
	or	edx, DWORD PTR [esi+ecx*8+4]
	mov	ecx, DWORD PTR _bitset$[ebp]
	mov	ecx, DWORD PTR [ecx]
	mov	esi, DWORD PTR _word$[ebp]
	mov	DWORD PTR [ecx+esi*8], eax
	mov	DWORD PTR [ecx+esi*8+4], edx
; Line 392
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_antlr3BitsetAdd ENDP
_TEXT	ENDS
EXTRN	__imp__calloc:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _grow
_TEXT	SEGMENT
_newBits$ = -8						; size = 4
_bitset$ = 8						; size = 4
_newSize$ = 12						; size = 4
_grow	PROC						; COMDAT
; Line 396
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 402
	mov	eax, DWORD PTR _newSize$[ebp]
	shl	eax, 3
	mov	esi, esp
	push	eax
	push	1
	call	DWORD PTR __imp__calloc
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _newBits$[ebp], eax
; Line 403
	mov	eax, DWORD PTR _bitset$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN1@grow
; Line 407
	mov	eax, DWORD PTR _bitset$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	shl	ecx, 3
	push	ecx
	mov	edx, DWORD PTR _bitset$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _newBits$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 411
	mov	esi, esp
	mov	eax, DWORD PTR _bitset$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	DWORD PTR __imp__free
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@grow:
; Line 416
	mov	eax, DWORD PTR _bitset$[ebp]
	mov	ecx, DWORD PTR _newBits$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 417
	mov	eax, DWORD PTR _bitset$[ebp]
	mov	ecx, DWORD PTR _newSize$[ebp]
	mov	DWORD PTR [eax+4], ecx
; Line 418
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_grow	ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _growToInclude
_TEXT	SEGMENT
_nw$ = -20						; size = 4
_bl$ = -8						; size = 4
_bitset$ = 8						; size = 4
_bit$ = 12						; size = 4
_growToInclude PROC					; COMDAT
; Line 422
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 426
	mov	eax, DWORD PTR _bitset$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	shl	ecx, 1
	mov	DWORD PTR _bl$[ebp], ecx
; Line 427
	mov	eax, DWORD PTR _bit$[ebp]
	push	eax
	call	_numWordsToHold
	add	esp, 4
	mov	DWORD PTR _nw$[ebp], eax
; Line 429
	mov	eax, DWORD PTR _bl$[ebp]
	cmp	eax, DWORD PTR _nw$[ebp]
	jbe	SHORT $LN2@growToIncl
; Line 431
	mov	esi, esp
	mov	eax, DWORD PTR _bl$[ebp]
	push	eax
	mov	ecx, DWORD PTR _bitset$[ebp]
	push	ecx
	mov	edx, DWORD PTR _bitset$[ebp]
	mov	eax, DWORD PTR [edx+28]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 433
	jmp	SHORT $LN3@growToIncl
$LN2@growToIncl:
; Line 435
	mov	esi, esp
	mov	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _bitset$[ebp]
	push	ecx
	mov	edx, DWORD PTR _bitset$[ebp]
	mov	eax, DWORD PTR [edx+28]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@growToIncl:
; Line 437
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_growToInclude ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _antlr3BitsetORInPlace
_TEXT	SEGMENT
_i$ = -20						; size = 4
_minimum$ = -8						; size = 4
_bitset$ = 8						; size = 4
_bitset2$ = 12						; size = 4
_antlr3BitsetORInPlace PROC				; COMDAT
; Line 441
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 445
	cmp	DWORD PTR _bitset2$[ebp], 0
	jne	SHORT $LN7@antlr3Bits@10
; Line 447
	jmp	$LN8@antlr3Bits@10
$LN7@antlr3Bits@10:
; Line 454
	mov	eax, DWORD PTR _bitset$[ebp]
	mov	ecx, DWORD PTR _bitset2$[ebp]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+4]
	jae	SHORT $LN6@antlr3Bits@10
; Line 456
	mov	eax, DWORD PTR _bitset2$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	shl	ecx, 3
	push	ecx
	mov	edx, DWORD PTR _bitset$[ebp]
	push	edx
	call	_growToInclude
	add	esp, 8
$LN6@antlr3Bits@10:
; Line 461
	mov	eax, DWORD PTR _bitset$[ebp]
	mov	ecx, DWORD PTR _bitset2$[ebp]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+4]
	jae	SHORT $LN5@antlr3Bits@10
; Line 463
	mov	eax, DWORD PTR _bitset$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _minimum$[ebp], ecx
; Line 465
	jmp	SHORT $LN4@antlr3Bits@10
$LN5@antlr3Bits@10:
; Line 467
	mov	eax, DWORD PTR _bitset2$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _minimum$[ebp], ecx
$LN4@antlr3Bits@10:
; Line 470
	mov	eax, DWORD PTR _minimum$[ebp]
	mov	DWORD PTR _i$[ebp], eax
	jmp	SHORT $LN3@antlr3Bits@10
$LN2@antlr3Bits@10:
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@antlr3Bits@10:
	cmp	DWORD PTR _i$[ebp], 0
	jbe	SHORT $LN8@antlr3Bits@10
; Line 472
	mov	eax, DWORD PTR _bitset$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _bitset2$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR _i$[ebp]
	mov	edi, DWORD PTR [ecx+edx*8-8]
	or	edi, DWORD PTR [eax+esi*8-8]
	mov	ecx, DWORD PTR [ecx+edx*8-4]
	or	ecx, DWORD PTR [eax+esi*8-4]
	mov	edx, DWORD PTR _bitset$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [eax+edx*8-8], edi
	mov	DWORD PTR [eax+edx*8-4], ecx
; Line 473
	jmp	SHORT $LN2@antlr3Bits@10
$LN8@antlr3Bits@10:
; Line 474
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_antlr3BitsetORInPlace ENDP
_TEXT	ENDS
EXTRN	__allshl:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _bitMask
_TEXT	SEGMENT
_bitNumber$ = 8						; size = 4
_bitMask PROC						; COMDAT
; Line 478
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 479
	mov	ecx, DWORD PTR _bitNumber$[ebp]
	and	ecx, 63					; 0000003fH
	mov	eax, 1
	xor	edx, edx
	call	__allshl
; Line 480
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_bitMask ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _antlr3BitsetSize
_TEXT	SEGMENT
tv145 = -236						; size = 8
tv89 = -236						; size = 4
tv88 = -232						; size = 4
_bit$ = -29						; size = 1
_i$ = -20						; size = 4
_degree$ = -8						; size = 4
_bitset$ = 8						; size = 4
_antlr3BitsetSize PROC					; COMDAT
; Line 484
	push	ebp
	mov	ebp, esp
	sub	esp, 236				; 000000ecH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-236]
	mov	ecx, 59					; 0000003bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 494
	mov	DWORD PTR _degree$[ebp], 0
; Line 495
	mov	eax, DWORD PTR _bitset$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
	jmp	SHORT $LN8@antlr3Bits@11
$LN7@antlr3Bits@11:
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN8@antlr3Bits@11:
	cmp	DWORD PTR _i$[ebp], 0
	jl	$LN6@antlr3Bits@11
; Line 497
	mov	eax, DWORD PTR _bitset$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _i$[ebp]
	mov	DWORD PTR tv88[ebp], ecx
	mov	DWORD PTR tv89[ebp], edx
	mov	eax, DWORD PTR tv89[ebp]
	mov	ecx, DWORD PTR tv88[ebp]
	mov	edx, DWORD PTR tv89[ebp]
	mov	esi, DWORD PTR tv88[ebp]
	mov	eax, DWORD PTR [ecx+eax*8]
	or	eax, DWORD PTR [esi+edx*8+4]
	je	SHORT $LN5@antlr3Bits@11
; Line 499
	mov	BYTE PTR _bit$[ebp], 63			; 0000003fH
	jmp	SHORT $LN4@antlr3Bits@11
$LN3@antlr3Bits@11:
	mov	al, BYTE PTR _bit$[ebp]
	sub	al, 1
	mov	BYTE PTR _bit$[ebp], al
$LN4@antlr3Bits@11:
	movsx	eax, BYTE PTR _bit$[ebp]
	test	eax, eax
	jl	SHORT $LN5@antlr3Bits@11
; Line 501
	mov	eax, DWORD PTR _bitset$[ebp]
	mov	esi, DWORD PTR [eax]
	movsx	ecx, BYTE PTR _bit$[ebp]
	mov	eax, 1
	xor	edx, edx
	call	__allshl
	mov	ecx, DWORD PTR _i$[ebp]
	and	eax, DWORD PTR [esi+ecx*8]
	and	edx, DWORD PTR [esi+ecx*8+4]
	mov	DWORD PTR tv145[ebp], eax
	mov	DWORD PTR tv145[ebp+4], edx
	mov	edx, DWORD PTR tv145[ebp]
	or	edx, DWORD PTR tv145[ebp+4]
	je	SHORT $LN1@antlr3Bits@11
; Line 503
	mov	eax, DWORD PTR _degree$[ebp]
	add	eax, 1
	mov	DWORD PTR _degree$[ebp], eax
$LN1@antlr3Bits@11:
; Line 505
	jmp	SHORT $LN3@antlr3Bits@11
$LN5@antlr3Bits@11:
; Line 507
	jmp	$LN7@antlr3Bits@11
$LN6@antlr3Bits@11:
; Line 508
	mov	eax, DWORD PTR _degree$[ebp]
; Line 509
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 236				; 000000ecH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_antlr3BitsetSize ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _antlr3BitsetEquals
_TEXT	SEGMENT
tv148 = -232						; size = 4
tv147 = -228						; size = 4
tv188 = -224						; size = 4
tv170 = -224						; size = 4
tv146 = -224						; size = 4
tv187 = -220						; size = 4
tv169 = -220						; size = 4
tv145 = -220						; size = 4
_i$ = -20						; size = 4
_minimum$ = -8						; size = 4
_bitset1$ = 8						; size = 4
_bitset2$ = 12						; size = 4
_antlr3BitsetEquals PROC				; COMDAT
; Line 513
	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 517
	cmp	DWORD PTR _bitset1$[ebp], 0
	je	SHORT $LN18@antlr3Bits@12
	cmp	DWORD PTR _bitset2$[ebp], 0
	jne	SHORT $LN19@antlr3Bits@12
$LN18@antlr3Bits@12:
; Line 519
	xor	al, al
	jmp	$LN20@antlr3Bits@12
$LN19@antlr3Bits@12:
; Line 524
	mov	eax, DWORD PTR _bitset1$[ebp]
	mov	ecx, DWORD PTR _bitset2$[ebp]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+4]
	jae	SHORT $LN17@antlr3Bits@12
; Line 526
	mov	eax, DWORD PTR _bitset1$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _minimum$[ebp], ecx
; Line 528
	jmp	SHORT $LN16@antlr3Bits@12
$LN17@antlr3Bits@12:
; Line 530
	mov	eax, DWORD PTR _bitset2$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _minimum$[ebp], ecx
$LN16@antlr3Bits@12:
; Line 535
	mov	eax, DWORD PTR _minimum$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	jmp	SHORT $LN15@antlr3Bits@12
$LN14@antlr3Bits@12:
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN15@antlr3Bits@12:
	cmp	DWORD PTR _i$[ebp], 0
	jl	SHORT $LN13@antlr3Bits@12
; Line 537
	mov	eax, DWORD PTR _bitset1$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _bitset2$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR _i$[ebp]
	mov	DWORD PTR tv145[ebp], ecx
	mov	DWORD PTR tv146[ebp], edx
	mov	DWORD PTR tv147[ebp], eax
	mov	DWORD PTR tv148[ebp], esi
	mov	eax, DWORD PTR tv146[ebp]
	mov	ecx, DWORD PTR tv145[ebp]
	mov	edx, DWORD PTR tv148[ebp]
	mov	esi, DWORD PTR tv147[ebp]
	mov	eax, DWORD PTR [ecx+eax*8]
	cmp	eax, DWORD PTR [esi+edx*8]
	jne	SHORT $LN22@antlr3Bits@12
	mov	ecx, DWORD PTR tv146[ebp]
	mov	edx, DWORD PTR tv145[ebp]
	mov	eax, DWORD PTR tv148[ebp]
	mov	esi, DWORD PTR tv147[ebp]
	mov	ecx, DWORD PTR [edx+ecx*8+4]
	cmp	ecx, DWORD PTR [esi+eax*8+4]
	je	SHORT $LN12@antlr3Bits@12
$LN22@antlr3Bits@12:
; Line 539
	xor	al, al
	jmp	$LN20@antlr3Bits@12
$LN12@antlr3Bits@12:
; Line 541
	jmp	$LN14@antlr3Bits@12
$LN13@antlr3Bits@12:
; Line 546
	mov	eax, DWORD PTR _bitset1$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cmp	ecx, DWORD PTR _minimum$[ebp]
	jbe	SHORT $LN11@antlr3Bits@12
; Line 548
	mov	eax, DWORD PTR _minimum$[ebp]
	mov	DWORD PTR _i$[ebp], eax
	jmp	SHORT $LN10@antlr3Bits@12
$LN9@antlr3Bits@12:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN10@antlr3Bits@12:
	mov	eax, DWORD PTR _bitset1$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jae	SHORT $LN8@antlr3Bits@12
; Line 550
	mov	eax, DWORD PTR _bitset1$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _i$[ebp]
	mov	DWORD PTR tv169[ebp], ecx
	mov	DWORD PTR tv170[ebp], edx
	mov	eax, DWORD PTR tv170[ebp]
	mov	ecx, DWORD PTR tv169[ebp]
	mov	edx, DWORD PTR tv170[ebp]
	mov	esi, DWORD PTR tv169[ebp]
	mov	eax, DWORD PTR [ecx+eax*8]
	or	eax, DWORD PTR [esi+edx*8+4]
	je	SHORT $LN7@antlr3Bits@12
; Line 552
	xor	al, al
	jmp	SHORT $LN20@antlr3Bits@12
$LN7@antlr3Bits@12:
; Line 554
	jmp	SHORT $LN9@antlr3Bits@12
$LN8@antlr3Bits@12:
; Line 556
	jmp	SHORT $LN6@antlr3Bits@12
$LN11@antlr3Bits@12:
	mov	eax, DWORD PTR _bitset2$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cmp	ecx, DWORD PTR _minimum$[ebp]
	jbe	SHORT $LN6@antlr3Bits@12
; Line 558
	mov	eax, DWORD PTR _minimum$[ebp]
	mov	DWORD PTR _i$[ebp], eax
	jmp	SHORT $LN4@antlr3Bits@12
$LN3@antlr3Bits@12:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@antlr3Bits@12:
	mov	eax, DWORD PTR _bitset2$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jae	SHORT $LN6@antlr3Bits@12
; Line 560
	mov	eax, DWORD PTR _bitset2$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _i$[ebp]
	mov	DWORD PTR tv187[ebp], ecx
	mov	DWORD PTR tv188[ebp], edx
	mov	eax, DWORD PTR tv188[ebp]
	mov	ecx, DWORD PTR tv187[ebp]
	mov	edx, DWORD PTR tv188[ebp]
	mov	esi, DWORD PTR tv187[ebp]
	mov	eax, DWORD PTR [ecx+eax*8]
	or	eax, DWORD PTR [esi+edx*8+4]
	je	SHORT $LN1@antlr3Bits@12
; Line 562
	xor	al, al
	jmp	SHORT $LN20@antlr3Bits@12
$LN1@antlr3Bits@12:
; Line 564
	jmp	SHORT $LN3@antlr3Bits@12
$LN6@antlr3Bits@12:
; Line 567
	mov	al, 1
$LN20@antlr3Bits@12:
; Line 568
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_antlr3BitsetEquals ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _antlr3BitsetMember
_TEXT	SEGMENT
tv92 = -212						; size = 8
_wordNo$ = -8						; size = 4
_bitset$ = 8						; size = 4
_bit$ = 12						; size = 4
_antlr3BitsetMember PROC				; COMDAT
; Line 572
	push	ebp
	mov	ebp, esp
	sub	esp, 212				; 000000d4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-212]
	mov	ecx, 53					; 00000035H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 575
	mov	eax, DWORD PTR _bit$[ebp]
	push	eax
	call	_wordNumber
	add	esp, 4
	mov	DWORD PTR _wordNo$[ebp], eax
; Line 577
	mov	eax, DWORD PTR _bitset$[ebp]
	mov	ecx, DWORD PTR _wordNo$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jb	SHORT $LN3@antlr3Bits@13
; Line 579
	xor	al, al
	jmp	SHORT $LN4@antlr3Bits@13
$LN3@antlr3Bits@13:
; Line 582
	mov	eax, DWORD PTR _bitset$[ebp]
	mov	esi, DWORD PTR [eax]
	mov	ecx, DWORD PTR _bit$[ebp]
	push	ecx
	call	_bitMask
	add	esp, 4
	mov	ecx, DWORD PTR _wordNo$[ebp]
	and	eax, DWORD PTR [esi+ecx*8]
	and	edx, DWORD PTR [esi+ecx*8+4]
	mov	DWORD PTR tv92[ebp], eax
	mov	DWORD PTR tv92[ebp+4], edx
	mov	edx, DWORD PTR tv92[ebp]
	or	edx, DWORD PTR tv92[ebp+4]
	jne	SHORT $LN2@antlr3Bits@13
; Line 584
	xor	al, al
	jmp	SHORT $LN4@antlr3Bits@13
; Line 586
	jmp	SHORT $LN4@antlr3Bits@13
$LN2@antlr3Bits@13:
; Line 588
	mov	al, 1
$LN4@antlr3Bits@13:
; Line 590
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 212				; 000000d4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_antlr3BitsetMember ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _antlr3BitsetRemove
_TEXT	SEGMENT
_wordNo$ = -8						; size = 4
_bitset$ = 8						; size = 4
_bit$ = 12						; size = 4
_antlr3BitsetRemove PROC				; COMDAT
; Line 594
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 597
	mov	eax, DWORD PTR _bit$[ebp]
	push	eax
	call	_wordNumber
	add	esp, 4
	mov	DWORD PTR _wordNo$[ebp], eax
; Line 599
	mov	eax, DWORD PTR _bitset$[ebp]
	mov	ecx, DWORD PTR _wordNo$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jae	SHORT $LN2@antlr3Bits@14
; Line 601
	mov	eax, DWORD PTR _bitset$[ebp]
	mov	esi, DWORD PTR [eax]
	mov	ecx, DWORD PTR _bit$[ebp]
	push	ecx
	call	_bitMask
	add	esp, 4
	not	eax
	not	edx
	mov	ecx, DWORD PTR _wordNo$[ebp]
	and	eax, DWORD PTR [esi+ecx*8]
	and	edx, DWORD PTR [esi+ecx*8+4]
	mov	ecx, DWORD PTR _bitset$[ebp]
	mov	ecx, DWORD PTR [ecx]
	mov	esi, DWORD PTR _wordNo$[ebp]
	mov	DWORD PTR [ecx+esi*8], eax
	mov	DWORD PTR [ecx+esi*8+4], edx
$LN2@antlr3Bits@14:
; Line 603
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_antlr3BitsetRemove ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _antlr3BitsetIsNil
_TEXT	SEGMENT
tv78 = -212						; size = 4
tv77 = -208						; size = 4
_i$ = -8						; size = 4
_bitset$ = 8						; size = 4
_antlr3BitsetIsNil PROC					; COMDAT
; Line 606
	push	ebp
	mov	ebp, esp
	sub	esp, 212				; 000000d4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-212]
	mov	ecx, 53					; 00000035H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 609
	mov	eax, DWORD PTR _bitset$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
	jmp	SHORT $LN4@antlr3Bits@15
$LN3@antlr3Bits@15:
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@antlr3Bits@15:
	cmp	DWORD PTR _i$[ebp], 0
	jl	SHORT $LN2@antlr3Bits@15
; Line 611
	mov	eax, DWORD PTR _bitset$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _i$[ebp]
	mov	DWORD PTR tv77[ebp], ecx
	mov	DWORD PTR tv78[ebp], edx
	mov	eax, DWORD PTR tv78[ebp]
	mov	ecx, DWORD PTR tv77[ebp]
	mov	edx, DWORD PTR tv78[ebp]
	mov	esi, DWORD PTR tv77[ebp]
	mov	eax, DWORD PTR [ecx+eax*8]
	or	eax, DWORD PTR [esi+edx*8+4]
	je	SHORT $LN1@antlr3Bits@15
; Line 613
	xor	al, al
	jmp	SHORT $LN5@antlr3Bits@15
$LN1@antlr3Bits@15:
; Line 615
	jmp	SHORT $LN3@antlr3Bits@15
$LN2@antlr3Bits@15:
; Line 617
	mov	al, 1
$LN5@antlr3Bits@15:
; Line 618
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_antlr3BitsetIsNil ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _numWordsToHold
_TEXT	SEGMENT
_bit$ = 8						; size = 4
_numWordsToHold PROC					; COMDAT
; Line 622
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 623
	mov	eax, DWORD PTR _bit$[ebp]
	shr	eax, 6
	add	eax, 1
; Line 624
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_numWordsToHold ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _wordNumber
_TEXT	SEGMENT
_bit$ = 8						; size = 4
_wordNumber PROC					; COMDAT
; Line 628
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 629
	mov	eax, DWORD PTR _bit$[ebp]
	shr	eax, 6
; Line 630
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_wordNumber ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _antlr3BitsetNumBits
_TEXT	SEGMENT
_bitset$ = 8						; size = 4
_antlr3BitsetNumBits PROC				; COMDAT
; Line 634
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 635
	mov	eax, DWORD PTR _bitset$[ebp]
	mov	eax, DWORD PTR [eax+4]
	shl	eax, 6
; Line 636
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_antlr3BitsetNumBits ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _antlr3BitsetToIntList
_TEXT	SEGMENT
_intList$ = -56						; size = 4
_index$ = -44						; size = 4
_i$ = -32						; size = 4
_numBits$ = -20						; size = 4
_numInts$ = -8						; size = 4
_bitset$ = 8						; size = 4
_antlr3BitsetToIntList PROC				; COMDAT
; Line 647
	push	ebp
	mov	ebp, esp
	sub	esp, 252				; 000000fcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-252]
	mov	ecx, 63					; 0000003fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 655
	mov	esi, esp
	mov	eax, DWORD PTR _bitset$[ebp]
	push	eax
	mov	ecx, DWORD PTR _bitset$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	add	eax, 1
	mov	DWORD PTR _numInts$[ebp], eax
; Line 656
	mov	esi, esp
	mov	eax, DWORD PTR _bitset$[ebp]
	push	eax
	mov	ecx, DWORD PTR _bitset$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _numBits$[ebp], eax
; Line 658
	mov	eax, DWORD PTR _numInts$[ebp]
	shl	eax, 2
	mov	esi, esp
	push	eax
	call	DWORD PTR __imp__malloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _intList$[ebp], eax
; Line 660
	cmp	DWORD PTR _intList$[ebp], 0
	jne	SHORT $LN5@antlr3Bits@16
; Line 662
	xor	eax, eax
	jmp	SHORT $LN6@antlr3Bits@16
$LN5@antlr3Bits@16:
; Line 665
	mov	eax, DWORD PTR _intList$[ebp]
	mov	ecx, DWORD PTR _numInts$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 669
	mov	DWORD PTR _i$[ebp], 0
	mov	DWORD PTR _index$[ebp], 1
	jmp	SHORT $LN4@antlr3Bits@16
$LN3@antlr3Bits@16:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@antlr3Bits@16:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _numBits$[ebp]
	jae	SHORT $LN2@antlr3Bits@16
; Line 671
	mov	esi, esp
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _bitset$[ebp]
	push	ecx
	mov	edx, DWORD PTR _bitset$[ebp]
	mov	eax, DWORD PTR [edx+36]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	movzx	ecx, al
	cmp	ecx, 1
	jne	SHORT $LN1@antlr3Bits@16
; Line 673
	mov	eax, DWORD PTR _index$[ebp]
	mov	ecx, DWORD PTR _intList$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [ecx+eax*4], edx
	mov	eax, DWORD PTR _index$[ebp]
	add	eax, 1
	mov	DWORD PTR _index$[ebp], eax
$LN1@antlr3Bits@16:
; Line 675
	jmp	SHORT $LN3@antlr3Bits@16
$LN2@antlr3Bits@16:
; Line 679
	mov	eax, DWORD PTR _intList$[ebp]
$LN6@antlr3Bits@16:
; Line 680
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 252				; 000000fcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_antlr3BitsetToIntList ENDP
_TEXT	ENDS
END
