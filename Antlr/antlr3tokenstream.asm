; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\Users\pa\repos\spengine\Antlr\antlr3tokenstream.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_antlr3TokenStreamNew
EXTRN	__imp__malloc:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\users\pa\repos\spengine\antlr\antlr3tokenstream.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT _antlr3TokenStreamNew
_TEXT	SEGMENT
_stream$ = -8						; size = 4
_antlr3TokenStreamNew PROC				; COMDAT
; Line 94
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 99
	mov	esi, esp
	push	56					; 00000038H
	call	DWORD PTR __imp__malloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _stream$[ebp], eax
; Line 101
	cmp	DWORD PTR _stream$[ebp], 0
	jne	SHORT $LN1@antlr3Toke
; Line 103
	xor	eax, eax
	jmp	SHORT $LN2@antlr3Toke
$LN1@antlr3Toke:
; Line 108
	mov	eax, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [eax+52], OFFSET _antlr3TokenStreamFree
; Line 111
	mov	eax, DWORD PTR _stream$[ebp]
$LN2@antlr3Toke:
; Line 112
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_antlr3TokenStreamNew ENDP
_TEXT	ENDS
EXTRN	__imp__free:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _antlr3TokenStreamFree
_TEXT	SEGMENT
_stream$ = 8						; size = 4
_antlr3TokenStreamFree PROC				; COMDAT
; Line 116
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 117
	mov	esi, esp
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	DWORD PTR __imp__free
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 118
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_antlr3TokenStreamFree ENDP
_TEXT	ENDS
PUBLIC	_antlr3CommonTokenStreamSourceNew
PUBLIC	_antlr3CommonTokenDebugStreamSourceNew
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _antlr3CommonTokenDebugStreamSourceNew
_TEXT	SEGMENT
_stream$ = -8						; size = 4
_hint$ = 8						; size = 4
_source$ = 12						; size = 4
_debugger$ = 16						; size = 4
_antlr3CommonTokenDebugStreamSourceNew PROC		; COMDAT
; Line 207
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 212
	mov	eax, DWORD PTR _source$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hint$[ebp]
	push	ecx
	call	_antlr3CommonTokenStreamSourceNew
	add	esp, 8
	mov	DWORD PTR _stream$[ebp], eax
; Line 216
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _debugger$[ebp]
	mov	DWORD PTR [ecx+12], edx
; Line 220
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	BYTE PTR [ecx+16], 0
; Line 222
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [ecx+20], OFFSET _dbgTokLT
; Line 224
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+20], OFFSET _dbgConsume
; Line 225
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+24], OFFSET _dbgLA
; Line 226
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+28], OFFSET _dbgMark
; Line 227
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+36], OFFSET _dbgRewindStream
; Line 228
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+40], OFFSET _dbgRewindLast
; Line 229
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+48], OFFSET _dbgSeek
; Line 231
	mov	eax, DWORD PTR _stream$[ebp]
; Line 232
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_antlr3CommonTokenDebugStreamSourceNew ENDP
_TEXT	ENDS
PUBLIC	_antlr3CommonTokenStreamNew
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _antlr3CommonTokenStreamSourceNew
_TEXT	SEGMENT
_stream$ = -8						; size = 4
_hint$ = 8						; size = 4
_source$ = 12						; size = 4
_antlr3CommonTokenStreamSourceNew PROC			; COMDAT
; Line 236
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 239
	mov	eax, DWORD PTR _hint$[ebp]
	push	eax
	call	_antlr3CommonTokenStreamNew
	add	esp, 4
	mov	DWORD PTR _stream$[ebp], eax
; Line 241
	mov	eax, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [eax+20], 0
; Line 243
	mov	eax, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [eax+12], 0
; Line 244
	mov	eax, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [eax+16], 0
; Line 245
	mov	eax, DWORD PTR _stream$[ebp]
	mov	BYTE PTR [eax+24], 0
; Line 247
	mov	esi, esp
	mov	eax, DWORD PTR _source$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+32]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 249
	mov	eax, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [eax+68], OFFSET _antlr3CTSFree
; Line 250
	mov	eax, DWORD PTR _stream$[ebp]
; Line 251
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_antlr3CommonTokenStreamSourceNew ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _antlr3CTSFree
_TEXT	SEGMENT
_stream$ = 8						; size = 4
_antlr3CTSFree PROC					; COMDAT
; Line 122
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 126
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+4]
	cmp	edx, DWORD PTR _stream$[ebp]
	jne	SHORT $LN5@antlr3CTSF
; Line 128
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	cmp	ecx, DWORD PTR [eax]
	jne	SHORT $LN4@antlr3CTSF
; Line 130
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [edx+60]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 131
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [ecx+8], 0
$LN4@antlr3CTSF:
; Line 133
	mov	esi, esp
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+52]
	call	ecx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN5@antlr3CTSF:
; Line 138
	mov	eax, DWORD PTR _stream$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN3@antlr3CTSF
; Line 140
	mov	esi, esp
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [eax+144]
	call	ecx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 141
	mov	eax, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [eax+8], 0
$LN3@antlr3CTSF:
; Line 143
	mov	eax, DWORD PTR _stream$[ebp]
	cmp	DWORD PTR [eax+16], 0
	je	SHORT $LN2@antlr3CTSF
; Line 145
	mov	esi, esp
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR [eax+4]
	call	ecx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 146
	mov	eax, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [eax+16], 0
$LN2@antlr3CTSF:
; Line 148
	mov	eax, DWORD PTR _stream$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN1@antlr3CTSF
; Line 150
	mov	esi, esp
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax+4]
	call	ecx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 151
	mov	eax, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [eax+12], 0
$LN1@antlr3CTSF:
; Line 156
	mov	esi, esp
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	DWORD PTR __imp__free
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 157
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_antlr3CTSFree ENDP
_TEXT	ENDS
EXTRN	_antlr3VectorNew:PROC
EXTRN	_antlr3IntStreamNew:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _antlr3CommonTokenStreamNew
_TEXT	SEGMENT
_stream$ = -8						; size = 4
_hint$ = 8						; size = 4
_antlr3CommonTokenStreamNew PROC			; COMDAT
; Line 255
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 260
	mov	esi, esp
	push	72					; 00000048H
	call	DWORD PTR __imp__malloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _stream$[ebp], eax
; Line 262
	cmp	DWORD PTR _stream$[ebp], 0
	jne	SHORT $LN1@antlr3Comm
; Line 264
	xor	eax, eax
	jmp	$LN2@antlr3Comm
$LN1@antlr3Comm:
; Line 269
	call	_antlr3TokenStreamNew
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 270
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [ecx+4], edx
; Line 274
	call	_antlr3IntStreamNew
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [edx+8], eax
; Line 275
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx+8], ecx
; Line 276
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx], 2
; Line 280
	push	0
	call	_antlr3VectorNew
	add	esp, 4
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [ecx+8], eax
; Line 284
	mov	eax, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [eax+28], -1
; Line 288
	mov	eax, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [eax+32], OFFSET _setTokenTypeChannel
; Line 289
	mov	eax, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [eax+36], OFFSET _discardTokenType
; Line 290
	mov	eax, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [eax+40], OFFSET _discardOffChannel
; Line 291
	mov	eax, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [eax+44], OFFSET _getTokens
; Line 292
	mov	eax, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [eax+48], OFFSET _getTokenRange
; Line 293
	mov	eax, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [eax+52], OFFSET _getTokensSet
; Line 294
	mov	eax, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [eax+56], OFFSET _getTokensList
; Line 295
	mov	eax, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [eax+60], OFFSET _getTokensType
; Line 296
	mov	eax, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [eax+64], OFFSET _reset
; Line 300
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [ecx+20], OFFSET _tokLT
; Line 301
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [ecx+24], OFFSET _get
; Line 302
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [ecx+28], OFFSET _getTokenSource
; Line 303
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [ecx+32], OFFSET _setTokenSource
; Line 304
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [ecx+36], OFFSET _toString
; Line 305
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [ecx+40], OFFSET _toStringSS
; Line 306
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [ecx+44], OFFSET _toStringTT
; Line 307
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [ecx+48], OFFSET _setDebugListener
; Line 311
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+24], OFFSET __LA
; Line 312
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+28], OFFSET _mark
; Line 313
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+44], OFFSET _release
; Line 314
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+52], OFFSET _size
; Line 315
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+32], OFFSET _tindex
; Line 316
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+36], OFFSET _rewindStream
; Line 317
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+40], OFFSET _rewindLast
; Line 318
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+48], OFFSET _seek
; Line 319
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+20], OFFSET _consume
; Line 320
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+16], OFFSET _getSourceName
; Line 322
	mov	eax, DWORD PTR _stream$[ebp]
$LN2@antlr3Comm:
; Line 323
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_antlr3CommonTokenStreamNew ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _reset
_TEXT	SEGMENT
_cts$ = 8						; size = 4
_reset	PROC						; COMDAT
; Line 164
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 169
	mov	eax, DWORD PTR _cts$[ebp]
	cmp	DWORD PTR [eax+16], 0
	je	SHORT $LN4@reset
; Line 171
	mov	esi, esp
	mov	eax, DWORD PTR _cts$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR _cts$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR [eax+4]
	call	ecx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 172
	mov	eax, DWORD PTR _cts$[ebp]
	mov	DWORD PTR [eax+16], 0
$LN4@reset:
; Line 174
	mov	eax, DWORD PTR _cts$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN3@reset
; Line 176
	mov	esi, esp
	mov	eax, DWORD PTR _cts$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _cts$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax+4]
	call	ecx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 177
	mov	eax, DWORD PTR _cts$[ebp]
	mov	DWORD PTR [eax+12], 0
$LN3@reset:
; Line 187
	mov	eax, DWORD PTR _cts$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN2@reset
; Line 189
	mov	esi, esp
	mov	eax, DWORD PTR _cts$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _cts$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [eax+160]
	call	ecx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 191
	jmp	SHORT $LN1@reset
$LN2@reset:
; Line 195
	push	0
	call	_antlr3VectorNew
	add	esp, 4
	mov	ecx, DWORD PTR _cts$[ebp]
	mov	DWORD PTR [ecx+8], eax
$LN1@reset:
; Line 200
	mov	eax, DWORD PTR _cts$[ebp]
	mov	BYTE PTR [eax+24], 0
; Line 201
	mov	eax, DWORD PTR _cts$[ebp]
	mov	DWORD PTR [eax+20], 0
; Line 202
	mov	eax, DWORD PTR _cts$[ebp]
	mov	DWORD PTR [eax+28], -1
; Line 203
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_reset	ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _setDebugListener
_TEXT	SEGMENT
_ts$ = 8						; size = 4
_debugger$ = 12						; size = 4
_setDebugListener PROC					; COMDAT
; Line 329
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 332
	mov	eax, DWORD PTR _ts$[ebp]
	mov	ecx, DWORD PTR _debugger$[ebp]
	mov	DWORD PTR [eax+12], ecx
; Line 336
	mov	eax, DWORD PTR _ts$[ebp]
	mov	BYTE PTR [eax+16], 0
; Line 338
	mov	eax, DWORD PTR _ts$[ebp]
	mov	DWORD PTR [eax+20], OFFSET _dbgTokLT
; Line 340
	mov	eax, DWORD PTR _ts$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+20], OFFSET _dbgConsume
; Line 341
	mov	eax, DWORD PTR _ts$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+24], OFFSET _dbgLA
; Line 342
	mov	eax, DWORD PTR _ts$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+28], OFFSET _dbgMark
; Line 343
	mov	eax, DWORD PTR _ts$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+36], OFFSET _dbgRewindStream
; Line 344
	mov	eax, DWORD PTR _ts$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+40], OFFSET _dbgRewindLast
; Line 345
	mov	eax, DWORD PTR _ts$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+48], OFFSET _dbgSeek
; Line 346
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_setDebugListener ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _tokLT
_TEXT	SEGMENT
_teof$35386 = -56					; size = 4
_teof$35380 = -44					; size = 4
_cts$ = -32						; size = 4
_n$ = -20						; size = 4
_i$ = -8						; size = 4
_ts$ = 8						; size = 4
_k$ = 12						; size = 4
_tokLT	PROC						; COMDAT
; Line 353
	push	ebp
	mov	ebp, esp
	sub	esp, 252				; 000000fcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-252]
	mov	ecx, 63					; 0000003fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 358
	mov	eax, DWORD PTR _ts$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _cts$[ebp], ecx
; Line 360
	cmp	DWORD PTR _k$[ebp], 0
	jge	SHORT $LN6@tokLT
; Line 362
	mov	eax, DWORD PTR _k$[ebp]
	neg	eax
	push	eax
	mov	ecx, DWORD PTR _cts$[ebp]
	push	ecx
	call	_LB
	add	esp, 8
	jmp	$LN7@tokLT
$LN6@tokLT:
; Line 365
	mov	eax, DWORD PTR _cts$[ebp]
	cmp	DWORD PTR [eax+28], -1
	jne	SHORT $LN5@tokLT
; Line 367
	mov	eax, DWORD PTR _cts$[ebp]
	push	eax
	call	_fillBuffer
	add	esp, 4
$LN5@tokLT:
; Line 375
	mov	eax, DWORD PTR _cts$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR _k$[ebp]
	lea	eax, DWORD PTR [ecx+edx-1]
	mov	ecx, DWORD PTR _ts$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	cmp	eax, DWORD PTR [edx+56]
	jl	$LN4@tokLT
; Line 377
	mov	eax, DWORD PTR _ts$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 8
	mov	DWORD PTR _teof$35380[ebp], ecx
; Line 379
	mov	esi, esp
	mov	eax, DWORD PTR _ts$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _ts$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [eax+32]
	call	ecx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR _teof$35380[ebp]
	push	edx
	mov	eax, DWORD PTR _teof$35380[ebp]
	mov	ecx, DWORD PTR [eax+128]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 380
	mov	esi, esp
	mov	eax, DWORD PTR _ts$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _ts$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [eax+32]
	call	ecx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR _teof$35380[ebp]
	push	edx
	mov	eax, DWORD PTR _teof$35380[ebp]
	mov	ecx, DWORD PTR [eax+136]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 381
	mov	eax, DWORD PTR _teof$35380[ebp]
	jmp	$LN7@tokLT
$LN4@tokLT:
; Line 384
	mov	eax, DWORD PTR _cts$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _i$[ebp], ecx
; Line 385
	mov	DWORD PTR _n$[ebp], 1
$LN3@tokLT:
; Line 389
	mov	eax, DWORD PTR _n$[ebp]
	cmp	eax, DWORD PTR _k$[ebp]
	jge	SHORT $LN2@tokLT
; Line 392
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _cts$[ebp]
	push	ecx
	call	_skipOffTokenChannels
	add	esp, 8
	mov	DWORD PTR _i$[ebp], eax
; Line 393
	mov	eax, DWORD PTR _n$[ebp]
	add	eax, 1
	mov	DWORD PTR _n$[ebp], eax
; Line 394
	jmp	SHORT $LN3@tokLT
$LN2@tokLT:
; Line 395
	mov	eax, DWORD PTR _ts$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR [ecx+56]
	jb	$LN1@tokLT
; Line 397
	mov	eax, DWORD PTR _ts$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 8
	mov	DWORD PTR _teof$35386[ebp], ecx
; Line 399
	mov	esi, esp
	mov	eax, DWORD PTR _ts$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _ts$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [eax+32]
	call	ecx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR _teof$35386[ebp]
	push	edx
	mov	eax, DWORD PTR _teof$35386[ebp]
	mov	ecx, DWORD PTR [eax+128]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 400
	mov	esi, esp
	mov	eax, DWORD PTR _ts$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _ts$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [eax+32]
	call	ecx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR _teof$35386[ebp]
	push	edx
	mov	eax, DWORD PTR _teof$35386[ebp]
	mov	ecx, DWORD PTR [eax+136]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 401
	mov	eax, DWORD PTR _teof$35386[ebp]
	jmp	SHORT $LN7@tokLT
$LN1@tokLT:
; Line 408
	mov	eax, DWORD PTR _cts$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR [edx+eax*8]
$LN7@tokLT:
; Line 410
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 252				; 000000fcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_tokLT	ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _dbgTokLT
_TEXT	SEGMENT
_ts$ = 8						; size = 4
_k$ = 12						; size = 4
_dbgTokLT PROC						; COMDAT
; Line 438
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 439
	mov	eax, DWORD PTR _ts$[ebp]
	movzx	ecx, BYTE PTR [eax+16]
	cmp	ecx, 1
	jne	SHORT $LN1@dbgTokLT
; Line 441
	mov	eax, DWORD PTR _ts$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_consumeInitialHiddenTokens
	add	esp, 4
$LN1@dbgTokLT:
; Line 443
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ts$[ebp]
	push	ecx
	call	_tokLT
	add	esp, 8
; Line 444
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_dbgTokLT ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _consumeInitialHiddenTokens
_TEXT	SEGMENT
_ts$ = -32						; size = 4
_i$ = -20						; size = 4
_first$ = -8						; size = 4
_is$ = 8						; size = 4
_consumeInitialHiddenTokens PROC			; COMDAT
; Line 417
	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 422
	mov	eax, DWORD PTR _is$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _ts$[ebp], ecx
; Line 423
	mov	esi, esp
	mov	eax, DWORD PTR _is$[ebp]
	push	eax
	mov	ecx, DWORD PTR _is$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _first$[ebp], eax
; Line 425
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@consumeIni
$LN2@consumeIni:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@consumeIni:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _first$[ebp]
	jge	SHORT $LN1@consumeIni
; Line 427
	mov	esi, esp
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ts$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ts$[ebp]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _ts$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _ts$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+64]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 428
	jmp	SHORT $LN2@consumeIni
$LN1@consumeIni:
; Line 430
	mov	eax, DWORD PTR _ts$[ebp]
	mov	BYTE PTR [eax+16], 0
; Line 432
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_consumeInitialHiddenTokens ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _LB
_TEXT	SEGMENT
_n$ = -20						; size = 4
_i$ = -8						; size = 4
_cts$ = 8						; size = 4
_k$ = 12						; size = 4
_LB	PROC						; COMDAT
; Line 455
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 459
	mov	eax, DWORD PTR _cts$[ebp]
	cmp	DWORD PTR [eax+28], -1
	jne	SHORT $LN6@LB
; Line 461
	mov	eax, DWORD PTR _cts$[ebp]
	push	eax
	call	_fillBuffer
	add	esp, 4
$LN6@LB:
; Line 463
	cmp	DWORD PTR _k$[ebp], 0
	jne	SHORT $LN5@LB
; Line 465
	xor	eax, eax
	jmp	SHORT $LN7@LB
$LN5@LB:
; Line 467
	mov	eax, DWORD PTR _cts$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	sub	ecx, DWORD PTR _k$[ebp]
	jns	SHORT $LN4@LB
; Line 469
	xor	eax, eax
	jmp	SHORT $LN7@LB
$LN4@LB:
; Line 472
	mov	eax, DWORD PTR _cts$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _i$[ebp], ecx
; Line 473
	mov	DWORD PTR _n$[ebp], 1
$LN3@LB:
; Line 477
	mov	eax, DWORD PTR _n$[ebp]
	cmp	eax, DWORD PTR _k$[ebp]
	jg	SHORT $LN2@LB
; Line 482
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	push	eax
	mov	ecx, DWORD PTR _cts$[ebp]
	push	ecx
	call	_skipOffTokenChannelsReverse
	add	esp, 8
	mov	DWORD PTR _i$[ebp], eax
; Line 483
	mov	eax, DWORD PTR _n$[ebp]
	add	eax, 1
	mov	DWORD PTR _n$[ebp], eax
; Line 484
	jmp	SHORT $LN3@LB
$LN2@LB:
; Line 485
	cmp	DWORD PTR _i$[ebp], 0
	jge	SHORT $LN1@LB
; Line 487
	xor	eax, eax
	jmp	SHORT $LN7@LB
$LN1@LB:
; Line 493
	mov	eax, DWORD PTR _cts$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR [edx+eax*8]
$LN7@LB:
; Line 494
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_LB	ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _get
_TEXT	SEGMENT
_cts$ = -8						; size = 4
_ts$ = 8						; size = 4
_i$ = 12						; size = 4
_get	PROC						; COMDAT
; Line 498
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 501
	mov	eax, DWORD PTR _ts$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _cts$[ebp], ecx
; Line 503
	mov	esi, esp
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cts$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _cts$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+152]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 504
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_get	ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _getTokenSource
_TEXT	SEGMENT
_ts$ = 8						; size = 4
_getTokenSource PROC					; COMDAT
; Line 508
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 509
	mov	eax, DWORD PTR _ts$[ebp]
	mov	eax, DWORD PTR [eax]
; Line 510
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_getTokenSource ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _setTokenSource
_TEXT	SEGMENT
_ts$ = 8						; size = 4
_tokenSource$ = 12					; size = 4
_setTokenSource PROC					; COMDAT
; Line 515
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 516
	mov	eax, DWORD PTR _ts$[ebp]
	mov	ecx, DWORD PTR _tokenSource$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 517
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_setTokenSource ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _toString
_TEXT	SEGMENT
_cts$ = -8						; size = 4
_ts$ = 8						; size = 4
_toString PROC						; COMDAT
; Line 521
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 524
	mov	eax, DWORD PTR _ts$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _cts$[ebp], ecx
; Line 526
	mov	eax, DWORD PTR _cts$[ebp]
	cmp	DWORD PTR [eax+28], -1
	jne	SHORT $LN1@toString
; Line 528
	mov	eax, DWORD PTR _cts$[ebp]
	push	eax
	call	_fillBuffer
	add	esp, 4
$LN1@toString:
; Line 531
	mov	esi, esp
	mov	eax, DWORD PTR _ts$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _ts$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [eax+52]
	call	ecx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	eax
	push	0
	mov	edx, DWORD PTR _ts$[ebp]
	push	edx
	mov	eax, DWORD PTR _ts$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	call	ecx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 532
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_toString ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _toStringSS
_TEXT	SEGMENT
_cts$ = -56						; size = 4
_i$ = -44						; size = 4
_tok$ = -32						; size = 4
_tsource$ = -20						; size = 4
_string$ = -8						; size = 4
_ts$ = 8						; size = 4
_start$ = 12						; size = 4
_stop$ = 16						; size = 4
_toStringSS PROC					; COMDAT
; Line 536
	push	ebp
	mov	ebp, esp
	sub	esp, 252				; 000000fcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-252]
	mov	ecx, 63					; 0000003fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 543
	mov	eax, DWORD PTR _ts$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _cts$[ebp], ecx
; Line 545
	mov	eax, DWORD PTR _cts$[ebp]
	cmp	DWORD PTR [eax+28], -1
	jne	SHORT $LN7@toStringSS
; Line 547
	mov	eax, DWORD PTR _cts$[ebp]
	push	eax
	call	_fillBuffer
	add	esp, 4
$LN7@toStringSS:
; Line 549
	mov	esi, esp
	mov	eax, DWORD PTR _ts$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _ts$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [eax+52]
	call	ecx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	DWORD PTR _stop$[ebp], eax
	jb	SHORT $LN6@toStringSS
; Line 551
	mov	esi, esp
	mov	eax, DWORD PTR _ts$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _ts$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [eax+52]
	call	ecx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	sub	eax, 1
	mov	DWORD PTR _stop$[ebp], eax
$LN6@toStringSS:
; Line 556
	mov	esi, esp
	mov	eax, DWORD PTR _ts$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ts$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _tsource$[ebp], eax
; Line 558
	cmp	DWORD PTR _tsource$[ebp], 0
	je	$LN5@toStringSS
	mov	eax, DWORD PTR _cts$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	$LN5@toStringSS
; Line 562
	mov	esi, esp
	mov	eax, DWORD PTR _tsource$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _tsource$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [eax+8]
	call	ecx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _string$[ebp], eax
; Line 564
	mov	eax, DWORD PTR _start$[ebp]
	mov	DWORD PTR _i$[ebp], eax
	jmp	SHORT $LN4@toStringSS
$LN3@toStringSS:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@toStringSS:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _stop$[ebp]
	ja	SHORT $LN2@toStringSS
; Line 566
	mov	esi, esp
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ts$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ts$[ebp]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _tok$[ebp], eax
; Line 567
	cmp	DWORD PTR _tok$[ebp], 0
	je	SHORT $LN1@toStringSS
; Line 569
	mov	esi, esp
	mov	eax, DWORD PTR _tok$[ebp]
	push	eax
	mov	ecx, DWORD PTR _tok$[ebp]
	mov	edx, DWORD PTR [ecx+72]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	eax
	mov	eax, DWORD PTR _string$[ebp]
	push	eax
	mov	ecx, DWORD PTR _string$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@toStringSS:
; Line 571
	jmp	SHORT $LN3@toStringSS
$LN2@toStringSS:
; Line 573
	mov	eax, DWORD PTR _string$[ebp]
	jmp	SHORT $LN8@toStringSS
$LN5@toStringSS:
; Line 575
	xor	eax, eax
$LN8@toStringSS:
; Line 577
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 252				; 000000fcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_toStringSS ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _toStringTT
_TEXT	SEGMENT
_ts$ = 8						; size = 4
_start$ = 12						; size = 4
_stop$ = 16						; size = 4
_toStringTT PROC					; COMDAT
; Line 581
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 582
	cmp	DWORD PTR _start$[ebp], 0
	je	SHORT $LN2@toStringTT
	cmp	DWORD PTR _stop$[ebp], 0
	je	SHORT $LN2@toStringTT
; Line 584
	mov	esi, esp
	mov	eax, DWORD PTR _stop$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stop$[ebp]
	mov	edx, DWORD PTR [ecx+116]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	eax
	mov	edi, esp
	mov	eax, DWORD PTR _start$[ebp]
	push	eax
	mov	ecx, DWORD PTR _start$[ebp]
	mov	edx, DWORD PTR [ecx+116]
	call	edx
	add	esp, 4
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	mov	eax, DWORD PTR _ts$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ts$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	call	edx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	SHORT $LN3@toStringTT
; Line 586
	jmp	SHORT $LN3@toStringTT
$LN2@toStringTT:
; Line 588
	xor	eax, eax
$LN3@toStringTT:
; Line 590
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_toStringTT ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _consume
_TEXT	SEGMENT
_ts$ = -20						; size = 4
_cts$ = -8						; size = 4
_is$ = 8						; size = 4
_consume PROC						; COMDAT
; Line 601
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 605
	mov	eax, DWORD PTR _is$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _ts$[ebp], ecx
; Line 606
	mov	eax, DWORD PTR _ts$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _cts$[ebp], ecx
; Line 608
	mov	eax, DWORD PTR _cts$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _cts$[ebp]
	mov	eax, DWORD PTR [edx+28]
	cmp	eax, DWORD PTR [ecx+4]
	jae	SHORT $LN2@consume
; Line 610
	mov	eax, DWORD PTR _cts$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	add	ecx, 1
	mov	edx, DWORD PTR _cts$[ebp]
	mov	DWORD PTR [edx+28], ecx
; Line 611
	mov	eax, DWORD PTR _cts$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	push	ecx
	mov	edx, DWORD PTR _cts$[ebp]
	push	edx
	call	_skipOffTokenChannels
	add	esp, 8
	mov	ecx, DWORD PTR _cts$[ebp]
	mov	DWORD PTR [ecx+28], eax
$LN2@consume:
; Line 613
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_consume ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _dbgConsume
_TEXT	SEGMENT
_i$35503 = -56						; size = 4
_t$ = -44						; size = 4
_b$ = -32						; size = 4
_a$ = -20						; size = 4
_ts$ = -8						; size = 4
_is$ = 8						; size = 4
_dbgConsume PROC					; COMDAT
; Line 621
	push	ebp
	mov	ebp, esp
	sub	esp, 252				; 000000fcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-252]
	mov	ecx, 63					; 0000003fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 627
	mov	eax, DWORD PTR _is$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _ts$[ebp], ecx
; Line 629
	mov	eax, DWORD PTR _ts$[ebp]
	movzx	ecx, BYTE PTR [eax+16]
	cmp	ecx, 1
	jne	SHORT $LN5@dbgConsume
; Line 631
	mov	eax, DWORD PTR _is$[ebp]
	push	eax
	call	_consumeInitialHiddenTokens
	add	esp, 4
$LN5@dbgConsume:
; Line 634
	mov	esi, esp
	mov	eax, DWORD PTR _is$[ebp]
	push	eax
	mov	ecx, DWORD PTR _is$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _a$[ebp], eax
; Line 635
	mov	esi, esp
	push	1
	mov	eax, DWORD PTR _ts$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ts$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _t$[ebp], eax
; Line 637
	mov	eax, DWORD PTR _is$[ebp]
	push	eax
	call	_consume
	add	esp, 4
; Line 639
	mov	esi, esp
	mov	eax, DWORD PTR _is$[ebp]
	push	eax
	mov	ecx, DWORD PTR _is$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _b$[ebp], eax
; Line 641
	mov	esi, esp
	mov	eax, DWORD PTR _t$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ts$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _ts$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+60]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 643
	mov	eax, DWORD PTR _a$[ebp]
	add	eax, 1
	cmp	DWORD PTR _b$[ebp], eax
	jle	SHORT $LN6@dbgConsume
; Line 651
	mov	eax, DWORD PTR _a$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$35503[ebp], eax
	jmp	SHORT $LN3@dbgConsume
$LN2@dbgConsume:
	mov	eax, DWORD PTR _i$35503[ebp]
	add	eax, 1
	mov	DWORD PTR _i$35503[ebp], eax
$LN3@dbgConsume:
	mov	eax, DWORD PTR _i$35503[ebp]
	cmp	eax, DWORD PTR _b$[ebp]
	jge	SHORT $LN6@dbgConsume
; Line 653
	mov	esi, esp
	mov	eax, DWORD PTR _i$35503[ebp]
	push	eax
	mov	ecx, DWORD PTR _ts$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ts$[ebp]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _ts$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _ts$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+64]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 654
	jmp	SHORT $LN2@dbgConsume
$LN6@dbgConsume:
; Line 657
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 252				; 000000fcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_dbgConsume ENDP
_TEXT	ENDS
EXTRN	_antlr3ListNew:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _setTokenTypeChannel
_TEXT	SEGMENT
_tokenStream$ = 8					; size = 4
_ttype$ = 12						; size = 4
_channel$ = 16						; size = 4
_setTokenTypeChannel PROC				; COMDAT
; Line 667
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 668
	mov	eax, DWORD PTR _tokenStream$[ebp]
	cmp	DWORD PTR [eax+12], 0
	jne	SHORT $LN1@setTokenTy
; Line 670
	push	10					; 0000000aH
	call	_antlr3ListNew
	add	esp, 4
	mov	ecx, DWORD PTR _tokenStream$[ebp]
	mov	DWORD PTR [ecx+12], eax
$LN1@setTokenTy:
; Line 676
	mov	esi, esp
	push	0
	mov	eax, DWORD PTR _channel$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _ttype$[ebp]
	push	ecx
	mov	edx, DWORD PTR _tokenStream$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _tokenStream$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 677
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_setTokenTypeChannel ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _discardTokenType
_TEXT	SEGMENT
_tokenStream$ = 8					; size = 4
_ttype$ = 12						; size = 4
_discardTokenType PROC					; COMDAT
; Line 681
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 682
	mov	eax, DWORD PTR _tokenStream$[ebp]
	cmp	DWORD PTR [eax+16], 0
	jne	SHORT $LN1@discardTok
; Line 684
	push	31					; 0000001fH
	call	_antlr3ListNew
	add	esp, 4
	mov	ecx, DWORD PTR _tokenStream$[ebp]
	mov	DWORD PTR [ecx+16], eax
$LN1@discardTok:
; Line 690
	mov	esi, esp
	push	0
	mov	eax, DWORD PTR _ttype$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _ttype$[ebp]
	push	ecx
	mov	edx, DWORD PTR _tokenStream$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR _tokenStream$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 691
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_discardTokenType ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _discardOffChannel
_TEXT	SEGMENT
_tokenStream$ = 8					; size = 4
_discard$ = 12						; size = 1
_discardOffChannel PROC					; COMDAT
; Line 695
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 696
	mov	eax, DWORD PTR _tokenStream$[ebp]
	mov	cl, BYTE PTR _discard$[ebp]
	mov	BYTE PTR [eax+24], cl
; Line 697
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_discardOffChannel ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _getTokens
_TEXT	SEGMENT
_tokenStream$ = 8					; size = 4
_getTokens PROC						; COMDAT
; Line 701
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 702
	mov	eax, DWORD PTR _tokenStream$[ebp]
	cmp	DWORD PTR [eax+28], -1
	jne	SHORT $LN1@getTokens
; Line 704
	mov	eax, DWORD PTR _tokenStream$[ebp]
	push	eax
	call	_fillBuffer
	add	esp, 4
$LN1@getTokens:
; Line 707
	mov	eax, DWORD PTR _tokenStream$[ebp]
	mov	eax, DWORD PTR [eax+8]
; Line 708
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_getTokens ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _getTokenRange
_TEXT	SEGMENT
_tokenStream$ = 8					; size = 4
_start$ = 12						; size = 4
_stop$ = 16						; size = 4
_getTokenRange PROC					; COMDAT
; Line 712
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 713
	mov	esi, esp
	push	0
	mov	eax, DWORD PTR _stop$[ebp]
	push	eax
	mov	ecx, DWORD PTR _start$[ebp]
	push	ecx
	mov	edx, DWORD PTR _tokenStream$[ebp]
	push	edx
	mov	eax, DWORD PTR _tokenStream$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	call	ecx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 714
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_getTokenRange ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _getTokensSet
_TEXT	SEGMENT
tv141 = -244						; size = 4
_tok$ = -44						; size = 4
_n$ = -32						; size = 4
_i$ = -20						; size = 4
_filteredList$ = -8					; size = 4
_tokenStream$ = 8					; size = 4
_start$ = 12						; size = 4
_stop$ = 16						; size = 4
_types$ = 20						; size = 4
_getTokensSet PROC					; COMDAT
; Line 721
	push	ebp
	mov	ebp, esp
	sub	esp, 244				; 000000f4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 61					; 0000003dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 727
	mov	eax, DWORD PTR _tokenStream$[ebp]
	cmp	DWORD PTR [eax+28], -1
	jne	SHORT $LN9@getTokensS
; Line 729
	mov	eax, DWORD PTR _tokenStream$[ebp]
	push	eax
	call	_fillBuffer
	add	esp, 4
$LN9@getTokensS:
; Line 731
	mov	eax, DWORD PTR _tokenStream$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _tokenStream$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [edx+52]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	DWORD PTR _stop$[ebp], eax
	jbe	SHORT $LN8@getTokensS
; Line 733
	mov	eax, DWORD PTR _tokenStream$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _tokenStream$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [edx+52]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _stop$[ebp], eax
$LN8@getTokensS:
; Line 735
	mov	eax, DWORD PTR _start$[ebp]
	cmp	eax, DWORD PTR _stop$[ebp]
	jbe	SHORT $LN7@getTokensS
; Line 737
	xor	eax, eax
	jmp	$LN10@getTokensS
$LN7@getTokensS:
; Line 744
	mov	eax, DWORD PTR _tokenStream$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _tokenStream$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [edx+52]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_antlr3ListNew
	add	esp, 4
	mov	DWORD PTR _filteredList$[ebp], eax
; Line 746
	mov	eax, DWORD PTR _start$[ebp]
	mov	DWORD PTR _i$[ebp], eax
	mov	DWORD PTR _n$[ebp], 0
	jmp	SHORT $LN6@getTokensS
$LN5@getTokensS:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN6@getTokensS:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _stop$[ebp]
	ja	$LN4@getTokensS
; Line 748
	mov	esi, esp
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _tokenStream$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _tokenStream$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+24]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _tok$[ebp], eax
; Line 752
	cmp	DWORD PTR _types$[ebp], 0
	je	SHORT $LN2@getTokensS
	mov	esi, esp
	mov	eax, DWORD PTR _tok$[ebp]
	push	eax
	mov	ecx, DWORD PTR _tok$[ebp]
	mov	edx, DWORD PTR [ecx+84]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	sub	eax, 1
	neg	eax
	sbb	eax, eax
	add	eax, 1
	mov	esi, esp
	push	eax
	mov	eax, DWORD PTR _types$[ebp]
	push	eax
	mov	ecx, DWORD PTR _types$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@getTokensS
$LN2@getTokensS:
; Line 754
	mov	eax, DWORD PTR _n$[ebp]
	mov	DWORD PTR tv141[ebp], eax
	mov	ecx, DWORD PTR _n$[ebp]
	add	ecx, 1
	mov	DWORD PTR _n$[ebp], ecx
	mov	esi, esp
	push	0
	mov	edx, DWORD PTR _tok$[ebp]
	push	edx
	mov	eax, DWORD PTR tv141[ebp]
	push	eax
	mov	ecx, DWORD PTR _filteredList$[ebp]
	push	ecx
	mov	edx, DWORD PTR _filteredList$[ebp]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@getTokensS:
; Line 756
	jmp	$LN5@getTokensS
$LN4@getTokensS:
; Line 760
	mov	esi, esp
	mov	eax, DWORD PTR _filteredList$[ebp]
	push	eax
	mov	ecx, DWORD PTR _filteredList$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN1@getTokensS
; Line 762
	mov	esi, esp
	mov	eax, DWORD PTR _filteredList$[ebp]
	push	eax
	mov	ecx, DWORD PTR _filteredList$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 763
	mov	DWORD PTR _filteredList$[ebp], 0
$LN1@getTokensS:
; Line 766
	mov	eax, DWORD PTR _filteredList$[ebp]
$LN10@getTokensS:
; Line 767
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_getTokensSet ENDP
_TEXT	ENDS
EXTRN	_antlr3BitsetList:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _getTokensList
_TEXT	SEGMENT
_newlist$ = -20						; size = 4
_bitSet$ = -8						; size = 4
_tokenStream$ = 8					; size = 4
_start$ = 12						; size = 4
_stop$ = 16						; size = 4
_list$ = 20						; size = 4
_getTokensList PROC					; COMDAT
; Line 771
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 775
	mov	eax, DWORD PTR _list$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_antlr3BitsetList
	add	esp, 4
	mov	DWORD PTR _bitSet$[ebp], eax
; Line 777
	mov	esi, esp
	mov	eax, DWORD PTR _bitSet$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stop$[ebp]
	push	ecx
	mov	edx, DWORD PTR _start$[ebp]
	push	edx
	mov	eax, DWORD PTR _tokenStream$[ebp]
	push	eax
	mov	ecx, DWORD PTR _tokenStream$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	call	edx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _newlist$[ebp], eax
; Line 779
	mov	esi, esp
	mov	eax, DWORD PTR _bitSet$[ebp]
	push	eax
	mov	ecx, DWORD PTR _bitSet$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 781
	mov	eax, DWORD PTR _newlist$[ebp]
; Line 783
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_getTokensList ENDP
_TEXT	ENDS
EXTRN	_antlr3BitsetOf:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _getTokensType
_TEXT	SEGMENT
_newlist$ = -20						; size = 4
_bitSet$ = -8						; size = 4
_tokenStream$ = 8					; size = 4
_start$ = 12						; size = 4
_stop$ = 16						; size = 4
_type$ = 20						; size = 4
_getTokensType PROC					; COMDAT
; Line 787
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 791
	push	-1
	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	call	_antlr3BitsetOf
	add	esp, 8
	mov	DWORD PTR _bitSet$[ebp], eax
; Line 792
	mov	esi, esp
	mov	eax, DWORD PTR _bitSet$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stop$[ebp]
	push	ecx
	mov	edx, DWORD PTR _start$[ebp]
	push	edx
	mov	eax, DWORD PTR _tokenStream$[ebp]
	push	eax
	mov	ecx, DWORD PTR _tokenStream$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	call	edx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _newlist$[ebp], eax
; Line 794
	mov	esi, esp
	mov	eax, DWORD PTR _bitSet$[ebp]
	push	eax
	mov	ecx, DWORD PTR _bitSet$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 796
	mov	eax, DWORD PTR _newlist$[ebp]
; Line 797
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_getTokensType ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT __LA
_TEXT	SEGMENT
_tok$ = -20						; size = 4
_ts$ = -8						; size = 4
_is$ = 8						; size = 4
_i$ = 12						; size = 4
__LA	PROC						; COMDAT
; Line 801
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 805
	mov	eax, DWORD PTR _is$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _ts$[ebp], ecx
; Line 807
	mov	esi, esp
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ts$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ts$[ebp]
	mov	eax, DWORD PTR [edx+20]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _tok$[ebp], eax
; Line 809
	cmp	DWORD PTR _tok$[ebp], 0
	je	SHORT $LN2@LA
; Line 811
	mov	esi, esp
	mov	eax, DWORD PTR _tok$[ebp]
	push	eax
	mov	ecx, DWORD PTR _tok$[ebp]
	mov	edx, DWORD PTR [ecx+84]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	SHORT $LN3@LA
; Line 813
	jmp	SHORT $LN3@LA
$LN2@LA:
; Line 815
	xor	eax, eax
$LN3@LA:
; Line 817
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__LA	ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _dbgLA
_TEXT	SEGMENT
_ts$ = -8						; size = 4
_is$ = 8						; size = 4
_i$ = 12						; size = 4
_dbgLA	PROC						; COMDAT
; Line 823
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 826
	mov	eax, DWORD PTR _is$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _ts$[ebp], ecx
; Line 828
	mov	eax, DWORD PTR _ts$[ebp]
	movzx	ecx, BYTE PTR [eax+16]
	cmp	ecx, 1
	jne	SHORT $LN1@dbgLA
; Line 830
	mov	eax, DWORD PTR _is$[ebp]
	push	eax
	call	_consumeInitialHiddenTokens
	add	esp, 4
$LN1@dbgLA:
; Line 832
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ts$[ebp]
	push	ecx
	call	_tokLT
	add	esp, 8
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	eax, DWORD PTR _ts$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _ts$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax+68]
	call	ecx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 833
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _is$[ebp]
	push	ecx
	call	__LA
	add	esp, 8
; Line 834
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_dbgLA	ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _mark
_TEXT	SEGMENT
_is$ = 8						; size = 4
_mark	PROC						; COMDAT
; Line 838
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 839
	mov	esi, esp
	mov	eax, DWORD PTR _is$[ebp]
	push	eax
	mov	ecx, DWORD PTR _is$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _is$[ebp]
	mov	DWORD PTR [ecx+12], eax
; Line 840
	mov	eax, DWORD PTR _is$[ebp]
	mov	eax, DWORD PTR [eax+12]
; Line 841
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_mark	ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _dbgMark
_TEXT	SEGMENT
_ts$ = -8						; size = 4
_is$ = 8						; size = 4
_dbgMark PROC						; COMDAT
; Line 847
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 850
	mov	eax, DWORD PTR _is$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _ts$[ebp], ecx
; Line 852
	mov	esi, esp
	mov	eax, DWORD PTR _is$[ebp]
	push	eax
	mov	ecx, DWORD PTR _is$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _is$[ebp]
	mov	DWORD PTR [ecx+12], eax
; Line 853
	mov	esi, esp
	mov	eax, DWORD PTR _is$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _ts$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _ts$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx+72]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 855
	mov	eax, DWORD PTR _is$[ebp]
	mov	eax, DWORD PTR [eax+12]
; Line 856
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_dbgMark ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _release
_TEXT	SEGMENT
_is$ = 8						; size = 4
_mark$ = 12						; size = 4
_release PROC						; COMDAT
; Line 860
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 862
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_release ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _size
_TEXT	SEGMENT
_ts$ = -20						; size = 4
_cts$ = -8						; size = 4
_is$ = 8						; size = 4
_size	PROC						; COMDAT
; Line 866
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 870
	mov	eax, DWORD PTR _is$[ebp]
	cmp	DWORD PTR [eax+56], 0
	jbe	SHORT $LN1@size
; Line 872
	mov	eax, DWORD PTR _is$[ebp]
	mov	eax, DWORD PTR [eax+56]
	jmp	SHORT $LN2@size
$LN1@size:
; Line 874
	mov	eax, DWORD PTR _is$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _ts$[ebp], ecx
; Line 875
	mov	eax, DWORD PTR _ts$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _cts$[ebp], ecx
; Line 877
	mov	eax, DWORD PTR _cts$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _is$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+56], eax
; Line 878
	mov	eax, DWORD PTR _is$[ebp]
	mov	eax, DWORD PTR [eax+56]
$LN2@size:
; Line 879
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_size	ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _tindex
_TEXT	SEGMENT
_ts$ = -20						; size = 4
_cts$ = -8						; size = 4
_is$ = 8						; size = 4
_tindex	PROC						; COMDAT
; Line 883
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 887
	mov	eax, DWORD PTR _is$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _ts$[ebp], ecx
; Line 888
	mov	eax, DWORD PTR _ts$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _cts$[ebp], ecx
; Line 890
	mov	eax, DWORD PTR _cts$[ebp]
	mov	eax, DWORD PTR [eax+28]
; Line 891
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_tindex	ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _dbgRewindLast
_TEXT	SEGMENT
_ts$ = -8						; size = 4
_is$ = 8						; size = 4
_dbgRewindLast PROC					; COMDAT
; Line 895
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 898
	mov	eax, DWORD PTR _is$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _ts$[ebp], ecx
; Line 900
	mov	esi, esp
	mov	eax, DWORD PTR _ts$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _ts$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax+80]
	call	ecx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 902
	mov	esi, esp
	mov	eax, DWORD PTR _is$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _is$[ebp]
	push	edx
	mov	eax, DWORD PTR _is$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 903
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_dbgRewindLast ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _rewindLast
_TEXT	SEGMENT
_is$ = 8						; size = 4
_rewindLast PROC					; COMDAT
; Line 906
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 907
	mov	esi, esp
	mov	eax, DWORD PTR _is$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _is$[ebp]
	push	edx
	mov	eax, DWORD PTR _is$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 908
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_rewindLast ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _rewindStream
_TEXT	SEGMENT
_is$ = 8						; size = 4
_marker$ = 12						; size = 4
_rewindStream PROC					; COMDAT
; Line 911
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 912
	mov	esi, esp
	mov	eax, DWORD PTR _marker$[ebp]
	push	eax
	mov	ecx, DWORD PTR _is$[ebp]
	push	ecx
	mov	edx, DWORD PTR _is$[ebp]
	mov	eax, DWORD PTR [edx+48]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 913
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_rewindStream ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _dbgRewindStream
_TEXT	SEGMENT
_ts$ = -8						; size = 4
_is$ = 8						; size = 4
_marker$ = 12						; size = 4
_dbgRewindStream PROC					; COMDAT
; Line 916
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 919
	mov	eax, DWORD PTR _is$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _ts$[ebp], ecx
; Line 921
	mov	esi, esp
	mov	eax, DWORD PTR _marker$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ts$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _ts$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+76]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 923
	mov	esi, esp
	mov	eax, DWORD PTR _marker$[ebp]
	push	eax
	mov	ecx, DWORD PTR _is$[ebp]
	push	ecx
	mov	edx, DWORD PTR _is$[ebp]
	mov	eax, DWORD PTR [edx+48]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 924
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_dbgRewindStream ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _seek
_TEXT	SEGMENT
_ts$ = -20						; size = 4
_cts$ = -8						; size = 4
_is$ = 8						; size = 4
_index$ = 12						; size = 4
_seek	PROC						; COMDAT
; Line 928
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 932
	mov	eax, DWORD PTR _is$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _ts$[ebp], ecx
; Line 933
	mov	eax, DWORD PTR _ts$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _cts$[ebp], ecx
; Line 935
	mov	eax, DWORD PTR _cts$[ebp]
	mov	ecx, DWORD PTR _index$[ebp]
	mov	DWORD PTR [eax+28], ecx
; Line 936
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_seek	ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _dbgSeek
_TEXT	SEGMENT
_is$ = 8						; size = 4
_index$ = 12						; size = 4
_dbgSeek PROC						; COMDAT
; Line 939
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 942
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _is$[ebp]
	push	ecx
	call	_seek
	add	esp, 8
; Line 943
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_dbgSeek ENDP
_TEXT	ENDS
PUBLIC	_fillBufferExt
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _fillBufferExt
_TEXT	SEGMENT
_tokenStream$ = 8					; size = 4
_fillBufferExt PROC					; COMDAT
; Line 946
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 947
	mov	eax, DWORD PTR _tokenStream$[ebp]
	push	eax
	call	_fillBuffer
	add	esp, 4
; Line 948
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_fillBufferExt ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _fillBuffer
_TEXT	SEGMENT
_channelI$ = -44					; size = 4
_discard$ = -29						; size = 1
_tok$ = -20						; size = 4
_index$ = -8						; size = 4
_tokenStream$ = 8					; size = 4
_fillBuffer PROC					; COMDAT
; Line 950
	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 958
	mov	DWORD PTR _index$[ebp], 0
; Line 964
	mov	eax, DWORD PTR _tokenStream$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _tokenStream$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _tok$[ebp], eax
$LN9@fillBuffer:
; Line 966
	cmp	DWORD PTR _tok$[ebp], 0
	je	$LN8@fillBuffer
	mov	eax, DWORD PTR _tok$[ebp]
	cmp	DWORD PTR [eax], -1
	je	$LN8@fillBuffer
; Line 968
	mov	BYTE PTR _discard$[ebp], 0
; Line 977
	mov	eax, DWORD PTR _tokenStream$[ebp]
	cmp	DWORD PTR [eax+16], 0
	je	SHORT $LN7@fillBuffer
	mov	esi, esp
	mov	eax, DWORD PTR _tok$[ebp]
	push	eax
	mov	ecx, DWORD PTR _tok$[ebp]
	mov	edx, DWORD PTR [ecx+84]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	eax
	mov	eax, DWORD PTR _tokenStream$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR _tokenStream$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR [eax+12]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN7@fillBuffer
; Line 979
	mov	BYTE PTR _discard$[ebp], 1
; Line 981
	jmp	$LN6@fillBuffer
$LN7@fillBuffer:
; Line 983
	mov	eax, DWORD PTR _tokenStream$[ebp]
	movzx	ecx, BYTE PTR [eax+24]
	cmp	ecx, 1
	jne	SHORT $LN5@fillBuffer
	mov	esi, esp
	mov	eax, DWORD PTR _tok$[ebp]
	push	eax
	mov	ecx, DWORD PTR _tok$[ebp]
	mov	edx, DWORD PTR [ecx+108]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _tokenStream$[ebp]
	cmp	eax, DWORD PTR [ecx+20]
	je	SHORT $LN5@fillBuffer
; Line 985
	mov	BYTE PTR _discard$[ebp], 1
	jmp	SHORT $LN6@fillBuffer
$LN5@fillBuffer:
; Line 987
	mov	eax, DWORD PTR _tokenStream$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN6@fillBuffer
; Line 991
	mov	esi, esp
	mov	eax, DWORD PTR _tok$[ebp]
	push	eax
	mov	ecx, DWORD PTR _tok$[ebp]
	mov	edx, DWORD PTR [ecx+84]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	add	eax, 1
	mov	esi, esp
	push	eax
	mov	eax, DWORD PTR _tokenStream$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _tokenStream$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax+12]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _channelI$[ebp], eax
; Line 993
	cmp	DWORD PTR _channelI$[ebp], 0
	je	SHORT $LN6@fillBuffer
; Line 997
	mov	eax, DWORD PTR _channelI$[ebp]
	sub	eax, 1
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _tok$[ebp]
	push	ecx
	mov	edx, DWORD PTR _tok$[ebp]
	mov	eax, DWORD PTR [edx+112]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN6@fillBuffer:
; Line 1003
	movzx	eax, BYTE PTR _discard$[ebp]
	test	eax, eax
	jne	SHORT $LN1@fillBuffer
; Line 1007
	mov	esi, esp
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _tok$[ebp]
	push	ecx
	mov	edx, DWORD PTR _tok$[ebp]
	mov	eax, DWORD PTR [edx+120]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1008
	mov	eax, DWORD PTR _tokenStream$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	add	ecx, 1
	mov	edx, DWORD PTR _tokenStream$[ebp]
	mov	DWORD PTR [edx+28], ecx
; Line 1009
	mov	esi, esp
	push	0
	mov	eax, DWORD PTR _tok$[ebp]
	push	eax
	mov	ecx, DWORD PTR _tokenStream$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _tokenStream$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+168]
	call	edx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1010
	mov	eax, DWORD PTR _index$[ebp]
	add	eax, 1
	mov	DWORD PTR _index$[ebp], eax
$LN1@fillBuffer:
; Line 1013
	mov	eax, DWORD PTR _tokenStream$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _tokenStream$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _tok$[ebp], eax
; Line 1014
	jmp	$LN9@fillBuffer
$LN8@fillBuffer:
; Line 1019
	mov	eax, DWORD PTR _tokenStream$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _tokenStream$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR [eax+8]
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+56], eax
; Line 1023
	mov	eax, DWORD PTR _tokenStream$[ebp]
	mov	DWORD PTR [eax+28], 0
; Line 1024
	mov	eax, DWORD PTR _tokenStream$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	push	ecx
	mov	edx, DWORD PTR _tokenStream$[ebp]
	push	edx
	call	_skipOffTokenChannels
	add	esp, 8
	mov	ecx, DWORD PTR _tokenStream$[ebp]
	mov	DWORD PTR [ecx+28], eax
; Line 1026
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_fillBuffer ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _skipOffTokenChannels
_TEXT	SEGMENT
_tok$ = -20						; size = 4
_n$ = -8						; size = 4
_tokenStream$ = 8					; size = 4
_i$ = 12						; size = 4
_skipOffTokenChannels PROC				; COMDAT
; Line 1032
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1036
	mov	eax, DWORD PTR _tokenStream$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [edx+56]
	mov	DWORD PTR _n$[ebp], eax
$LN4@skipOffTok:
; Line 1038
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _n$[ebp]
	jge	SHORT $LN3@skipOffTok
; Line 1040
	mov	eax, DWORD PTR _tokenStream$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR [edx+eax*8]
	mov	DWORD PTR _tok$[ebp], ecx
; Line 1042
	mov	eax, DWORD PTR _tok$[ebp]
	mov	ecx, DWORD PTR _tokenStream$[ebp]
	mov	edx, DWORD PTR [eax+24]
	cmp	edx, DWORD PTR [ecx+20]
	je	SHORT $LN2@skipOffTok
; Line 1044
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
; Line 1046
	jmp	SHORT $LN1@skipOffTok
$LN2@skipOffTok:
; Line 1048
	mov	eax, DWORD PTR _i$[ebp]
	jmp	SHORT $LN5@skipOffTok
$LN1@skipOffTok:
; Line 1050
	jmp	SHORT $LN4@skipOffTok
$LN3@skipOffTok:
; Line 1051
	mov	eax, DWORD PTR _i$[ebp]
$LN5@skipOffTok:
; Line 1052
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_skipOffTokenChannels ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _skipOffTokenChannelsReverse
_TEXT	SEGMENT
_tok$ = -8						; size = 4
_tokenStream$ = 8					; size = 4
_x$ = 12						; size = 4
_skipOffTokenChannelsReverse PROC			; COMDAT
; Line 1056
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
$LN4@skipOffTok@2:
; Line 1059
	cmp	DWORD PTR _x$[ebp], 0
	jl	SHORT $LN3@skipOffTok@2
; Line 1061
	mov	eax, DWORD PTR _tokenStream$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR [edx+eax*8]
	mov	DWORD PTR _tok$[ebp], ecx
; Line 1063
	mov	eax, DWORD PTR _tok$[ebp]
	mov	ecx, DWORD PTR _tokenStream$[ebp]
	mov	edx, DWORD PTR [eax+24]
	cmp	edx, DWORD PTR [ecx+20]
	je	SHORT $LN2@skipOffTok@2
; Line 1065
	mov	eax, DWORD PTR _x$[ebp]
	sub	eax, 1
	mov	DWORD PTR _x$[ebp], eax
; Line 1067
	jmp	SHORT $LN1@skipOffTok@2
$LN2@skipOffTok@2:
; Line 1069
	mov	eax, DWORD PTR _x$[ebp]
	jmp	SHORT $LN5@skipOffTok@2
$LN1@skipOffTok@2:
; Line 1071
	jmp	SHORT $LN4@skipOffTok@2
$LN3@skipOffTok@2:
; Line 1072
	mov	eax, DWORD PTR _x$[ebp]
$LN5@skipOffTok@2:
; Line 1073
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_skipOffTokenChannelsReverse ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _getSourceName
_TEXT	SEGMENT
_is$ = 8						; size = 4
_getSourceName PROC					; COMDAT
; Line 1084
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1090
	mov	eax, DWORD PTR _is$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+300]
; Line 1091
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_getSourceName ENDP
_TEXT	ENDS
END
