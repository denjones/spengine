; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\Users\Ken\Documents\GitHub\spengine\Antlr\antlr3filestream.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_antlr3FileStreamNew
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\users\ken\documents\github\spengine\antlr\antlr3filestream.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT _antlr3FileStreamNew
_TEXT	SEGMENT
_input$ = -8						; size = 4
_fileName$ = 8						; size = 4
_encoding$ = 12						; size = 4
_antlr3FileStreamNew PROC				; COMDAT
; Line 55
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 63
	mov	eax, DWORD PTR _fileName$[ebp]
	push	eax
	call	_antlr3CreateFileStream
	add	esp, 4
	mov	DWORD PTR _input$[ebp], eax
; Line 64
	cmp	DWORD PTR _input$[ebp], 0
	jne	SHORT $LN1@antlr3File
; Line 66
	xor	eax, eax
	jmp	SHORT $LN2@antlr3File
$LN1@antlr3File:
; Line 72
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR _encoding$[ebp]
	mov	DWORD PTR [eax+120], ecx
; Line 77
	mov	eax, DWORD PTR _input$[ebp]
	push	eax
	call	_setupInputStream
	add	esp, 4
; Line 81
	mov	esi, esp
	mov	eax, DWORD PTR _fileName$[ebp]
	push	eax
	mov	ecx, DWORD PTR _input$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [ecx+28]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _input$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [edx+4], eax
; Line 82
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _input$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+48], eax
; Line 84
	mov	eax, DWORD PTR _input$[ebp]
$LN2@antlr3File:
; Line 85
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_antlr3FileStreamNew ENDP
_TEXT	ENDS
PUBLIC	_antlr3StringStreamNew
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _antlr3StringStreamNew
_TEXT	SEGMENT
_input$ = -8						; size = 4
_data$ = 8						; size = 4
_encoding$ = 12						; size = 4
_size$ = 16						; size = 4
_name$ = 20						; size = 4
_antlr3StringStreamNew PROC				; COMDAT
; Line 90
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 97
	mov	eax, DWORD PTR _data$[ebp]
	push	eax
	call	_antlr3CreateStringStream
	add	esp, 4
	mov	DWORD PTR _input$[ebp], eax
; Line 98
	cmp	DWORD PTR _input$[ebp], 0
	jne	SHORT $LN1@antlr3Stri
; Line 100
	xor	eax, eax
	jmp	SHORT $LN2@antlr3Stri
$LN1@antlr3Stri:
; Line 105
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR _size$[ebp]
	mov	DWORD PTR [eax+24], ecx
; Line 110
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR _encoding$[ebp]
	mov	DWORD PTR [eax+120], ecx
; Line 115
	mov	eax, DWORD PTR _input$[ebp]
	push	eax
	call	_setupInputStream
	add	esp, 4
; Line 119
	mov	esi, esp
	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	mov	ecx, DWORD PTR _input$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [ecx+28]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _input$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [edx+4], eax
; Line 120
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _input$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+48], eax
; Line 122
	mov	eax, DWORD PTR _input$[ebp]
$LN2@antlr3Stri:
; Line 123
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_antlr3StringStreamNew ENDP
_TEXT	ENDS
EXTRN	_antlr38BitSetupStream:PROC
EXTRN	_antlr3EBCDICSetupStream:PROC
EXTRN	_antlr3UTF32SetupStream:PROC
EXTRN	_antlr3UTF16SetupStream:PROC
EXTRN	_antlr3UTF8SetupStream:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _setupInputStream
_TEXT	SEGMENT
tv67 = -220						; size = 4
_bomTest$ = -20						; size = 2
_isBigEndian$ = -5					; size = 1
_input$ = 8						; size = 4
_setupInputStream PROC					; COMDAT
; Line 131
	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 137
	mov	eax, 65279				; 0000feffH
	mov	WORD PTR _bomTest$[ebp], ax
; Line 143
	movzx	eax, BYTE PTR _bomTest$[ebp]
	cmp	eax, 254				; 000000feH
	jne	SHORT $LN22@setupInput
; Line 145
	mov	BYTE PTR _isBigEndian$[ebp], 1
; Line 147
	jmp	SHORT $LN21@setupInput
$LN22@setupInput:
; Line 149
	mov	BYTE PTR _isBigEndian$[ebp], 0
$LN21@setupInput:
; Line 155
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR [eax+120]
	mov	DWORD PTR tv67[ebp], ecx
	mov	edx, DWORD PTR tv67[ebp]
	sub	edx, 8
	mov	DWORD PTR tv67[ebp], edx
	cmp	DWORD PTR tv67[ebp], 56			; 00000038H
	ja	$LN1@setupInput
	mov	eax, DWORD PTR tv67[ebp]
	movzx	ecx, BYTE PTR $LN25@setupInput[eax]
	jmp	DWORD PTR $LN26@setupInput[ecx*4]
$LN18@setupInput:
; Line 167
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 239				; 000000efH
	jne	SHORT $LN17@setupInput
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	movzx	edx, BYTE PTR [ecx+1]
	cmp	edx, 187				; 000000bbH
	jne	SHORT $LN17@setupInput
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	movzx	edx, BYTE PTR [ecx+2]
	cmp	edx, 191				; 000000bfH
	jne	SHORT $LN17@setupInput
; Line 171
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 3
	mov	edx, DWORD PTR _input$[ebp]
	mov	DWORD PTR [edx+20], ecx
$LN17@setupInput:
; Line 176
	mov	eax, DWORD PTR _input$[ebp]
	push	eax
	call	_antlr3UTF8SetupStream
	add	esp, 4
; Line 177
	jmp	$LN23@setupInput
$LN16@setupInput:
; Line 188
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 254				; 000000feH
	jne	SHORT $LN15@setupInput
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	movzx	edx, BYTE PTR [ecx+1]
	cmp	edx, 255				; 000000ffH
	jne	SHORT $LN15@setupInput
; Line 192
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 2
	mov	edx, DWORD PTR _input$[ebp]
	mov	DWORD PTR [edx+20], ecx
; Line 194
	push	1
	movzx	eax, BYTE PTR _isBigEndian$[ebp]
	push	eax
	mov	ecx, DWORD PTR _input$[ebp]
	push	ecx
	call	_antlr3UTF16SetupStream
	add	esp, 12					; 0000000cH
; Line 196
	jmp	SHORT $LN14@setupInput
$LN15@setupInput:
; Line 198
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 255				; 000000ffH
	jne	SHORT $LN13@setupInput
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	movzx	edx, BYTE PTR [ecx+1]
	cmp	edx, 254				; 000000feH
	jne	SHORT $LN13@setupInput
; Line 202
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 2
	mov	edx, DWORD PTR _input$[ebp]
	mov	DWORD PTR [edx+20], ecx
; Line 204
	push	0
	movzx	eax, BYTE PTR _isBigEndian$[ebp]
	push	eax
	mov	ecx, DWORD PTR _input$[ebp]
	push	ecx
	call	_antlr3UTF16SetupStream
	add	esp, 12					; 0000000cH
; Line 206
	jmp	SHORT $LN14@setupInput
$LN13@setupInput:
; Line 210
	movzx	eax, BYTE PTR _isBigEndian$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _isBigEndian$[ebp]
	push	ecx
	mov	edx, DWORD PTR _input$[ebp]
	push	edx
	call	_antlr3UTF16SetupStream
	add	esp, 12					; 0000000cH
$LN14@setupInput:
; Line 212
	jmp	$LN23@setupInput
$LN11@setupInput:
; Line 225
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	movzx	edx, BYTE PTR [ecx]
	test	edx, edx
	jne	SHORT $LN10@setupInput
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	movzx	edx, BYTE PTR [ecx+1]
	test	edx, edx
	jne	SHORT $LN10@setupInput
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	movzx	edx, BYTE PTR [ecx+2]
	cmp	edx, 254				; 000000feH
	jne	SHORT $LN10@setupInput
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	movzx	edx, BYTE PTR [ecx+3]
	cmp	edx, 255				; 000000ffH
	jne	SHORT $LN10@setupInput
; Line 229
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 4
	mov	edx, DWORD PTR _input$[ebp]
	mov	DWORD PTR [edx+20], ecx
; Line 231
	push	1
	movzx	eax, BYTE PTR _isBigEndian$[ebp]
	push	eax
	mov	ecx, DWORD PTR _input$[ebp]
	push	ecx
	call	_antlr3UTF32SetupStream
	add	esp, 12					; 0000000cH
; Line 233
	jmp	SHORT $LN9@setupInput
$LN10@setupInput:
; Line 237
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 255				; 000000ffH
	jne	SHORT $LN8@setupInput
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	movzx	edx, BYTE PTR [ecx+1]
	cmp	edx, 254				; 000000feH
	jne	SHORT $LN8@setupInput
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	movzx	edx, BYTE PTR [ecx+1]
	test	edx, edx
	jne	SHORT $LN8@setupInput
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	movzx	edx, BYTE PTR [ecx+1]
	test	edx, edx
	jne	SHORT $LN8@setupInput
; Line 241
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 4
	mov	edx, DWORD PTR _input$[ebp]
	mov	DWORD PTR [edx+20], ecx
; Line 243
	push	0
	movzx	eax, BYTE PTR _isBigEndian$[ebp]
	push	eax
	mov	ecx, DWORD PTR _input$[ebp]
	push	ecx
	call	_antlr3UTF32SetupStream
	add	esp, 12					; 0000000cH
; Line 245
	jmp	SHORT $LN9@setupInput
$LN8@setupInput:
; Line 249
	movzx	eax, BYTE PTR _isBigEndian$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _isBigEndian$[ebp]
	push	ecx
	mov	edx, DWORD PTR _input$[ebp]
	push	edx
	call	_antlr3UTF32SetupStream
	add	esp, 12					; 0000000cH
$LN9@setupInput:
; Line 251
	jmp	SHORT $LN23@setupInput
$LN6@setupInput:
; Line 257
	push	1
	movzx	eax, BYTE PTR _isBigEndian$[ebp]
	push	eax
	mov	ecx, DWORD PTR _input$[ebp]
	push	ecx
	call	_antlr3UTF16SetupStream
	add	esp, 12					; 0000000cH
; Line 258
	jmp	SHORT $LN23@setupInput
$LN5@setupInput:
; Line 264
	push	0
	movzx	eax, BYTE PTR _isBigEndian$[ebp]
	push	eax
	mov	ecx, DWORD PTR _input$[ebp]
	push	ecx
	call	_antlr3UTF16SetupStream
	add	esp, 12					; 0000000cH
; Line 265
	jmp	SHORT $LN23@setupInput
$LN4@setupInput:
; Line 271
	push	1
	movzx	eax, BYTE PTR _isBigEndian$[ebp]
	push	eax
	mov	ecx, DWORD PTR _input$[ebp]
	push	ecx
	call	_antlr3UTF32SetupStream
	add	esp, 12					; 0000000cH
; Line 272
	jmp	SHORT $LN23@setupInput
$LN3@setupInput:
; Line 278
	push	0
	movzx	eax, BYTE PTR _isBigEndian$[ebp]
	push	eax
	mov	ecx, DWORD PTR _input$[ebp]
	push	ecx
	call	_antlr3UTF32SetupStream
	add	esp, 12					; 0000000cH
; Line 279
	jmp	SHORT $LN23@setupInput
$LN2@setupInput:
; Line 286
	mov	eax, DWORD PTR _input$[ebp]
	push	eax
	call	_antlr3EBCDICSetupStream
	add	esp, 4
; Line 287
	jmp	SHORT $LN23@setupInput
$LN1@setupInput:
; Line 294
	mov	eax, DWORD PTR _input$[ebp]
	push	eax
	call	_antlr38BitSetupStream
	add	esp, 4
$LN23@setupInput:
; Line 297
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN26@setupInput:
	DD	$LN18@setupInput
	DD	$LN16@setupInput
	DD	$LN6@setupInput
	DD	$LN5@setupInput
	DD	$LN11@setupInput
	DD	$LN4@setupInput
	DD	$LN3@setupInput
	DD	$LN2@setupInput
	DD	$LN1@setupInput
$LN25@setupInput:
	DB	0
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	1
	DB	2
	DB	3
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	4
	DB	5
	DB	6
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	7
_setupInputStream ENDP
_TEXT	ENDS
PUBLIC	_antlr3read8Bit
EXTRN	_antlr3GenericSetupStream:PROC
EXTRN	__imp__calloc:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _antlr3CreateFileStream
_TEXT	SEGMENT
_status$ = -20						; size = 4
_input$ = -8						; size = 4
_fileName$ = 8						; size = 4
_antlr3CreateFileStream PROC				; COMDAT
; Line 309
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 315
	cmp	DWORD PTR _fileName$[ebp], 0
	jne	SHORT $LN3@antlr3Crea
; Line 317
	xor	eax, eax
	jmp	SHORT $LN4@antlr3Crea
$LN3@antlr3Crea:
; Line 323
	mov	esi, esp
	push	124					; 0000007cH
	push	1
	call	DWORD PTR __imp__calloc
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _input$[ebp], eax
; Line 325
	cmp	DWORD PTR _input$[ebp], 0
	jne	SHORT $LN2@antlr3Crea
; Line 327
	xor	eax, eax
	jmp	SHORT $LN4@antlr3Crea
$LN2@antlr3Crea:
; Line 332
	mov	eax, DWORD PTR _fileName$[ebp]
	push	eax
	mov	ecx, DWORD PTR _input$[ebp]
	push	ecx
	call	_antlr3read8Bit
	add	esp, 8
	mov	DWORD PTR _status$[ebp], eax
; Line 337
	mov	eax, DWORD PTR _input$[ebp]
	push	eax
	call	_antlr3GenericSetupStream
	add	esp, 4
; Line 343
	cmp	DWORD PTR _status$[ebp], 0
	je	SHORT $LN1@antlr3Crea
; Line 345
	mov	esi, esp
	mov	eax, DWORD PTR _input$[ebp]
	push	eax
	mov	ecx, DWORD PTR _input$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 346
	xor	eax, eax
	jmp	SHORT $LN4@antlr3Crea
$LN1@antlr3Crea:
; Line 349
	mov	eax, DWORD PTR _input$[ebp]
$LN4@antlr3Crea:
; Line 350
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_antlr3CreateFileStream ENDP
_TEXT	ENDS
PUBLIC	_antlr3Fclose
PUBLIC	_antlr3Fread
PUBLIC	_antlr3Fsize
PUBLIC	_antlr3Fopen
PUBLIC	??_C@_02JDPG@rb?$AA@				; `string'
EXTRN	__imp__malloc:PROC
;	COMDAT ??_C@_02JDPG@rb?$AA@
CONST	SEGMENT
??_C@_02JDPG@rb?$AA@ DB 'rb', 00H			; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT _antlr3read8Bit
_TEXT	SEGMENT
_fSize$ = -20						; size = 4
_infile$ = -8						; size = 4
_input$ = 8						; size = 4
_fileName$ = 12						; size = 4
_antlr3read8Bit PROC					; COMDAT
; Line 354
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 360
	push	OFFSET ??_C@_02JDPG@rb?$AA@
	mov	eax, DWORD PTR _fileName$[ebp]
	push	eax
	call	_antlr3Fopen
	add	esp, 8
	mov	DWORD PTR _infile$[ebp], eax
; Line 364
	cmp	DWORD PTR _infile$[ebp], 0
	jne	SHORT $LN2@antlr3read
; Line 366
	mov	eax, 2
	jmp	SHORT $LN3@antlr3read
$LN2@antlr3read:
; Line 371
	mov	eax, DWORD PTR _fileName$[ebp]
	push	eax
	call	_antlr3Fsize
	add	esp, 4
	mov	DWORD PTR _fSize$[ebp], eax
; Line 375
	mov	esi, esp
	mov	eax, DWORD PTR _fSize$[ebp]
	push	eax
	call	DWORD PTR __imp__malloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _input$[ebp]
	mov	DWORD PTR [ecx+8], eax
; Line 376
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR _fSize$[ebp]
	mov	DWORD PTR [eax+24], ecx
; Line 378
	mov	eax, DWORD PTR _input$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN1@antlr3read
; Line 380
	mov	eax, 1
	jmp	SHORT $LN3@antlr3read
$LN1@antlr3read:
; Line 383
	mov	eax, DWORD PTR _input$[ebp]
	mov	DWORD PTR [eax+12], 1
; Line 388
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _fSize$[ebp]
	push	edx
	mov	eax, DWORD PTR _infile$[ebp]
	push	eax
	call	_antlr3Fread
	add	esp, 12					; 0000000cH
; Line 392
	mov	eax, DWORD PTR _infile$[ebp]
	push	eax
	call	_antlr3Fclose
	add	esp, 4
; Line 394
	xor	eax, eax
$LN3@antlr3read:
; Line 395
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_antlr3read8Bit ENDP
_TEXT	ENDS
EXTRN	__imp__fopen:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _antlr3Fopen
_TEXT	SEGMENT
_filename$ = 8						; size = 4
_mode$ = 12						; size = 4
_antlr3Fopen PROC					; COMDAT
; Line 405
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 406
	mov	esi, esp
	mov	eax, DWORD PTR _mode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _filename$[ebp]
	push	ecx
	call	DWORD PTR __imp__fopen
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 407
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_antlr3Fopen ENDP
_TEXT	ENDS
EXTRN	__imp__fclose:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _antlr3Fclose
_TEXT	SEGMENT
_fd$ = 8						; size = 4
_antlr3Fclose PROC					; COMDAT
; Line 414
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 415
	mov	esi, esp
	mov	eax, DWORD PTR _fd$[ebp]
	push	eax
	call	DWORD PTR __imp__fclose
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 416
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_antlr3Fclose ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	__imp___stat64i32:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _antlr3Fsize
_TEXT	SEGMENT
_statbuf$ = -56						; size = 48
__$ArrayPad$ = -4					; size = 4
_fileName$ = 8						; size = 4
_antlr3Fsize PROC					; COMDAT
; Line 419
	push	ebp
	mov	ebp, esp
	sub	esp, 252				; 000000fcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-252]
	mov	ecx, 63					; 0000003fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 422
	mov	esi, esp
	lea	eax, DWORD PTR _statbuf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _fileName$[ebp]
	push	ecx
	call	DWORD PTR __imp___stat64i32
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 424
	mov	eax, DWORD PTR _statbuf$[ebp+20]
; Line 425
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@antlr3Fsiz
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 252				; 000000fcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN5@antlr3Fsiz:
	DD	1
	DD	$LN4@antlr3Fsiz
$LN4@antlr3Fsiz:
	DD	-56					; ffffffc8H
	DD	48					; 00000030H
	DD	$LN3@antlr3Fsiz
$LN3@antlr3Fsiz:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
_antlr3Fsize ENDP
_TEXT	ENDS
EXTRN	__imp__fread:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _antlr3Fread
_TEXT	SEGMENT
_fdsc$ = 8						; size = 4
_count$ = 12						; size = 4
_data$ = 16						; size = 4
_antlr3Fread PROC					; COMDAT
; Line 429
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 430
	mov	esi, esp
	mov	eax, DWORD PTR _fdsc$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _count$[ebp]
	push	ecx
	mov	edx, DWORD PTR _data$[ebp]
	push	edx
	call	DWORD PTR __imp__fread
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 431
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_antlr3Fread ENDP
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _antlr3CreateStringStream
_TEXT	SEGMENT
_input$ = -8						; size = 4
_data$ = 8						; size = 4
_antlr3CreateStringStream PROC				; COMDAT
; Line 443
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 448
	cmp	DWORD PTR _data$[ebp], 0
	jne	SHORT $LN2@antlr3Crea@2
; Line 450
	xor	eax, eax
	jmp	SHORT $LN3@antlr3Crea@2
$LN2@antlr3Crea@2:
; Line 456
	mov	esi, esp
	push	124					; 0000007cH
	push	1
	call	DWORD PTR __imp__calloc
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _input$[ebp], eax
; Line 458
	cmp	DWORD PTR _input$[ebp], 0
	jne	SHORT $LN1@antlr3Crea@2
; Line 460
	xor	eax, eax
	jmp	SHORT $LN3@antlr3Crea@2
$LN1@antlr3Crea@2:
; Line 465
	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR _data$[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 466
	mov	eax, DWORD PTR _input$[ebp]
	mov	DWORD PTR [eax+12], 0
; Line 471
	mov	eax, DWORD PTR _input$[ebp]
	push	eax
	call	_antlr3GenericSetupStream
	add	esp, 4
; Line 473
	mov	eax, DWORD PTR _input$[ebp]
$LN3@antlr3Crea@2:
; Line 474
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_antlr3CreateStringStream ENDP
_TEXT	ENDS
END
