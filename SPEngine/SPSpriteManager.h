//////////////////////////////////////////////////////////////////////////
/// @file		SPSpriteManager.h the header file of SPSpriteManager class.
/// @author		Ken.J
/// @version	Alpha 0.7
/// @date		2012-7-23
//////////////////////////////////////////////////////////////////////////

#pragma once
#include <d3dx9core.h>
#include <list>
#include "SPSprite.h"
#include "SPAnimatedTexture.h"
#include "SPComponent.h"
#include "SPSingleton.h"

using namespace std;

namespace SPEngine
{
	//////////////////////////////////////////////////////////////////////
	/// @brief SPSpriteManager to create and draw sprite.
	///
	//////////////////////////////////////////////////////////////////////
	class SPSpriteManager :
		public SPComponent, 
		public SPSingleton<SPSpriteManager>
	{
		typedef list<SPSpritePtr> SPSpriteList;
		typedef SPSpriteList::iterator SPSpriteIterator;

		SPSpriteList sprites;
		SPTexturePtr currentTarget;
		bool isTopological;
		//SPEffectPtr blendEffect;

	public:
		LPD3DXSPRITE Renderer;
		LPD3DXSPRITE innerRenderer;

	public:
		SPSpriteManager(void);
		virtual ~SPSpriteManager(void);

		void Initialize();
		void Load();
		void Unload();
		void Update(float timeDelta);
		void PreDraw();
		void Draw(float timeDelta);
		void PostDraw();
		void DrawSimple(float timeDelta);
		void DrawTopological(float timeDelta);
		//bool DrawTopologicalWithBlend(float timeDelta);
		void TopologicalSort();

		void AddSprite(SPSpritePtr sprite);
		void AddSprite(
			SPTexturePtr	tex,
			SPEffectPtr pixelShader,
			D3DXVECTOR3 center,
			D3DXVECTOR3 position,
			D3DCOLOR	color,
			SPTexturePtr	target);
		void AddSprite( 
			SPTexturePtr	tex ,
			SPEffectPtr pixelShader,
			D3DXMATRIX	transformMatrix, 
			RECT		secRect,
			D3DXVECTOR3 center,
			D3DXVECTOR3 position,
			D3DCOLOR	color,
			SPTexturePtr target);
		void AddSprite( 
			SPTexturePtr	tex ,
			SPEffectPtr pixelShader,
			D3DXVECTOR2 scalingCenter,
			float		scalingRotation,
			D3DXVECTOR2 scaling,
			D3DXVECTOR2 rotationCenter,
			float		rotation,
			D3DXVECTOR2 translation,
			RECT		srcRect,
			D3DXVECTOR3 center, 
			D3DXVECTOR3 position,
			D3DCOLOR	color,
			SPTexturePtr target);

		void DrawSprite(SPSpritePtr sprite);

		/// @name Render functions
		/// @{
		/// @brief Render on screen
		void Render(
			SPTexturePtr tex,
			SPEffectPtr ps,
			SPTexturePtr target);
		void Render(
			SPTexturePtr tex, 
			SPEffectPtr ps,
			float		x,
			float		y,
			SPTexturePtr target);
		void Render(
			SPTexturePtr tex,
			SPEffectPtr ps,
			float		x,
			float		y,
			D3DCOLOR	color,
			SPTexturePtr target);
		void Render(
			SPTexturePtr tex,
			SPEffectPtr ps,
			float		x,
			float		y,
			D3DCOLOR	color,
			float		depth,
			SPTexturePtr target);
		void Render(
			SPTexturePtr tex,
			SPEffectPtr ps,
			D3DXVECTOR3 position,
			SPTexturePtr target);
		void Render(
			SPTexturePtr tex,
			SPEffectPtr ps,
			D3DXVECTOR3 position,
			D3DCOLOR	color,
			SPTexturePtr target);
		void Render(
			SPTexturePtr tex,
			SPEffectPtr ps,
			D3DXVECTOR3 center,
			D3DXVECTOR3 position,
			D3DCOLOR	color,
			SPTexturePtr target);
		void Render(
			SPTexturePtr tex,
			SPEffectPtr ps,
			float		x,
			float		y,
			float		scale,
			float		rotation,
			D3DCOLOR	color,
			float		depth,
			SPTexturePtr target);
		void Render(
			SPTexturePtr tex,
			SPEffectPtr ps,
			D3DXVECTOR3 position,
			D3DXVECTOR2 scaling,
			float		rotation,
			D3DCOLOR	color,
			SPTexturePtr target);
		void Render(
			SPTexturePtr tex,
			SPEffectPtr ps,
			D3DXVECTOR3 position,
			D3DXVECTOR2 scalingCenter,
			float		scalingRotation,
			D3DXVECTOR2 scaling,
			D3DXVECTOR2 rotationCenter,
			float		rotation,
			D3DCOLOR	color,
			SPTexturePtr target);

		/// @brief Render on screen with rectangle
		void RenderOnScreen(
			SPTexturePtr tex,
			SPEffectPtr ps,
			SPRectangle destRect,
			D3DCOLOR	color,
			float		depth,
			SPTexturePtr target);
		void RenderOnScreen(
			SPTexturePtr tex,
			SPEffectPtr ps,
			SPRectangle srcRect,
			SPRectangle destRect,
			D3DCOLOR	color,
			float		depth,
			SPTexturePtr target);

		/// @brief Render with transform matrix
		void RenderWithMatrix(
			SPTexturePtr tex,
			SPEffectPtr ps,
			D3DXMATRIX	transformMatrix,
			D3DXVECTOR3 center,
			D3DXVECTOR3 position,
			D3DCOLOR	color,
			SPTexturePtr target);
		void RenderWithMatrix(
			SPTexturePtr tex,
			SPEffectPtr ps,
			D3DXMATRIX	transformMatrix,
			RECT		srcRect,
			D3DXVECTOR3 center,
			D3DXVECTOR3 position,
			D3DCOLOR	color,
			SPTexturePtr target);

		/// @brief Render with scaling 
		void RenderWithScaling(
			SPTexturePtr tex,
			SPEffectPtr ps,
			float		x,
			float		y,
			float		scale,
			D3DCOLOR	color,
			SPTexturePtr target);
		void RenderWithScaling(
			SPTexturePtr tex,
			SPEffectPtr ps,
			float		x,
			float		y,
			float		scale,
			D3DCOLOR	color,
			float		depth,
			SPTexturePtr target);
		void RenderWithScaling(
			SPTexturePtr tex,
			SPEffectPtr ps,
			D3DXVECTOR3 position,
			float		scale,
			D3DCOLOR	color,
			SPTexturePtr target);
		void RenderWithScaling(
			SPTexturePtr tex,
			SPEffectPtr ps,
			D3DXVECTOR3 position,
			D3DXVECTOR2 scaling,
			D3DCOLOR	color,
			SPTexturePtr target);
		void RenderWithScaling(
			SPTexturePtr tex,
			SPEffectPtr ps,
			D3DXVECTOR3 position,
			D3DXVECTOR2 scalingCenter,
			float		scalingRotation,
			D3DXVECTOR2 scaling,
			D3DCOLOR	color,
			SPTexturePtr target);

		/// @brief Render with rotation
		void RenderWithRotation(
			SPTexturePtr tex,
			SPEffectPtr ps,
			float		x,
			float		y,
			float		rotation,
			D3DCOLOR	color,
			SPTexturePtr target);
		void RenderWithRotation(
			SPTexturePtr tex,
			SPEffectPtr ps,
			float		x,
			float		y,
			float		rotation,
			D3DCOLOR	color,
			float		depth,
			SPTexturePtr target);
		void RenderWithRotation(
			SPTexturePtr tex,
			SPEffectPtr ps,
			D3DXVECTOR3 position,
			float		rotation,
			D3DCOLOR	color,
			SPTexturePtr target);
		void RenderWithRotation(
			SPTexturePtr tex,
			SPEffectPtr ps,
			D3DXVECTOR3 position,
			D3DXVECTOR2 rotationCenter,
			float		rotation,
			D3DCOLOR	color,
			SPTexturePtr target);

		/// @brief Render basic
		void RenderBasic(
			SPTexturePtr tex,
			SPEffectPtr ps,
			D3DXVECTOR3 center, 
			D3DXVECTOR3 position,
			D3DCOLOR	color,
			D3DXVECTOR2 scalingCenter,
			float		scalingRotation,
			D3DXVECTOR2 scaling,
			D3DXVECTOR2 rotationCenter,
			float		rotation,
			D3DXVECTOR2 translation,
			SPTexturePtr target);
		void RenderBasic(
			SPTexturePtr tex,
			SPEffectPtr ps,
			RECT		srcRect,
			D3DXVECTOR3 center, 
			D3DXVECTOR3 position,
			D3DCOLOR	color,
			D3DXVECTOR2 scalingCenter,
			float		scalingRotation,
			D3DXVECTOR2 scaling,
			D3DXVECTOR2 rotationCenter,
			float		rotation,
			D3DXVECTOR2 translation,
			SPTexturePtr target);

		/// @brief Render centered
		void RenderCentered(
			SPTexturePtr tex, 
			SPEffectPtr ps,
			SPTexturePtr target);
		void RenderCentered(
			SPTexturePtr tex,
			SPEffectPtr ps,
			float		x,
			float		y,
			SPTexturePtr target);
		void RenderCentered(
			SPTexturePtr tex,
			SPEffectPtr ps,
			float		x,
			float		y,
			D3DCOLOR	color,
			SPTexturePtr target);
		void RenderCentered(
			SPTexturePtr tex,
			SPEffectPtr ps,
			float		x,
			float		y,
			D3DCOLOR	color,
			float		depth,
			SPTexturePtr target);
		void RenderCentered(
			SPTexturePtr tex,
			SPEffectPtr ps,
			D3DXVECTOR3 position,
			SPTexturePtr target);
		void RenderCentered(
			SPTexturePtr tex,
			SPEffectPtr ps,
			D3DXVECTOR3 position,
			D3DCOLOR	color,
			SPTexturePtr target);
		void RenderCentered(
			SPTexturePtr tex,
			SPEffectPtr ps,
			D3DXVECTOR3 center,
			D3DXVECTOR3 position,
			D3DCOLOR	color,
			SPTexturePtr target);
		void RenderCentered(
			SPTexturePtr tex,
			SPEffectPtr ps,
			float		x,
			float		y,
			float		scale,
			float		rotation,
			D3DCOLOR	color,
			float		depth,
			SPTexturePtr target);
		void RenderCentered(
			SPTexturePtr tex,
			SPEffectPtr ps,
			D3DXVECTOR3 position,
			D3DXVECTOR2 scaling,
			float		rotation,
			D3DCOLOR	color,
			SPTexturePtr target);
		void RenderCentered(
			SPTexturePtr tex,
			SPEffectPtr ps,
			D3DXVECTOR3 position,
			D3DXVECTOR2 scalingCenter,
			float		scalingRotation,
			D3DXVECTOR2 scaling,
			D3DXVECTOR2 rotationCenter,
			float		rotation,
			D3DCOLOR	color,
			SPTexturePtr target);
		void RenderCentered(
			SPTexturePtr tex,
			SPEffectPtr ps,
			SPRectangle srcRect,
			D3DXVECTOR3 position,
			float		scale,
			float		rotation,
			D3DCOLOR	color,
			SPTexturePtr target);
		void RenderCentered(
			SPTexturePtr tex,
			SPEffectPtr ps,
			SPRectangle srcRect,
			D3DXVECTOR3 position,
			float		scale,
			D3DXVECTOR2 rotationCenter,
			float		rotation,
			D3DCOLOR	color,
			SPTexturePtr target);

		/// @brief Render centered with scaling
		void RenderCenteredWithScaling(
			SPTexturePtr tex,
			SPEffectPtr ps,
			float		x,
			float		y,
			float		scale,
			D3DCOLOR	color,
			SPTexturePtr target);
		void RenderCenteredWithScaling(
			SPTexturePtr tex,
			SPEffectPtr ps,
			float		x,
			float		y,
			float		scale,
			D3DCOLOR	color,
			float		depth,
			SPTexturePtr target);
		void RenderCenteredWithScaling(
			SPTexturePtr tex,
			SPEffectPtr ps,
			D3DXVECTOR3 position,
			float		scale,
			D3DCOLOR	color,
			SPTexturePtr target);
		void RenderCenteredWithScaling(
			SPTexturePtr tex,
			SPEffectPtr ps,
			D3DXVECTOR3 position,
			D3DXVECTOR2 scaling,
			D3DCOLOR	color,
			SPTexturePtr target);
		void RenderCenteredWithScaling(
			SPTexturePtr tex,
			SPEffectPtr ps,
			D3DXVECTOR3 position,
			D3DXVECTOR2 scalingCenter,
			float		scalingRotation,
			D3DXVECTOR2 scaling,
			D3DCOLOR	color,
			SPTexturePtr target);

		/// @brief Render centered with rotation
		void RenderCenteredWithRotation(
			SPTexturePtr tex,
			SPEffectPtr ps,
			float		x,
			float		y,
			float		rotation,
			D3DCOLOR	color,
			SPTexturePtr target);
		void RenderCenteredWithRotation(
			SPTexturePtr tex,
			SPEffectPtr ps,
			float		x,
			float		y,
			float		rotation,
			D3DCOLOR	color,
			float		depth,
			SPTexturePtr target);
		void RenderCenteredWithRotation(
			SPTexturePtr tex,
			SPEffectPtr ps,
			D3DXVECTOR3 position,
			float		rotation,
			D3DCOLOR	color,
			SPTexturePtr target);
		void RenderCenteredWithRotation(
			SPTexturePtr tex,
			SPEffectPtr ps,
			D3DXVECTOR3 position,
			D3DXVECTOR2 rotationCenter,
			float		rotation,
			D3DCOLOR	color,
			SPTexturePtr target);

		/// @brief Render centered basic
		void RenderCenteredBasic(
			SPTexturePtr tex,
			SPEffectPtr ps,
			D3DXVECTOR3 center, 
			D3DXVECTOR3 position,
			D3DCOLOR	color,
			D3DXVECTOR2 scalingCenter,
			float		scalingRotation,
			D3DXVECTOR2 scaling,
			D3DXVECTOR2 rotationCenter,
			float		rotation,
			D3DXVECTOR2 translation,
			SPTexturePtr target);
		void RenderCenteredBasic(
			SPTexturePtr tex,
			SPEffectPtr ps,
			RECT		srcRect,
			D3DXVECTOR3 center, 
			D3DXVECTOR3 position,
			D3DCOLOR	color,
			D3DXVECTOR2 scalingCenter,
			float		scalingRotation,
			D3DXVECTOR2 scaling,
			D3DXVECTOR2 rotationCenter,
			float		rotation,
			D3DXVECTOR2 translation,
			SPTexturePtr target);
		/// @}

		/// @name Animated render function.
		/// @{
		void ARender(
			SPAnimatedTexturePtr anime, 
			SPEffectPtr ps,
			SPTexturePtr target);
		void ARender(
			SPAnimatedTexturePtr anime,
			SPEffectPtr ps,
			float		x,
			float		y,
			SPTexturePtr target);
		void ARender(
			SPAnimatedTexturePtr anime,
			SPEffectPtr ps,
			float		x,
			float		y,
			D3DCOLOR	color,
			SPTexturePtr target);
		void ARender(
			SPAnimatedTexturePtr anime,
			SPEffectPtr ps,
			float		x,
			float		y,
			D3DCOLOR	color,
			float		depth,
			SPTexturePtr target);
		void ARender(
			SPAnimatedTexturePtr anime,
			SPEffectPtr ps,
			D3DXVECTOR3 position,
			SPTexturePtr target);
		void ARender(
			SPAnimatedTexturePtr anime,
			SPEffectPtr ps,
			D3DXVECTOR3 position,
			D3DCOLOR	color,
			SPTexturePtr target);
		void ARender(
			SPAnimatedTexturePtr anime,
			SPEffectPtr ps,
			D3DXVECTOR3 center,
			D3DXVECTOR3 position,
			D3DCOLOR	color,
			SPTexturePtr target);
		void ARender(
			SPAnimatedTexturePtr anime,
			SPEffectPtr ps,
			float		x,
			float		y,
			float		scale,
			float		rotation,
			D3DCOLOR	color,
			float		depth,
			SPTexturePtr target);
		void ARender(
			SPAnimatedTexturePtr anime,
			SPEffectPtr ps,
			D3DXVECTOR3 position,
			D3DXVECTOR2 scaling,
			float		rotation,
			D3DCOLOR	color,
			SPTexturePtr target);
		void ARender(
			SPAnimatedTexturePtr anime,
			SPEffectPtr ps,
			D3DXVECTOR3 position,
			D3DXVECTOR2 scalingCenter,
			float		scalingRotation,
			D3DXVECTOR2 scaling,
			D3DXVECTOR2 rotationCenter,
			float		rotation,
			D3DCOLOR	color,
			SPTexturePtr target);

		/// @brief Render animation on screen with rectangle
		void ARenderOnScreen(
			SPAnimatedTexturePtr anime,
			SPEffectPtr ps,
			SPRectangle destRect,
			D3DCOLOR	color,
			float		depth,
			SPTexturePtr target);	

		/// @brief Render animation with scaling 
		void ARenderWithScaling(
			SPAnimatedTexturePtr anime,
			SPEffectPtr ps,
			float		x,
			float		y,
			float		scale,
			D3DCOLOR	color,
			SPTexturePtr target);
		void ARenderWithScaling(
			SPAnimatedTexturePtr anime,
			SPEffectPtr ps,
			float		x,
			float		y,
			float		scale,
			D3DCOLOR	color,
			float		depth,
			SPTexturePtr target);
		void ARenderWithScaling(
			SPAnimatedTexturePtr anime,
			SPEffectPtr ps,
			D3DXVECTOR3 position,
			float		scale,
			D3DCOLOR	color,
			SPTexturePtr target);
		void ARenderWithScaling(
			SPAnimatedTexturePtr anime,
			SPEffectPtr ps,
			D3DXVECTOR3 position,
			D3DXVECTOR2 scaling,
			D3DCOLOR	color,
			SPTexturePtr target);
		void ARenderWithScaling(
			SPAnimatedTexturePtr anime,
			SPEffectPtr ps,
			D3DXVECTOR3 position,
			D3DXVECTOR2 scalingCenter,
			float		scalingRotation,
			D3DXVECTOR2 scaling,
			D3DCOLOR	color,
			SPTexturePtr target);

		/// @brief Render animation with rotation
		void ARenderWithRotation(
			SPAnimatedTexturePtr anime,
			SPEffectPtr ps,
			float		x,
			float		y,
			float		rotation,
			D3DCOLOR	color,
			SPTexturePtr target);
		void ARenderWithRotation(
			SPAnimatedTexturePtr anime,
			SPEffectPtr ps,
			float		x,
			float		y,
			float		rotation,
			D3DCOLOR	color,
			float		depth,
			SPTexturePtr target);
		void ARenderWithRotation(
			SPAnimatedTexturePtr anime,
			SPEffectPtr ps,
			D3DXVECTOR3 position,
			float		rotation,
			D3DCOLOR	color,
			SPTexturePtr target);
		void ARenderWithRotation(
			SPAnimatedTexturePtr anime,
			SPEffectPtr ps,
			D3DXVECTOR3 position,
			D3DXVECTOR2 rotationCenter,
			float		rotation,
			D3DCOLOR	color,
			SPTexturePtr target);


		void ARenderBasic(
			SPAnimatedTexturePtr anime,
			SPEffectPtr ps,
			D3DXVECTOR3 center, 
			D3DXVECTOR3 position,
			D3DCOLOR	color,
			D3DXVECTOR2 scalingCenter,
			float		scalingRotation,
			D3DXVECTOR2 scaling,
			D3DXVECTOR2 rotationCenter,
			float		rotation,
			D3DXVECTOR2 translation,
			SPTexturePtr target);

		/// @brief Render animation centered
		void ARenderCentered(
			SPAnimatedTexturePtr anime, 
			SPEffectPtr ps,
			SPTexturePtr target);
		void ARenderCentered(
			SPAnimatedTexturePtr anime,
			SPEffectPtr ps,
			float		x,
			float		y,
			SPTexturePtr target);
		void ARenderCentered(
			SPAnimatedTexturePtr anime,
			SPEffectPtr ps,
			float		x,
			float		y,
			D3DCOLOR	color,
			SPTexturePtr target);
		void ARenderCentered(
			SPAnimatedTexturePtr anime,
			SPEffectPtr ps,
			float		x,
			float		y,
			D3DCOLOR	color,
			float		depth,
			SPTexturePtr target);
		void ARenderCentered(
			SPAnimatedTexturePtr anime,
			SPEffectPtr ps,
			D3DXVECTOR3 position,
			SPTexturePtr target);
		void ARenderCentered(
			SPAnimatedTexturePtr anime, 
			SPEffectPtr ps,
			D3DXVECTOR3 position,
			D3DCOLOR	color,
			SPTexturePtr target);
		void ARenderCentered(
			SPAnimatedTexturePtr anime, 
			SPEffectPtr ps,
			D3DXVECTOR3 center,
			D3DXVECTOR3 position,
			D3DCOLOR	color,
			SPTexturePtr target);
		void ARenderCentered(
			SPAnimatedTexturePtr anime, 
			SPEffectPtr ps,
			float		x,
			float		y,
			float		scale,
			float		rotation,
			D3DCOLOR	color,
			float		depth,
			SPTexturePtr target);
		void ARenderCentered(
			SPAnimatedTexturePtr anime, 
			SPEffectPtr ps,
			D3DXVECTOR3 position,
			D3DXVECTOR2 scaling,
			float		rotation,
			D3DCOLOR	color,
			SPTexturePtr target);
		void ARenderCentered(
			SPAnimatedTexturePtr anime, 
			SPEffectPtr ps,
			D3DXVECTOR3 position,
			D3DXVECTOR2 scalingCenter,
			float		scalingRotation,
			D3DXVECTOR2 scaling,
			D3DXVECTOR2 rotationCenter,
			float		rotation,
			D3DCOLOR	color,
			SPTexturePtr target);
		void ARenderCentered(
			SPAnimatedTexturePtr anime, 
			SPEffectPtr ps,
			D3DXVECTOR3 position,
			float		scale,
			float		rotation,
			D3DCOLOR	color,
			SPTexturePtr target);
		void ARenderCentered(
			SPAnimatedTexturePtr anime, 
			SPEffectPtr ps,
			D3DXVECTOR3 position,
			float		scale,
			D3DXVECTOR2 rotationCenter,
			float		rotation,
			D3DCOLOR	color,
			SPTexturePtr target);

		/// @brief Render centered with scaling
		void ARenderCenteredWithScaling(
			SPAnimatedTexturePtr anime, 
			SPEffectPtr ps,
			float		x,
			float		y,
			float		scale,
			D3DCOLOR	color,
			SPTexturePtr target);
		void ARenderCenteredWithScaling(
			SPAnimatedTexturePtr anime, 
			SPEffectPtr ps,
			float		x,
			float		y,
			float		scale,
			D3DCOLOR	color,
			float		depth,
			SPTexturePtr target);
		void ARenderCenteredWithScaling(
			SPAnimatedTexturePtr anime, SPEffectPtr ps,
			D3DXVECTOR3 position,
			float		scale,
			D3DCOLOR	color,
			SPTexturePtr target);
		void ARenderCenteredWithScaling(
			SPAnimatedTexturePtr anime, SPEffectPtr ps,
			D3DXVECTOR3 position,
			D3DXVECTOR2 scaling,
			D3DCOLOR	color,
			SPTexturePtr target);
		void ARenderCenteredWithScaling(
			SPAnimatedTexturePtr anime, 
			SPEffectPtr ps,
			D3DXVECTOR3 position,
			D3DXVECTOR2 scalingCenter,
			float		scalingRotation,
			D3DXVECTOR2 scaling,
			D3DCOLOR	color,
			SPTexturePtr target);

		/// @brief Render centered with rotation
		void ARenderCenteredWithRotation(
			SPAnimatedTexturePtr anime, 
			SPEffectPtr ps,
			float		x,
			float		y,
			float		rotation,
			D3DCOLOR	color,
			SPTexturePtr target);
		void ARenderCenteredWithRotation(
			SPAnimatedTexturePtr anime, 
			SPEffectPtr ps,
			float		x,
			float		y,
			float		rotation,
			D3DCOLOR	color,
			float		depth,
			SPTexturePtr target);
		void ARenderCenteredWithRotation(
			SPAnimatedTexturePtr anime, 
			SPEffectPtr ps,
			D3DXVECTOR3 position,
			float		rotation,
			D3DCOLOR	color,
			SPTexturePtr target);
		void ARenderCenteredWithRotation(
			SPAnimatedTexturePtr anime, SPEffectPtr ps,
			D3DXVECTOR3 position,
			D3DXVECTOR2 rotationCenter,
			float		rotation,
			D3DCOLOR	color,
			SPTexturePtr target);

		/// @brief Render centered basic
		void ARenderCenteredBasic(
			SPAnimatedTexturePtr anime, SPEffectPtr ps,
			D3DXVECTOR3 center, 
			D3DXVECTOR3 position,
			D3DCOLOR	color,
			D3DXVECTOR2 scalingCenter,
			float		scalingRotation,
			D3DXVECTOR2 scaling,
			D3DXVECTOR2 rotationCenter,
			float		rotation,
			D3DXVECTOR2 translation,
			SPTexturePtr target);
		/// @}
	};
}


